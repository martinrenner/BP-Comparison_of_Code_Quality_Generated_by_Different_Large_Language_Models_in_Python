import re
import unittest


class Calculator:
    """
    A console-based arithmetic calculator that supports addition, subtraction,
    multiplication, division, and parentheses.  It handles operator precedence
    correctly and accepts both integers and floating-point numbers.  The
    implementation follows ISO/IEC 25010 guidelines for software quality.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression.

        Args:
            expression: The arithmetic expression as a string.

        Returns:
            The result of the expression as a float.

        Raises:
            ValueError: If the input expression is invalid (e.g., unbalanced
                parentheses, invalid characters, division by zero).
            TypeError: If the input is not a string
        """

        if not isinstance(expression, str):
            raise TypeError("Input expression must be a string.")

        # Tokenize and parse the expression
        try:
            tokens = self._tokenize(expression)
            parsed_expression = self._parse(tokens)
            result = self._evaluate(parsed_expression)
            return result
        except (ValueError, TypeError, ZeroDivisionError) as e:
            raise e  # Re-raise for consistent error handling

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the input expression.

        Args:
          expression: The string expression.

        Returns:
           A list of tokens (numbers, operators, parentheses).
        """

        # Remove whitespace
        expression = expression.replace(" ", "")

        # Use regular expression to tokenize.  This handles multi-digit numbers,
        # decimal points, and negative numbers correctly.
        tokens = re.findall(r"(\d+\.?\d*|\.\d+|[-+*/()]|\d+)", expression)

        # Validate for invalid characters
        valid_chars = r"^[-+*/().\d]+$"
        if not re.match(valid_chars, expression):
            raise ValueError("Invalid characters in expression.")
        return tokens
    
    def _parse(self, tokens: list) -> list:
        """
        Parses tokens into a Reverse Polish Notation (RPN) representation using the Shunting Yard algorithm.

        Args:
            tokens: List of tokens generated by _tokenize.

        Returns:
           A list of tokens in Reverse Polish Notation (RPN)

        Raises:
            ValueError: If the parentheses are unbalanced.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}

        for token in tokens:
            if re.match(r"(\d+\.?\d*|\.\d+)", token):  # If number, including decimals
                output_queue.append(float(token))
            elif token in precedence:  # If operator
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                try:
                    while operator_stack[-1] != '(':
                        output_queue.append(operator_stack.pop())
                    operator_stack.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses.")
            else:
                raise ValueError(f"Invalid token: {token}")

        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Unbalanced parentheses.")
            output_queue.append(operator_stack.pop())

        return output_queue

    def _evaluate(self, rpn_expression: list) -> float:
        """
        Evaluates an expression in Reverse Polish Notation (RPN).

        Args:
            rpn_expression: List of tokens in RPN.

        Returns:
           The result of the evaluation.

        Raises:
          ValueError: If an invalid number of operands has been entered
            ZeroDivisionError: If here is division by zero.
        """

        stack = []
        for token in rpn_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid number of operands entered")

                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero.")
                    stack.append(operand1 / operand2)
                # No need for an else, as _parse already handles invalid operators

        if len(stack) != 1:
             raise ValueError("Invalid number of operands entered")

        return stack[0]


class TestCalculator(unittest.TestCase):
    """Test cases for the Calculator class, covering various scenarios."""

    def setUp(self):
        """Setup method to create a Calculator instance before each test."""
        self.calculator = Calculator()

    def test_addition(self):
        self.assertAlmostEqual(self.calculator.calculate("2+3"), 5.0)
        self.assertAlmostEqual(self.calculator.calculate("10+25"), 35.0)

    def test_subtraction(self):
        self.assertAlmostEqual(self.calculator.calculate("5-2"), 3.0)
        self.assertAlmostEqual(self.calculator.calculate("10-25"), -15.0)
        self.assertAlmostEqual(self.calculator.calculate("-5 - 2"), -7.0)

    def test_multiplication(self):
        self.assertAlmostEqual(self.calculator.calculate("2*3"), 6.0)
        self.assertAlmostEqual(self.calculator.calculate("-5 * 4"), -20.0)

    def test_division(self):
        self.assertAlmostEqual(self.calculator.calculate("6/2"), 3.0)
        self.assertAlmostEqual(self.calculator.calculate("10/4"), 2.5)
        self.assertAlmostEqual(self.calculator.calculate("-6/3"), -2.0)
    
    def test_division_by_zero(self):
        with self.assertRaises(ZeroDivisionError):
            self.calculator.calculate("5/0")

    def test_parentheses(self):
        self.assertAlmostEqual(self.calculator.calculate("(2+3)*4"), 20.0)
        self.assertAlmostEqual(self.calculator.calculate("2*(3+4)"), 14.0)
        self.assertAlmostEqual(self.calculator.calculate("2 * (3 + (8 - 2) / 3)"), 10.0)

    def test_precedence(self):
        self.assertAlmostEqual(self.calculator.calculate("2+3*4"), 14.0)
        self.assertAlmostEqual(self.calculator.calculate("10-2*3+1"), 5.0)

    def test_complex_expressions(self):
        self.assertAlmostEqual(self.calculator.calculate("2*(3+4)/(10-2*3-3)"), 14.0)
        self.assertAlmostEqual(self.calculator.calculate("10 + (8 * 2) - (6 / 3)"), 24.0)
        self.assertAlmostEqual(self.calculator.calculate("((2 + 3) * 4) / 5"), 4.0)
        self.assertAlmostEqual(self.calculator.calculate("1.5 * (2.2 + 3.8) / 2"), 4.5)
        self.assertAlmostEqual(self.calculator.calculate("-2 * (-3 + 5)"), -4.0)

    def test_invalid_input_unbalanced(self):
        with self.assertRaises(ValueError):
             self.calculator.calculate("(2+3")
        with self.assertRaises(ValueError):
            self.calculator.calculate("2+3)")
        with self.assertRaises(ValueError):
            self.calculator.calculate("((2+3)")
        with self.assertRaises(ValueError):
             self.calculator.calculate(")2+3(")

    def test_invalid_input_characters(self):
        with self.assertRaises(ValueError):
            self.calculator.calculate("2a+3")
        with self.assertRaises(ValueError):
            self.calculator.calculate("2$ + 3")

    def test_input_type_check(self):
        with self.assertRaises(TypeError):
            self.calculator.calculate(123)

    def test_multiple_decimal_points(self):
         with self.assertRaises(ValueError):
            self.calculator.calculate("2..5+3")

    def test_leading_and_trailing_operators(self):
        with self.assertRaises(ValueError):
            self.calculator.calculate("*2+3")

    def test_empty_input(self):
         self.assertAlmostEqual(self.calculator.calculate(""), 0.0)
    

if __name__ == '__main__':
    my_calculator = Calculator()

    # Interactive loop for console input
    while True:
        expression = input("Enter an arithmetic expression (or 'quit' to exit): ")
        if expression.lower() == 'quit':
            break
        try:
            result = my_calculator.calculate(expression)
            print("Result:", result)
        except (ValueError, TypeError, ZeroDivisionError) as e:
            print("Error:", e)
    
    # unittest.main() #uncomment to run automated tests
