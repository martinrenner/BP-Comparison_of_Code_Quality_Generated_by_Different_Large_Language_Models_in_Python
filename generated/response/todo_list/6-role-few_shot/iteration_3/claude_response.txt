# To-Do List Application

I'll create a clean, modular Python to-do list application following the ISO/IEC 25010 standard with proper OOP design principles.

```python
class TaskManager:
    """
    A class for managing a to-do list with functionality to add, remove, search,
    mark tasks as finished, and retrieve tasks.
    
    The class maintains tasks in memory with efficient lookups by ID and search capabilities.
    """
    
    def __init__(self):
        """Initialize the TaskManager with empty task storage and ID counter."""
        self._tasks = {}  # Dictionary for O(1) lookups by ID
        self._next_id = 1  # Auto-increment ID counter
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): Name of the task.
            task_description (str): Detailed description of the task.
            
        Returns:
            int: The unique ID of the newly added task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string.")
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string.")
        
        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id (int): The unique identifier of the task to remove.
            
        Returns:
            bool: True if the task was successfully removed, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> list[dict]:
        """
        Search for tasks containing the specified term in name or description.
        
        Args:
            task_term (str): The search term to look for in task names and descriptions.
            
        Returns:
            list[dict]: A list of tasks matching the search term.
            
        Raises:
            ValueError: If task_term is empty.
        """
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string.")
        
        task_term = task_term.lower()  # Case-insensitive search
        results = []
        
        for task in self._tasks.values():
            if (task_term in task["task_name"].lower() or 
                task_term in task["task_description"].lower()):
                results.append(task.copy())  # Return a copy to prevent external modification
        
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique identifier of the task to mark as completed.
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        
        if task_id in self._tasks:
            self._tasks[task_id]["is_finished"] = True
            return True
        return False
    
    def get_all(self) -> list[dict]:
        """
        Retrieve all tasks.
        
        Returns:
            list[dict]: A list of all tasks.
        """
        return [task.copy() for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Remove all tasks.
        
        Returns:
            bool: True if the operation was successful.
        """
        self._tasks.clear()
        return True

    def _validate_task_id(self, task_id: int) -> bool:
        """
        Validate if a task ID exists in the task manager.
        
        Args:
            task_id (int): The task ID to validate.
            
        Returns:
            bool: True if the task ID exists, False otherwise.
        """
        return task_id in self._tasks
```

This implementation features:

1. **Clean OOP Design**: Encapsulates all task management functionality within the `TaskManager` class.

2. **Efficient Data Storage**: Uses a dictionary for O(1) task lookups by ID.

3. **Input Validation**: Validates all inputs and raises appropriate exceptions for invalid data.

4. **Defensive Copying**: Returns copies of task objects to prevent external modification of internal data.

5. **Documentation**: Includes comprehensive docstrings with parameter descriptions and return values.

6. **Maintainability**: Clear variable names and logical structure make the code easy to understand and maintain.

7. **Error Handling**: Gracefully handles edge cases like non-existent tasks and invalid inputs.

The implementation follows all the specified requirements while maintaining high code quality standards.