```python
#!/usr/bin/env python3
"""
Console-based Todo List Application.

This application manages a todo list with operations to add, remove, search, finish,
retrieve, and clear tasks. Each task is represented by its ID, name, description, and
completion status. This implementation adheres to ISO/IEC 25010 requirements for quality
attributes such as correctness, performance, modularity, security, testability, and readability.
"""

class TaskManager:
    """
    TaskManager manages tasks in an in-memory store using a dictionary for quick lookups,
    insertions, and deletions.

    Each task is stored as a dictionary with the following keys:
        - id: Unique identifier for the task.
        - task_name: Name of the task.
        - task_description: Description of the task.
        - is_finished: Boolean flag indicating if the task is completed.
    """

    def __init__(self):
        """
        Initializes the TaskManager with an empty task store and a counter for unique task IDs.
        """
        self.tasks = {}
        self.next_id = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with the provided name and description.

        Args:
            task_name (str): The name of the task. Must not be empty.
            task_description (str): The description of the task. Must not be empty.

        Raises:
            ValueError: If task_name or task_description is empty.

        Returns:
            int: The unique ID assigned to the newly added task.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.

        Args:
            task_id (int): The unique ID of the task to remove.

        Raises:
            TypeError: If the provided task_id is not an integer.
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the provided task_id.

        Returns:
            bool: True if the task was successfully removed.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
            raise KeyError(f"Task with ID {task_id} does not exist.")

        del self.tasks[task_id]
        return True

    def search(self, task_term: str) -> list:
        """
        Searches for tasks whose name or description contains the given search term (case insensitive).

        Args:
            task_term (str): The term to search for in task names and descriptions.

        Raises:
            ValueError: If the search term is empty.

        Returns:
            list[dict]: A list of task dictionaries that match the search criteria.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.lower()
        matching_tasks = [
            task for task in self.tasks.values()
            if term_lower in task["task_name"].lower() or term_lower in task["task_description"].lower()
        ]
        return matching_tasks

    def finish(self, task_id: int) -> bool:
        """
        Marks the task with the given ID as completed.

        Args:
            task_id (int): The unique ID of the task to mark as finished.

        Raises:
            TypeError: If the provided task_id is not an integer.
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the provided task_id.

        Returns:
            bool: True if the task was successfully marked as finished.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
            raise KeyError(f"Task with ID {task_id} does not exist.")

        self.tasks[task_id]["is_finished"] = True
        return True

    def get_all(self) -> list:
        """
        Retrieves all tasks stored in the TaskManager.

        Returns:
            list[dict]: A list of dictionaries, each representing a task with keys:
                        'id', 'task_name', 'task_description', 'is_finished'.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Clears all tasks from the TaskManager.

        Returns:
            bool: True if all tasks were successfully cleared.
        """
        self.tasks.clear()
        self.next_id = 1
        return True


def main():
    """
    Entry point for the console-based todo list application.
    Provides a simple menu-driven interface for interacting with the TaskManager.
    """
    task_manager = TaskManager()

    menu = (
        "\nTodo List App Menu:\n"
        "1. Add a Task\n"
        "2. Remove a Task\n"
        "3. Search Tasks\n"
        "4. Finish a Task\n"
        "5. Get All Tasks\n"
        "6. Clear All Tasks\n"
        "7. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice (1-7): ").strip()

        if choice == "1":
            # Add a Task
            try:
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = task_manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "2":
            # Remove a Task
            try:
                task_id_input = input("Enter task ID to remove: ").strip()
                if not task_id_input.isdigit():
                    raise ValueError("Task ID must be a positive integer.")
                task_id = int(task_id_input)
                task_manager.remove(task_id)
                print("Task removed successfully.")
            except (ValueError, KeyError, TypeError) as e:
                print(f"Error: {e}")

        elif choice == "3":
            # Search Tasks
            try:
                search_term = input("Enter search term: ").strip()
                results = task_manager.search(search_term)
                if results:
                    print("Search Results:")
                    for task in results:
                        print(f"ID: {task['id']}, Name: {task['task_name']}, "
                              f"Description: {task['task_description']}, Finished: {task['is_finished']}")
                else:
                    print("No tasks found matching the search term.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "4":
            # Finish a Task
            try:
                task_id_input = input("Enter task ID to mark as finished: ").strip()
                if not task_id_input.isdigit():
                    raise ValueError("Task ID must be a positive integer.")
                task_id = int(task_id_input)
                task_manager.finish(task_id)
                print("Task marked as finished.")
            except (ValueError, KeyError, TypeError) as e:
                print(f"Error: {e}")

        elif choice == "5":
            # Get All Tasks
            tasks = task_manager.get_all()
            if tasks:
                print("All Tasks:")
                for task in tasks:
                    print(f"ID: {task['id']}, Name: {task['task_name']}, "
                          f"Description: {task['task_description']}, Finished: {task['is_finished']}")
            else:
                print("No tasks available.")

        elif choice == "6":
            # Clear All Tasks
            confirm = input("Are you sure you want to clear all tasks? (y/n): ").strip().lower()
            if confirm == "y":
                task_manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Clear all cancelled.")

        elif choice == "7":
            # Exit the application
            print("Exiting Todo List App. Goodbye!")
            break

        else:
            print("Invalid choice. Please select a valid option from the menu.")


if __name__ == "__main__":
    main()
```