I'll create a high-quality, console-based todo list app that meets the ISO/IEC 25010 requirements. Here's the implementation with appropriate documentation and error handling:

```python
"""
Todo List Application

This module provides a task management system with functionality to add, remove,
search, complete, and manage tasks. Implementation follows ISO/IEC 25010 quality standards.
"""

from typing import List, Dict, Union, Optional
import time


class TaskManager:
    """
    A class to manage todo list tasks with operations for adding, removing,
    searching, completing, and retrieving tasks.
    
    Attributes:
        _tasks (dict): Internal dictionary to store tasks with task_id as key
        _next_id (int): Counter to assign unique IDs to new tasks
    """
    
    def __init__(self) -> None:
        """Initialize an empty task manager with a counter for task IDs."""
        self._tasks: Dict[int, Dict] = {}
        self._next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
        
        Args:
            task_name (str): The name/title of the task
            task_description (str): A detailed description of the task
            
        Returns:
            int: The unique ID of the newly created task
            
        Raises:
            ValueError: If task_name or task_description is empty or not a string
        """
        # Validate inputs
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name cannot be empty")
        
        if not isinstance(task_description, str):
            raise ValueError("Task description must be a string")
        
        # Sanitize inputs
        task_name = task_name.strip()
        task_description = task_description.strip()
        
        # Assign a unique ID and create the task
        task_id = self._next_id
        self._next_id += 1
        
        # Store the task with creation timestamp for sorting
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False,
            "created_at": time.time()
        }
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the todo list.
        
        Args:
            task_id (int): The unique ID of the task to be removed
            
        Returns:
            bool: True if the task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks that match the given term in name or description.
        
        Args:
            task_term (str): The search term to look for
            
        Returns:
            List[Dict]: A list of dictionaries containing task details that match the search term
            
        Raises:
            ValueError: If task_term is empty or not a string
        """
        if not isinstance(task_term, str):
            raise ValueError("Search term must be a string")
        
        task_term = task_term.strip().lower()
        
        # Return empty list for empty search term
        if not task_term:
            return []
        
        matching_tasks = []
        
        for task in self._tasks.values():
            if (task_term in task["task_name"].lower() or 
                task_term in task["task_description"].lower()):
                matching_tasks.append({
                    "id": task["id"],
                    "task_name": task["task_name"],
                    "task_description": task["task_description"],
                    "is_finished": task["is_finished"]
                })
                
        return matching_tasks
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to be marked as completed
            
        Returns:
            bool: True if the task status was successfully updated, False if the task doesn't exist
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            # Don't update if already finished
            if self._tasks[task_id]["is_finished"]:
                return True
            
            self._tasks[task_id]["is_finished"] = True
            return True
        return False
    
    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks in the todo list.
        
        Returns:
            List[Dict]: A list of dictionaries containing all task details
        """
        result = []
        
        for task in self._tasks.values():
            result.append({
                "id": task["id"],
                "task_name": task["task_name"],
                "task_description": task["task_description"],
                "is_finished": task["is_finished"]
            })
            
        return result
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the todo list.
        
        Returns:
            bool: True if the operation was successful
        """
        self._tasks.clear()
        return True
    
    def get_task(self, task_id: int) -> Optional[Dict]:
        """
        Get a specific task by ID.
        
        Args:
            task_id (int): The unique ID of the task to retrieve
            
        Returns:
            Optional[Dict]: The task details if found, None otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            task = self._tasks[task_id]
            return {
                "id": task["id"],
                "task_name": task["task_name"],
                "task_description": task["task_description"],
                "is_finished": task["is_finished"]
            }
        return None


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    """
    task_manager = TaskManager()
    
    print("\nWelcome to the Todo List Application!")
    
    while True:
        print("\nAvailable commands:")
        print("1. Add a new task")
        print("2. Remove a task")
        print("3. Search for tasks")
        print("4. Mark a task as completed")
        print("5. Show all tasks")
        print("6. Clear all tasks")
        print("0. Exit")
        
        choice = input("\nEnter your choice (0-6): ").strip()
        
        try:
            if choice == "1":
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = task_manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")
                
            elif choice == "2":
                task_id = int(input("Enter the ID of the task to remove: "))
                if task_manager.remove(task_id):
                    print("Task removed successfully!")
                else:
                    print("Task not found!")
                    
            elif choice == "3":
                term = input("Enter search term: ")
                matching_tasks = task_manager.search(term)
                
                if matching_tasks:
                    print("\nMatching tasks:")
                    for task in matching_tasks:
                        status = "Completed" if task["is_finished"] else "Pending"
                        print(f"ID: {task['id']} | Name: {task['task_name']} | Status: {status}")
                        print(f"Description: {task['task_description']}")
                        print("-" * 50)
                else:
                    print("No matching tasks found!")
                    
            elif choice == "4":
                task_id = int(input("Enter the ID of the task to mark as completed: "))
                if task_manager.finish(task_id):
                    print("Task marked as completed!")
                else:
                    print("Task not found!")
                    
            elif choice == "5":
                tasks = task_manager.get_all()
                
                if tasks:
                    print("\nAll Tasks:")
                    for task in tasks:
                        status = "Completed" if task["is_finished"] else "Pending"
                        print(f"ID: {task['id']} | Name: {task['task_name']} | Status: {status}")
                        print(f"Description: {task['task_description']}")
                        print("-" * 50)
                else:
                    print("No tasks found!")
                    
            elif choice == "6":
                confirm = input("Are you sure you want to remove all tasks? (yes/no): ").lower()
                if confirm in ["yes", "y"]:
                    task_manager.clear_all()
                    print("All tasks have been removed!")
                else:
                    print("Operation cancelled.")
                    
            elif choice == "0":
                print("Thank you for using the Todo List Application. Goodbye!")
                break
                
            else:
                print("Invalid choice. Please try again.")
                
        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
```

This implementation satisfies all the requirements:

1. **Functionality Requirements**:
   - Implements all required methods: add, remove, search, finish, get_all, and clear_all
   - Each method follows the specified interface
   - Task information is returned in the required format (id, task_name, task_description, is_finished)

2. **Implementation Requirements**:
   - Uses OOP principles with a TaskManager class
   - Validates inputs and raises appropriate errors
   - Stores tasks in an in-memory dictionary data structure
   - Optimizes lookups, insertions, and deletions using dictionary operations
   - Handles errors gracefully with try-except blocks

3. **Code Quality Requirements**:
   - Correctness: Functions produce expected output for various inputs
   - Performance: Uses efficient dictionary operations for O(1) lookups
   - Modularity: Code is structured logically with separate methods for each function
   - Security: Validates all inputs to protect against invalid or malicious inputs
   - Testability: Each method can be tested independently
   - Readability & Documentation: Uses docstrings, clear variable names, and meaningful comments

The code also includes a main function to demonstrate the functionality with a simple console interface.