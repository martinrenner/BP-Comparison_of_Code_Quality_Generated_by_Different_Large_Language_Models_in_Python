```python
class TaskManager:
    """
    A class to manage todo tasks with functionalities including add, remove, search, finish,
    get all tasks, and clear all tasks.
    """

    def __init__(self):
        """
        Initializes the TaskManager with an empty in-memory storage for tasks and a 
        counter for unique task IDs.
        """
        self.tasks = {}  # Dictionary to store tasks with key as task_id
        self.next_id = 1  # Unique task ID generator

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with the specified name and description.

        Args:
            task_name (str): Name of the task.
            task_description (str): Description of the task.

        Returns:
            int: The unique ID assigned to the new task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task identified by the given task_id.

        Args:
            task_id (int): The unique ID of the task to remove.

        Returns:
            bool: True if the task was successfully removed, False if the task does not exist.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks containing the given term in either the name or description.

        Args:
            task_term (str): The term to search for.

        Returns:
            list: A list of task dictionaries matching the search criteria.

        Raises:
            ValueError: If task_term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term = task_term.lower().strip()
        results = []
        for task in self.tasks.values():
            if term in task["task_name"].lower() or term in task["task_description"].lower():
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.

        Args:
            task_id (int): The unique ID of the task to mark as finished.

        Returns:
            bool: True if the task was successfully marked as finished, False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all stored tasks.

        Returns:
            list: A list containing all task dictionaries.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Clears all tasks from the manager.

        Returns:
            bool: True after successfully clearing all tasks.
        """
        self.tasks.clear()
        return True


def main():
    """
    Main function to run the console-based todo list application.
    Provides a text-based menu to interact with the TaskManager.
    """
    task_manager = TaskManager()

    def print_menu():
        """
        Prints the menu of available commands.
        """
        print("\nTodo List App Commands:")
        print("1. add       - Add a new task")
        print("2. remove    - Remove a task by ID")
        print("3. search    - Search tasks by term")
        print("4. finish    - Mark a task as finished")
        print("5. get_all   - List all tasks")
        print("6. clear_all - Clear all tasks")
        print("7. exit      - Exit the application")

    print("Welcome to the Todo List App!")
    while True:
        print_menu()
        command = input("\nEnter a command: ").strip().lower()

        try:
            if command == "add":
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = task_manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")

            elif command == "remove":
                task_id_input = input("Enter task ID to remove: ").strip()
                if not task_id_input.isdigit():
                    print("Invalid task ID. It must be a positive integer.")
                    continue
                task_id = int(task_id_input)
                if task_manager.remove(task_id):
                    print("Task removed successfully.")
                else:
                    print("Task not found.")

            elif command == "search":
                term = input("Enter search term: ").strip()
                results = task_manager.search(term)
                if results:
                    print("Search results:")
                    header = f"{'ID':<5} {'Name':<20} {'Description':<40} {'Finished'}"
                    print(header)
                    print("-" * len(header))
                    for task in results:
                        print(f"{task['id']:<5} {task['task_name']:<20} {task['task_description']:<40} {task['is_finished']}")
                else:
                    print("No tasks match the search criteria.")

            elif command == "finish":
                task_id_input = input("Enter task ID to mark as finished: ").strip()
                if not task_id_input.isdigit():
                    print("Invalid task ID. It must be a positive integer.")
                    continue
                task_id = int(task_id_input)
                if task_manager.finish(task_id):
                    print("Task marked as finished.")
                else:
                    print("Task not found.")

            elif command == "get_all":
                tasks = task_manager.get_all()
                if tasks:
                    print("All tasks:")
                    header = f"{'ID':<5} {'Name':<20} {'Description':<40} {'Finished'}"
                    print(header)
                    print("-" * len(header))
                    for task in tasks:
                        print(f"{task['id']:<5} {task['task_name']:<20} {task['task_description']:<40} {task['is_finished']}")
                else:
                    print("No tasks available.")

            elif command == "clear_all":
                confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirm == "yes":
                    task_manager.clear_all()
                    print("All tasks cleared.")
                else:
                    print("Operation canceled.")

            elif command == "exit":
                print("Exiting the Todo List App. Goodbye!")
                break

            else:
                print("Unknown command. Please try again.")

        except ValueError as ve:
            print(f"Error: {ve}")
        except Exception as ex:
            print(f"An unexpected error occurred: {ex}")


if __name__ == "__main__":
    main()
```