# Python Todo List Application

I've created a console-based todo list application that meets the ISO/IEC 25010 requirements. This implementation focuses on functionality, reliability, efficiency, security, and maintainability.

```python
class TaskManager:
    """
    Task Manager class implementing a todo list application.
    
    This class provides a complete interface for managing tasks including
    adding, removing, searching, and marking tasks as complete.
    """
    
    def __init__(self):
        """
        Initialize a new TaskManager with an empty tasks dictionary and task ID counter.
        """
        self._tasks = {}  # Dictionary to store tasks with ID as key
        self._next_id = 1  # Counter for assigning unique IDs
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task
            
        Returns:
            int: The unique ID assigned to the new task
            
        Raises:
            ValueError: If task_name is empty
        """
        # Input validation
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        
        if not isinstance(task_description, str):
            raise ValueError("Task description must be a string")
            
        # Create new task with a unique ID
        task_id = self._next_id
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False
        }
        
        # Increment the ID counter for next task
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The unique ID of the task to remove
            
        Returns:
            bool: True if task was removed successfully, False otherwise
            
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
        
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Remove task if it exists
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
            
        return False
    
    def search(self, task_term: str) -> list[dict]:
        """
        Search for tasks containing the search term in name or description.
        
        Args:
            task_term: The search term to look for
            
        Returns:
            list[dict]: List of tasks matching the search criteria
            
        Raises:
            TypeError: If task_term is not a string
        """
        # Input validation
        if not isinstance(task_term, str):
            raise TypeError("Search term must be a string")
            
        # Convert search term to lowercase for case-insensitive search
        search_term = task_term.lower()
        
        # Find matching tasks
        results = []
        for task in self._tasks.values():
            if (search_term in task['task_name'].lower() or 
                search_term in task['task_description'].lower()):
                results.append(task.copy())
                
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id: The unique ID of the task to mark as completed
            
        Returns:
            bool: True if task was marked as completed successfully, False otherwise
            
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
        
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Mark task as finished if it exists
        if task_id in self._tasks:
            # If task is already finished, return False to indicate no change
            if self._tasks[task_id]['is_finished']:
                return False
            
            self._tasks[task_id]['is_finished'] = True
            return True
            
        return False
    
    def get_all(self) -> list[dict]:
        """
        Get all tasks in the task manager.
        
        Returns:
            list[dict]: List containing all tasks with their details
        """
        # Return a copy of all tasks to prevent external modification
        return list(task.copy() for task in self._tasks.values())
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the task manager.
        
        Returns:
            bool: True if tasks were cleared successfully
        """
        self._tasks = {}
        # Reset the ID counter
        self._next_id = 1
        return True


# Example usage
if __name__ == "__main__":
    def display_tasks(tasks):
        """Helper function to display tasks in a readable format"""
        if not tasks:
            print("No tasks found.")
            return
            
        print("\nID | Name | Description | Status")
        print("-" * 50)
        for task in tasks:
            status = "Completed" if task['is_finished'] else "Pending"
            print(f"{task['id']} | {task['task_name']} | {task['task_description']} | {status}")
        print()
    
    # Create a new task manager
    manager = TaskManager()
    
    # Add some tasks
    task1_id = manager.add("Complete project", "Finish the Python todo list project")
    task2_id = manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
    task3_id = manager.add("Exercise", "30 minutes of cardio")
    
    print("All tasks:")
    display_tasks(manager.get_all())
    
    # Mark a task as completed
    manager.finish(task1_id)
    
    # Search for tasks
    print("Search results for 'project':")
    display_tasks(manager.search("project"))
    
    # Remove a task
    manager.remove(task2_id)
    
    print("After removing task 2:")
    display_tasks(manager.get_all())
    
    # Clear all tasks
    manager.clear_all()
    
    print("After clearing all tasks:")
    display_tasks(manager.get_all())
```

## Design Decisions

1. **Data Structure**: Used a dictionary with task IDs as keys for O(1) lookups, insertions, and deletions.

2. **Input Validation**: Implemented comprehensive validation with appropriate error types and messages.

3. **Security**: Protected against invalid inputs like negative IDs, empty task names, and incorrect data types.

4. **Immutability**: Returned copies of task dictionaries to prevent accidental modifications to the internal state.

5. **Defensive Programming**: Added checks for task existence before operations and type validation.

6. **Clear Interface**: Followed the specified interface with consistent return types.

7. **Documentation**: Added detailed docstrings explaining parameters, return values, and error conditions.

The implementation is thread-safe for single-threading environments and could be extended with synchronization primitives for multi-threading if needed.