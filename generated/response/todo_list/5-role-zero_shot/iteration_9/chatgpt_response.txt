```python
#!/usr/bin/env python3
"""
Console-based To-Do List Application using the TaskManager class.
This application implements functions to add, remove, search, finish, list, and clear tasks,
following the ISO/IEC 25010 standard for quality and maintainability.
"""

class TaskManager:
    """
    TaskManager provides in-memory management of tasks with functionality for adding,
    removing, searching, finishing, listing, and clearing tasks.
    Each task is represented as a dictionary with keys: id, task_name, task_description, is_finished.
    """

    def __init__(self):
        """
        Initialize the TaskManager with an empty task store and next available task ID.
        """
        self._tasks = {}     # Dictionary to hold tasks {task_id: task_dict}
        self._next_id = 1    # Auto-incrementing task ID

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task with name and description.

        Args:
            task_name (str): Name of the task. Must be a non-empty string.
            task_description (str): Description of the task. Must be a non-empty string.

        Returns:
            int: The unique ID assigned to the new task.

        Raises:
            ValueError: If task_name or task_description is empty.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self._next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.

        Args:
            task_id (int): The unique ID of the task to remove.

        Returns:
            bool: True if the task exists and was removed, otherwise False.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Search for tasks by a term contained in their name or description.
        The search is case-insensitive.

        Args:
            task_term (str): The term to search for. Must be non-empty.

        Returns:
            list: A list of tasks (as dictionaries) matching the search criteria.

        Raises:
            ValueError: If task_term is empty or only whitespace.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.lower()
        results = [
            task for task in self._tasks.values()
            if term_lower in task["task_name"].lower() or term_lower in task["task_description"].lower()
        ]
        return results

    def finish(self, task_id: int) -> bool:
        """
        Mark the task identified by task_id as finished.

        Args:
            task_id (int): Unique ID of the task.

        Returns:
            bool: True if the task exists and was updated, otherwise False.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self._tasks:
            self._tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieve a list of all tasks.

        Returns:
            list: List of all task dictionaries, sorted by their ID.
        """
        return [self._tasks[tid] for tid in sorted(self._tasks.keys())]

    def clear_all(self) -> bool:
        """
        Remove all tasks from the manager.

        Returns:
            bool: True after successfully clearing all tasks.
        """
        self._tasks.clear()
        return True


def print_tasks(task_list: list) -> None:
    """
    Helper function to print tasks in a user-friendly format.

    Args:
        task_list (list): List of task dictionaries.
    """
    if not task_list:
        print("No tasks available.")
    else:
        for task in task_list:
            status = "Finished" if task["is_finished"] else "Pending"
            print(f"ID: {task['id']} | Name: {task['task_name']} | Description: {task['task_description']} | Status: {status}")


def main():
    """
    Main function to run the console-based to-do list application.
    Provides a menu-driven interface for interacting with the TaskManager.
    """
    task_manager = TaskManager()
    print("Welcome to the To-Do List Application!\n")

    while True:
        print("\nSelect an option:")
        print("1. Add task")
        print("2. Remove task")
        print("3. Search tasks")
        print("4. Mark task as finished")
        print("5. List all tasks")
        print("6. Clear all tasks")
        print("7. Exit")

        choice = input("Enter your choice (1-7): ").strip()

        if choice == "1":
            # Add task
            task_name = input("Enter task name: ").strip()
            task_description = input("Enter task description: ").strip()
            try:
                task_id = task_manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "2":
            # Remove task
            try:
                task_id = int(input("Enter task ID to remove: ").strip())
                if task_manager.remove(task_id):
                    print(f"Task with ID {task_id} was removed.")
                else:
                    print(f"Task with ID {task_id} does not exist.")
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "3":
            # Search tasks
            search_term = input("Enter search term: ").strip()
            try:
                results = task_manager.search(search_term)
                if results:
                    print("Matching tasks:")
                    print_tasks(results)
                else:
                    print("No tasks match your search criteria.")
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "4":
            # Mark task as finished
            try:
                task_id = int(input("Enter task ID to mark as finished: ").strip())
                if task_manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"Task with ID {task_id} not found.")
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "5":
            # List all tasks
            tasks = task_manager.get_all()
            print_tasks(tasks)

        elif choice == "6":
            # Clear all tasks
            confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
            if confirm == "yes":
                task_manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Clear all tasks cancelled.")

        elif choice == "7":
            # Exit the application
            print("Exiting the application. Goodbye!")
            break

        else:
            print("Invalid choice. Please select a valid option (1-7).")


if __name__ == "__main__":
    main()
```