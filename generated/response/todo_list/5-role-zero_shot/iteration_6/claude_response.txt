# Python To-Do List Application

I'll implement a console-based to-do list application that meets all the specified requirements with a focus on quality, maintainability, and efficiency.

```python
from typing import List, Dict, Optional, Union
from datetime import datetime
import uuid


class TaskManager:
    """
    TaskManager class responsible for managing tasks in a to-do list application.
    
    This class provides functionality to add, remove, search, complete tasks,
    retrieve all tasks, and clear the task list.
    """
    
    def __init__(self):
        """Initialize a new TaskManager with an empty task dictionary."""
        # Using a dictionary with task_id as key for O(1) lookups by ID
        self._tasks: Dict[int, Dict] = {}
        # Track the next available ID for new tasks
        self._next_id: int = 1
        
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name: The name of the task
            task_description: The description of the task
            
        Returns:
            int: The unique ID of the created task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty")
            
        # Create task
        task_id = self._next_id
        self._next_id += 1
        
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False,
            'created_at': datetime.now()
        }
        
        return task_id
        
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The unique identifier of the task to remove
            
        Returns:
            bool: True if task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is negative
        """
        # Validate task_id
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check if task exists and remove it
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
        
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term: The search term to look for in task names and descriptions
            
        Returns:
            List[Dict]: A list of matching tasks
            
        Raises:
            ValueError: If task_term is empty
        """
        # Validate search term
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty")
            
        result = []
        search_term_lower = task_term.lower()
        
        # Search in name and description
        for task in self._tasks.values():
            if (search_term_lower in task['task_name'].lower() or 
                search_term_lower in task['task_description'].lower()):
                result.append(self._get_task_dict(task))
                
        return result
        
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id: The unique identifier of the task to mark as completed
            
        Returns:
            bool: True if task was marked as completed, False if task doesn't exist
            
        Raises:
            ValueError: If task_id is negative
        """
        # Validate task_id
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check if task exists and mark it as finished
        if task_id in self._tasks:
            self._tasks[task_id]['is_finished'] = True
            return True
        return False
        
    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks.
        
        Returns:
            List[Dict]: A list of all tasks
        """
        return [self._get_task_dict(task) for task in self._tasks.values()]
        
    def clear_all(self) -> bool:
        """
        Delete all tasks.
        
        Returns:
            bool: True if operation was successful
        """
        self._tasks.clear()
        return True
        
    def _get_task_dict(self, task: Dict) -> Dict:
        """
        Helper method to return a task in the required format.
        
        Args:
            task: The task dictionary from internal storage
            
        Returns:
            Dict: A dictionary with task details in the specified format
        """
        return {
            'id': task['id'],
            'task_name': task['task_name'],
            'task_description': task['task_description'],
            'is_finished': task['is_finished']
        }


def main():
    """Example usage of the TaskManager class."""
    task_manager = TaskManager()
    
    # Add some tasks
    task1_id = task_manager.add("Complete project", "Finish the Python to-do list project")
    task2_id = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
    
    # Display all tasks
    print("All tasks:")
    for task in task_manager.get_all():
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Finished: {task['is_finished']}")
    
    # Mark a task as completed
    task_manager.finish(task1_id)
    
    # Search for tasks
    print("\nSearch results:")
    for task in task_manager.search("project"):
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Description: {task['task_description']}, "
              f"Finished: {task['is_finished']}")
    
    # Remove a task
    task_manager.remove(task2_id)
    
    # Display remaining tasks
    print("\nRemaining tasks:")
    for task in task_manager.get_all():
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Finished: {task['is_finished']}")


if __name__ == "__main__":
    main()
```

## Design Decisions and Quality Considerations

1. **Data Structure**: 
   - Used a dictionary with task IDs as keys for O(1) lookup, insertion, and deletion operations.
   - Maintained a counter for generating unique IDs.

2. **Error Handling**:
   - Implemented input validation with specific error messages.
   - Used ValueError for invalid inputs (empty strings, negative IDs).
   - Returns boolean status for operations like remove and finish to indicate success.

3. **Efficiency**:
   - O(1) for add, remove, finish operations.
   - O(n) for search and get_all operations (necessary to scan all tasks).
   - Used a helper method to format task output consistently.

4. **OOP Principles**:
   - Encapsulated task data and operations in the TaskManager class.
   - Private method (_get_task_dict) to standardize the task output format.
   - Clear separation between interface and implementation.

5. **Code Quality**:
   - Comprehensive docstrings with parameter and return type descriptions.
   - Type hints for better code readability and IDE support.
   - Clean, consistent formatting.
   - Meaningful variable names and well-structured code.

6. **Maintainability**:
   - Modular design with clear separation of concerns.
   - Each method has a single responsibility.
   - Easy to extend with additional features (like task categories, due dates).

7. **Example Usage**:
   - Included a main function demonstrating basic operations.
   - Shows typical workflow of creating, completing, and searching tasks.

The implementation adheres to the ISO/IEC 25010 standard with attention to functionality, efficiency, maintainability, and usability.