```python
class TaskManager:
    """
    Manages a to-do list with functionalities to add, remove, search,
    finish, retrieve, and clear tasks.  It adheres to high standards of
    code quality, efficiency, and maintainability, in line with ISO/IEC 25010.
    """

    def __init__(self):
        """
        Initializes the TaskManager with an empty task list and a unique ID counter.
        """
        self.tasks = {}  # Use a dictionary for efficient lookups by ID
        self.next_id = 1  # Start with ID 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the to-do list.

        Args:
            task_name: The name of the task (must not be empty).
            task_description: A description of the task.

        Returns:
            The unique ID assigned to the newly added task.

        Raises:
            ValueError: If the task_name is empty.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "name": task_name,
            "description": task_description,
            "is_finished": False,
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.

        Args:
            task_id: The ID of the task to be removed.

        Returns:
            True if the task was successfully removed, False otherwise.

        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """

        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        else:
            return False  # Or raise KeyError("Task with specified ID not found")

    def search(self, task_term: str) -> list[dict]:
        """
        Searches for tasks by name or description.

        Args:
            task_term: The search term (can be a partial name or description).

        Returns:
            A list of dictionaries, where each dictionary represents a matching task.
            Returns an empty list if no tasks match.

        Raises:
            ValueError: If the search term is empty.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        results = []
        for task in self.tasks.values():
            if task_term.lower() in task["name"].lower() or task_term.lower() in task[
                "description"
            ].lower():
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.

        Args:
            task_id: The ID of the task to mark as finished.

        Returns:
            True if the task was successfully marked as finished, False otherwise.

        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        else:
            return False  # Or raise KeyError

    def get_all(self) -> list[dict]:
        """
        Retrieves all tasks in the to-do list.

        Returns:
            A list of dictionaries, where each dictionary represents a task.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Deletes all tasks from the to-do list.

        Returns:
            Always returns True, indicating that the list has been cleared.
        """
        self.tasks.clear()
        self.next_id = 1
        return True


# Example Usage (and basic testing)
if __name__ == "__main__":
    manager = TaskManager()

    # Add tasks
    id1 = manager.add("Grocery Shopping", "Buy milk, eggs, and bread")
    id2 = manager.add("Book Doctor Appointment", "For annual checkup")
    print(f"Added task IDs: {id1}, {id2}")

    # Get all tasks
    all_tasks = manager.get_all()
    print(f"All tasks (before finishing): {all_tasks}")

    # Finish a task
    manager.finish(id1)
    all_tasks = manager.get_all()
    print(f"All tasks (after finishing id1): {all_tasks}")

    # Search for tasks
    search_results = manager.search("doctor")
    print(f"Search results for 'doctor': {search_results}")
    search_results = manager.search("nonexistent")
    print(f"Search results for 'nonexistent': {search_results}")


    # Remove a task
    removed = manager.remove(id2)
    print(f"Removed task id2: {removed}")
    all_tasks = manager.get_all()
    print(f"All tasks (after removing id2): {all_tasks}")

    # Remove a non-existent task and check error handling
    removed = manager.remove(999)
    print(f"Removed non-existent task: {removed}")

    # Test value errors and type errors
    try:
        manager.add("", "This should fail")
    except ValueError as e:
        print(f"Caught expected ValueError: {e}")

    try:
        manager.remove(-1)
    except ValueError as e:
        print(f"Caught expected ValueError: {e}")

    try:
        manager.search("")
    except ValueError as e:
        print(f"Caught expected ValueError: {e}")

    try:
        manager.finish(3.14)
    except TypeError as e:
        print(f"Caught expected TypeError: {e}")

    # Clear all tasks
    manager.clear_all()
    print(f"All tasks after clear_all: {manager.get_all()}")
```
