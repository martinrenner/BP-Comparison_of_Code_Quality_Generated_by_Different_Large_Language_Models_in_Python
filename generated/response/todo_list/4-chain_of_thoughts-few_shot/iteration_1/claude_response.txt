I'll create a high-quality Python implementation of a console-based todo list application that meets the ISO/IEC 25010 requirements. I'll follow the provided interface and structure the code according to best practices.

```python
from typing import List, Dict, Optional, Union
import uuid
from datetime import datetime


class TaskManager:
    """
    A task management system that allows creating, retrieving, updating and deleting tasks.
    
    This class implements a complete task management interface following CRUD operations
    with additional functionality for searching and task completion tracking.
    """
    
    def __init__(self):
        """Initialize the TaskManager with an empty tasks dictionary."""
        self._tasks: Dict[int, Dict] = {}
        self._next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): A detailed description of the task.
        
        Returns:
            int: The unique ID of the newly created task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Validate inputs
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string")
        
        # Create the task with a unique ID
        task_id = self._next_id
        self._next_id += 1
        
        # Store task with metadata
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False,
            'created_at': datetime.now(),
            'updated_at': datetime.now()
        }
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id (int): The unique identifier of the task to remove.
        
        Returns:
            bool: True if the task was successfully removed, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term (str): The search term to look for in task names and descriptions.
        
        Returns:
            list[dict]: A list of tasks that match the search criteria.
            
        Raises:
            ValueError: If task_term is empty.
        """
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
        
        results = []
        task_term = task_term.lower()
        
        for task in self._tasks.values():
            if (task_term in task['task_name'].lower() or 
                task_term in task['task_description'].lower()):
                # Return only the required fields
                results.append({
                    'id': task['id'],
                    'task_name': task['task_name'],
                    'task_description': task['task_description'],
                    'is_finished': task['is_finished']
                })
        
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique identifier of the task to mark as completed.
        
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            # Only update if not already finished
            if not self._tasks[task_id]['is_finished']:
                self._tasks[task_id]['is_finished'] = True
                self._tasks[task_id]['updated_at'] = datetime.now()
            return True
        return False
    
    def get_all(self) -> List[Dict]:
        """
        Get all tasks in the task manager.
        
        Returns:
            list[dict]: A list of all tasks with their details.
        """
        results = []
        for task in self._tasks.values():
            # Return only the required fields
            results.append({
                'id': task['id'],
                'task_name': task['task_name'],
                'task_description': task['task_description'],
                'is_finished': task['is_finished']
            })
        
        return results
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the task manager.
        
        Returns:
            bool: True if all tasks were successfully removed.
        """
        self._tasks.clear()
        return True
    
    def get_task(self, task_id: int) -> Optional[Dict]:
        """
        Get a specific task by ID.
        
        Args:
            task_id (int): The unique identifier of the task to retrieve.
        
        Returns:
            dict or None: The task details if found, None otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            task = self._tasks[task_id]
            return {
                'id': task['id'],
                'task_name': task['task_name'],
                'task_description': task['task_description'],
                'is_finished': task['is_finished']
            }
        return None


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    """
    task_manager = TaskManager()
    
    # Demo usage
    print("=== Todo List Application ===")
    
    # Adding tasks
    try:
        task1_id = task_manager.add("Complete assignment", "Finish the Python assignment by Friday")
        task2_id = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
        task3_id = task_manager.add("Schedule meeting", "Team sync-up for the new project")
        
        print(f"Added 3 tasks with IDs: {task1_id}, {task2_id}, {task3_id}")
    except ValueError as e:
        print(f"Error adding tasks: {e}")
    
    # Displaying all tasks
    print("\nAll Tasks:")
    for task in task_manager.get_all():
        status = "✓" if task['is_finished'] else "□"
        print(f"[{status}] {task['id']}: {task['task_name']} - {task['task_description']}")
    
    # Marking a task as complete
    try:
        if task_manager.finish(task1_id):
            print(f"\nTask {task1_id} marked as completed")
        else:
            print(f"\nFailed to mark task {task1_id} as completed")
    except ValueError as e:
        print(f"Error finishing task: {e}")
    
    # Searching for tasks
    try:
        search_results = task_manager.search("meeting")
        print("\nSearch results for 'meeting':")
        for task in search_results:
            status = "✓" if task['is_finished'] else "□"
            print(f"[{status}] {task['id']}: {task['task_name']} - {task['task_description']}")
    except ValueError as e:
        print(f"Error searching tasks: {e}")
    
    # Removing a task
    try:
        if task_manager.remove(task2_id):
            print(f"\nTask {task2_id} removed successfully")
        else:
            print(f"\nFailed to remove task {task2_id}")
    except ValueError as e:
        print(f"Error removing task: {e}")
    
    # Displaying remaining tasks
    print("\nRemaining Tasks:")
    for task in task_manager.get_all():
        status = "✓" if task['is_finished'] else "□"
        print(f"[{status}] {task['id']}: {task['task_name']} - {task['task_description']}")
    
    # Clearing all tasks
    if task_manager.clear_all():
        print("\nAll tasks cleared successfully")
    
    # Verify tasks are cleared
    if not task_manager.get_all():
        print("No tasks remaining in the system")


if __name__ == "__main__":
    main()
```

This implementation includes:

1. **Functionality Requirements**: All required functions (add, remove, search, finish, get_all, clear_all) are implemented as specified.

2. **OOP Implementation**: The code uses a `TaskManager` class that encapsulates all the task management functionality.

3. **Error Handling**: The code validates inputs and raises appropriate exceptions with meaningful error messages.

4. **Data Structure**: Tasks are stored in an in-memory dictionary, which provides efficient lookups, insertions, and deletions.

5. **Security**: The code protects against invalid inputs by performing thorough input validation.

6. **Documentation**: The code includes comprehensive docstrings for the class and all methods, following best practices.

7. **Code Quality**: The implementation follows best practices for readability, maintainability, and efficiency.

8. **Testability**: The methods are designed to be easily testable with clear inputs and outputs.

9. **Demo Function**: The `main()` function demonstrates how to use the TaskManager with example operations.

10. **Extensibility**: The implementation includes additional metadata like creation and update timestamps, which could be useful for future enhancements.