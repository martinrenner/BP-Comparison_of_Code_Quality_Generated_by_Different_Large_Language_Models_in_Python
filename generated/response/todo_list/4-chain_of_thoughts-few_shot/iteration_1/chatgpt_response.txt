```python
class TaskManager:
    """
    TaskManager handles a console-based todo list with operations including adding, removing,
    searching, finishing tasks, retrieving all tasks, and clearing all tasks.
    
    Tasks are stored in an in-memory dictionary for efficient lookup, insertion, and deletion.
    Each task is represented as a dictionary with the following keys:
      - id (int): Unique task identifier.
      - task_name (str): Name of the task.
      - task_description (str): Description of the task.
      - is_finished (bool): Status flag indicating if the task is completed.
    """

    def __init__(self) -> None:
        """
        Initializes the TaskManager with an empty collection of tasks and sets the next task ID.
        """
        self.tasks = {}  # Dictionary to store tasks, keyed by task ID.
        self.next_id = 1  # Auto-increment task ID.

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the task manager.

        Args:
            task_name (str): The name of the task; must not be empty.
            task_description (str): The description of the task; must not be empty.

        Returns:
            int: The unique ID assigned to the newly added task.

        Raises:
            ValueError: If the task name or task description is empty.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.

        Args:
            task_id (int): Unique identifier of the task to be removed.

        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.

        Raises:
            TypeError: If the task_id is not an integer.
            ValueError: If the task_id is not a positive integer.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
            return False

        del self.tasks[task_id]
        return True

    def search(self, task_term: str) -> list:
        """
        Searches for tasks whose name or description contains the given search term.

        Args:
            task_term (str): The term to search for; must not be empty.

        Returns:
            list: A list of task dictionaries matching the search term.

        Raises:
            ValueError: If the search term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        task_term_lower = task_term.lower()
        results = []
        for task in self.tasks.values():
            if (task_term_lower in task["task_name"].lower() or
                    task_term_lower in task["task_description"].lower()):
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed based on its unique ID.

        Args:
            task_id (int): Unique identifier of the task to mark as finished.

        Returns:
            bool: True if the task was successfully marked as finished; False if the task does not exist.

        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
            return False

        self.tasks[task_id]["is_finished"] = True
        return True

    def get_all(self) -> list:
        """
        Retrieves all tasks in the manager.

        Returns:
            list: A list of all task dictionaries.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Deletes all tasks from the task manager.

        Returns:
            bool: True once all tasks have been successfully cleared.
        """
        self.tasks.clear()
        self.next_id = 1
        return True


def display_task(task: dict) -> None:
    """
    Displays a task in a formatted manner.

    Args:
        task (dict): A dictionary representing a task.
    """
    status = "Finished" if task["is_finished"] else "Pending"
    print(
        f"ID: {task['id']}, Name: {task['task_name']}, "
        f"Description: {task['task_description']}, Status: {status}"
    )


def main() -> None:
    """
    Main function to interact with the TaskManager via a console-based interface.
    Users can add, remove, search, finish, view all, or clear tasks.
    """
    task_manager = TaskManager()

    menu = (
        "\nConsole Todo List App\n"
        "-------------------------\n"
        "1. Add Task\n"
        "2. Remove Task\n"
        "3. Search Tasks\n"
        "4. Mark Task as Finished\n"
        "5. Get All Tasks\n"
        "6. Clear All Tasks\n"
        "7. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice (1-7): ").strip()

        try:
            if choice == "1":
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                new_id = task_manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {new_id}")

            elif choice == "2":
                task_id_str = input("Enter the task ID to remove: ").strip()
                if not task_id_str.isdigit():
                    print("Invalid input: Task ID must be a positive integer.")
                    continue
                task_id = int(task_id_str)
                if task_manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.")
                else:
                    print(f"Task with ID {task_id} not found.")

            elif choice == "3":
                search_term = input("Enter search term: ").strip()
                results = task_manager.search(search_term)
                if results:
                    print("Matching tasks:")
                    for task in results:
                        display_task(task)
                else:
                    print("No tasks match your search criteria.")

            elif choice == "4":
                task_id_str = input("Enter the task ID to mark as finished: ").strip()
                if not task_id_str.isdigit():
                    print("Invalid input: Task ID must be a positive integer.")
                    continue
                task_id = int(task_id_str)
                if task_manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"Task with ID {task_id} not found.")

            elif choice == "5":
                tasks = task_manager.get_all()
                if tasks:
                    print("All tasks:")
                    for task in tasks:
                        display_task(task)
                else:
                    print("No tasks available.")

            elif choice == "6":
                confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirm == "yes":
                    task_manager.clear_all()
                    print("All tasks have been cleared.")
                else:
                    print("Clear all operation canceled.")

            elif choice == "7":
                print("Exiting the Todo List App. Goodbye!")
                break

            else:
                print("Invalid option. Please choose a valid menu number (1-7).")

        except Exception as e:
            print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
```