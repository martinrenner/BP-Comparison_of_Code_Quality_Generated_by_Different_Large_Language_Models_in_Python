```python
class TaskManager:
    """
    Manages tasks for a console-based todo list application.

    Each task is stored as a dictionary in the following format:
        {
            'id': int,
            'task_name': str,
            'task_description': str,
            'is_finished': bool
        }
    """

    def __init__(self) -> None:
        """
        Initializes an empty TaskManager.
        """
        self.tasks = {}         # Dictionary to store tasks keyed by their unique IDs.
        self.next_id = 1        # Incremental ID counter for tasks.

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with a name and description.

        Args:
            task_name (str): The name of the task. Must be a non-empty string.
            task_description (str): The description of the task. Must be a non-empty string.

        Returns:
            int: The unique ID assigned to the newly added task.

        Raises:
            ValueError: If task_name or task_description is empty or not a string.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name must be a non-empty string.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description must be a non-empty string.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task based on its unique ID.

        Args:
            task_id (int): The unique ID of the task to remove. Must be a positive integer.

        Returns:
            bool: True if the task was removed; False if no task with the given ID exists.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks that contain the search term in their name or description.

        Args:
            task_term (str): A non-empty string to search for in tasks.

        Returns:
            list[dict]: A list of task dictionaries that match the search term.

        Raises:
            ValueError: If the search term is empty or not a string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term must be a non-empty string.")

        term = task_term.strip().lower()
        results = []
        for task in self.tasks.values():
            if term in task["task_name"].lower() or term in task["task_description"].lower():
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a given task as finished (completed).

        Args:
            task_id (int): The unique ID of the task to mark as completed.

        Returns:
            bool: True if the task was found and marked as finished; False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all tasks in the manager.

        Returns:
            list[dict]: A list of all tasks, sorted in ascending order by their IDs.
        """
        return sorted(self.tasks.values(), key=lambda task: task["id"])

    def clear_all(self) -> bool:
        """
        Clears all tasks from the manager and resets the task ID counter.

        Returns:
            bool: Always returns True to indicate that all tasks have been cleared.
        """
        self.tasks.clear()
        self.next_id = 1
        return True


def display_tasks(tasks: list) -> None:
    """
    Nicely prints a list of tasks.

    Args:
        tasks (list): List of task dictionaries to display.
    """
    if not tasks:
        print("No tasks available.")
        return

    print("\nTasks:")
    for task in tasks:
        status = "Finished" if task["is_finished"] else "Pending"
        print(f"ID: {task['id']} | Name: {task['task_name']} | "
              f"Description: {task['task_description']} | Status: {status}")


def main() -> None:
    """
    Runs a console-based todo list application.

    Available commands:
        add - Adds a new task.
        remove - Removes a task by ID.
        search - Searches for tasks by a search term.
        finish - Marks a task as finished.
        get_all - Lists all tasks.
        clear_all - Clears all tasks.
        exit - Exits the application.
    """
    manager = TaskManager()
    print("Welcome to the Todo List App!")
    print("Available commands: add, remove, search, finish, get_all, clear_all, exit")

    while True:
        command = input("\nEnter command: ").strip().lower()

        if command == "add":
            try:
                task_name = input("Enter task name: ")
                task_description = input("Enter task description: ")
                task_id = manager.add(task_name, task_description)
                print(f"Task added with ID: {task_id}")
            except ValueError as e:
                print(f"Error: {e}")

        elif command == "remove":
            try:
                id_input = input("Enter task ID to remove: ")
                task_id = int(id_input)
                if manager.remove(task_id):
                    print("Task removed successfully.")
                else:
                    print("Task not found.")
            except ValueError as e:
                print(f"Error: {e}")

        elif command == "search":
            try:
                term = input("Enter search term: ")
                found_tasks = manager.search(term)
                if found_tasks:
                    display_tasks(found_tasks)
                else:
                    print("No matching tasks found.")
            except ValueError as e:
                print(f"Error: {e}")

        elif command == "finish":
            try:
                id_input = input("Enter task ID to mark as finished: ")
                task_id = int(id_input)
                if manager.finish(task_id):
                    print("Task marked as finished.")
                else:
                    print("Task not found.")
            except ValueError as e:
                print(f"Error: {e}")

        elif command == "get_all":
            all_tasks = manager.get_all()
            display_tasks(all_tasks)

        elif command == "clear_all":
            confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
            if confirm == "yes":
                manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Clear operation cancelled.")

        elif command == "exit":
            print("Exiting the Todo List App. Goodbye!")
            break

        else:
            print("Invalid command. Please try again.")


if __name__ == "__main__":
    main()
```