```python
"""
Console-based Todo List Application

This application implements a todo list manager that supports adding, removing,
searching, and marking tasks as finished. The implementation adheres to ISO/IEC 25010
quality guidelines by ensuring functionality, efficiency, security against invalid 
inputs, modularity, testability, and ease of maintenance.

The TaskManager class provides methods to:
    - add(task_name: str, task_description: str) -> int
    - remove(task_id: int) -> bool
    - search(task_term: str) -> list[dict]
    - finish(task_id: int) -> bool
    - get_all() -> list[dict]
    - clear_all() -> bool

Each task is stored in-memory as a dictionary with the following keys:
    id, task_name, task_description, is_finished

Usage:
    Run this script and follow the on-screen menu to interact with the todo list.
"""

class TaskManager:
    """
    Manages tasks for the Todo List Application.

    Attributes:
        tasks (dict): Stores tasks with task_id as key and task details as value.
        next_id (int): Unique identifier for the next task to be added.
    """

    def __init__(self):
        """Initialize TaskManager with empty task storage and starting task ID of 1."""
        self.tasks = {}  # In-memory storage for tasks: {task_id: task_dict}
        self.next_id = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task with the given name and description.

        Args:
            task_name (str): The name of the task.
            task_description (str): A description of the task.

        Returns:
            int: The unique ID of the newly added task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not task_name or task_name.strip() == "":
            raise ValueError("Task name cannot be empty.")
        if not task_description or task_description.strip() == "":
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its unique ID.

        Args:
            task_id (int): The unique identifier of the task to remove.

        Returns:
            bool: True if the task was found and removed, False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Search tasks by name or description that contain the search term.

        Args:
            task_term (str): The term to search for in task names and descriptions.

        Returns:
            list[dict]: A list of tasks that match the search term.
            
        Raises:
            ValueError: If the search term is an empty string.
        """
        if not task_term or task_term.strip() == "":
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.lower()
        matching_tasks = [
            task for task in self.tasks.values()
            if term_lower in task["task_name"].lower() or term_lower in task["task_description"].lower()
        ]
        return matching_tasks

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.

        Args:
            task_id (int): The unique identifier of the task to mark as finished.

        Returns:
            bool: True if the task was found and marked finished, False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieve all tasks.

        Returns:
            list[dict]: A list containing all tasks with details.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Clear all tasks from the todo list.

        Returns:
            bool: True after successfully clearing all tasks.
        """
        self.tasks.clear()
        return True


def main():
    """
    Main loop to interact with the Todo List Application via the console.

    Available commands:
        add       - Add a new task.
        remove    - Remove a task by its ID.
        search    - Search tasks by a term in their name or description.
        finish    - Mark a task as finished.
        get_all   - Display all tasks.
        clear_all - Delete all tasks.
        exit      - Exit the application.
    """
    manager = TaskManager()
    print("Welcome to the Console-based Todo List Application!")
    print("Available commands: add, remove, search, finish, get_all, clear_all, exit")
    
    while True:
        command = input("\nEnter command: ").strip().lower()
        
        if command == "exit":
            print("Exiting the application. Goodbye!")
            break

        elif command == "add":
            try:
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                task_id = manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as ve:
                print("Error:", ve)

        elif command == "remove":
            try:
                id_str = input("Enter task ID to remove: ").strip()
                if not id_str.isdigit():
                    raise ValueError("Task ID must be a positive integer.")
                task_id = int(id_str)
                if manager.remove(task_id):
                    print(f"Task {task_id} removed successfully.")
                else:
                    print(f"Task with ID {task_id} does not exist.")
            except ValueError as ve:
                print("Error:", ve)

        elif command == "search":
            try:
                term = input("Enter search term: ").strip()
                results = manager.search(term)
                if results:
                    print("Matching Tasks:")
                    for task in results:
                        # Displaying task details as a tuple
                        print((task["id"], task["task_name"], task["task_description"], task["is_finished"]))
                else:
                    print("No tasks found matching the search term.")
            except ValueError as ve:
                print("Error:", ve)

        elif command == "finish":
            try:
                id_str = input("Enter task ID to mark as finished: ").strip()
                if not id_str.isdigit():
                    raise ValueError("Task ID must be a positive integer.")
                task_id = int(id_str)
                if manager.finish(task_id):
                    print(f"Task {task_id} marked as finished.")
                else:
                    print(f"Task with ID {task_id} does not exist.")
            except ValueError as ve:
                print("Error:", ve)

        elif command == "get_all":
            tasks = manager.get_all()
            if tasks:
                print("All Tasks:")
                for task in tasks:
                    print((task["id"], task["task_name"], task["task_description"], task["is_finished"]))
            else:
                print("No tasks available.")

        elif command == "clear_all":
            confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
            if confirm == "yes":
                manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Operation cancelled.")

        else:
            print("Invalid command. Please try again.")
            print("Available commands: add, remove, search, finish, get_all, clear_all, exit")


if __name__ == "__main__":
    main()
```