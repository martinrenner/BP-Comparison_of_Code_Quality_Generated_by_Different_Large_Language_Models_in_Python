# Todo List Application

I'll create a console-based Todo list application that meets the requirements of ISO/IEC 25010 using Object-Oriented Programming.

```python
from typing import List, Dict, Optional, Union
from datetime import datetime
import uuid


class TaskManager:
    """
    A task management system that allows users to create, manage, and track tasks.
    
    This implementation follows ISO/IEC 25010 requirements for functionality,
    reliability, performance efficiency, usability, and maintainability.
    """

    def __init__(self):
        """Initialize an empty task manager with an in-memory data structure."""
        # Using a dictionary for O(1) lookups by task ID
        self._tasks: Dict[int, Dict] = {}
        # Track the next available ID
        self._next_id: int = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): A detailed description of the task.
            
        Returns:
            int: The unique identifier for the newly added task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Input validation
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty")
            
        # Sanitize inputs
        task_name = task_name.strip()
        task_description = task_description.strip()
        
        # Create task with unique ID
        task_id = self._next_id
        self._next_id += 1
        
        # Store the task with all required information
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False,
            'created_at': datetime.now(),
            'updated_at': datetime.now()
        }
        
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its unique identifier.
        
        Args:
            task_id (int): The unique identifier of the task to remove.
            
        Returns:
            bool: True if the task was successfully removed, False otherwise.
            
        Raises:
            ValueError: If task_id is negative.
            KeyError: If no task with the given task_id exists.
        """
        # Input validation
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check if task exists
        if task_id not in self._tasks:
            raise KeyError(f"No task found with ID: {task_id}")
            
        # Remove the task
        del self._tasks[task_id]
        return True

    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term (str): The term to search for in task names or descriptions.
            
        Returns:
            list[dict]: A list of tasks matching the search term.
            
        Raises:
            ValueError: If task_term is empty.
        """
        # Input validation
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty")
            
        task_term = task_term.lower().strip()
        result = []
        
        # Search in both name and description
        for task in self._tasks.values():
            if (task_term in task['task_name'].lower() or 
                task_term in task['task_description'].lower()):
                # Return task in the required format
                result.append(self._format_task_output(task))
                
        return result

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique identifier of the task to mark as completed.
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
            
        Raises:
            ValueError: If task_id is negative.
            KeyError: If no task with the given task_id exists.
        """
        # Input validation
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check if task exists
        if task_id not in self._tasks:
            raise KeyError(f"No task found with ID: {task_id}")
            
        # Only update if not already finished
        if not self._tasks[task_id]['is_finished']:
            self._tasks[task_id]['is_finished'] = True
            self._tasks[task_id]['updated_at'] = datetime.now()
            return True
            
        # Task was already finished
        return False

    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks.
        
        Returns:
            list[dict]: A list of all tasks.
        """
        return [self._format_task_output(task) for task in self._tasks.values()]

    def clear_all(self) -> bool:
        """
        Remove all tasks from the task manager.
        
        Returns:
            bool: True if all tasks were successfully removed.
        """
        self._tasks.clear()
        return True
        
    def _format_task_output(self, task: Dict) -> Dict:
        """
        Format a task according to the required output format.
        
        Args:
            task (dict): The task to format.
            
        Returns:
            dict: The formatted task containing only required fields.
        """
        return {
            'id': task['id'],
            'task_name': task['task_name'],
            'task_description': task['task_description'],
            'is_finished': task['is_finished']
        }


def main():
    """Main function to demonstrate the TaskManager functionality."""
    task_manager = TaskManager()
    
    # Demo usage
    try:
        # Add tasks
        task1_id = task_manager.add("Complete project", "Finish the Python project by Friday")
        task2_id = task_manager.add("Buy groceries", "Get milk, eggs, and bread")
        task3_id = task_manager.add("Call mom", "Don't forget to call mom for her birthday")
        
        print("All tasks after adding:")
        for task in task_manager.get_all():
            print(task)
            
        # Search for tasks
        print("\nSearch results for 'project':")
        for task in task_manager.search("project"):
            print(task)
            
        # Finish a task
        task_manager.finish(task1_id)
        print("\nAfter marking task as completed:")
        for task in task_manager.get_all():
            if task['id'] == task1_id:
                print(task)
                
        # Remove a task
        task_manager.remove(task2_id)
        print("\nAll tasks after removing one:")
        for task in task_manager.get_all():
            print(task)
            
        # Clear all tasks
        task_manager.clear_all()
        print("\nAll tasks after clearing:")
        print(task_manager.get_all())
        
    except (ValueError, KeyError) as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
```

## Key Features of the Implementation:

1. **Object-Oriented Design**: Implemented with a clean `TaskManager` class that encapsulates all functionality.

2. **Efficient Data Structure**: Using a dictionary for O(1) lookups by task ID.

3. **Input Validation**: Thorough validation with appropriate error types (ValueError, KeyError).

4. **Documentation**: Complete docstrings with Args, Returns, and Raises sections.

5. **Error Handling**: Graceful handling of invalid inputs and edge cases.

6. **Performance Optimization**: Fast lookups, insertions, and deletions using appropriate data structures.

7. **Security**: Input sanitization and validation to protect against invalid or malicious inputs.

8. **Maintainability**: Clean code structure with consistent formatting and naming conventions.

9. **Extensibility**: Easy to add new features like due dates, priority levels, etc.

10. **Demo Function**: Example usage to demonstrate the functionality.

The implementation fulfills all ISO/IEC 25010 requirements including functionality, reliability, performance efficiency, and maintainability.