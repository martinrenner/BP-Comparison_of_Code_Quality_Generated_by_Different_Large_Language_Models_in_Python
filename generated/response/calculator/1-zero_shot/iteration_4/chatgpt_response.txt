```python
#!/usr/bin/env python3
"""
A console-based arithmetic calculator that evaluates expressions involving
addition, subtraction, multiplication, division, and parentheses.
It supports both integers and floating-point numbers (including negative values)
using operator precedence and proper error handling.

This implementation conforms to the ISO/IEC 25010 quality requirements:
- Correctness: Proper arithmetic evaluation with correct operator precedence.
- Performance: Uses an efficient recursive descent parser.
- Modularity: Organized into a Calculator class with separate parsing methods.
- Security: Input is validated against malicious or invalid characters.
- Testability: The code is structured to facilitate unit testing.
- Readability & Documentation: Contains docstrings and clear variable names.

Author: Your Name
Date: YYYY-MM-DD
"""

class Calculator:
    """
    A simple arithmetic calculator that supports addition (+), subtraction (-),
    multiplication (*), division (/), and parentheses for grouping.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression and return its result as a float.

        Parameters:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The evaluated result.

        Raises:
            ValueError: If the input expression is invalid (e.g., contains unbalanced parentheses,
                        invalid characters, or improperly formatted numbers).
            ZeroDivisionError: If division by zero is attempted.
        """
        # Validate allowed characters (digits, operators, decimal point, parentheses, whitespace)
        allowed_chars = set("0123456789.+-*/() \t")
        if not expression or expression.strip() == "":
            raise ValueError("Empty expression provided.")
        for char in expression:
            if char not in allowed_chars:
                raise ValueError(f"Invalid character found: '{char}'")

        # Remove all whitespace for easier processing
        self.expr = expression.replace(" ", "")
        self.pos = 0  # Pointer to track the current position in the expression string

        result = self._parse_expression()

        # Check if the entire expression has been consumed; if not, there's an error.
        if self.pos != len(self.expr):
            raise ValueError(f"Unexpected character at position {self.pos}: '{self.expr[self.pos]}'")
        return result

    def _parse_expression(self) -> float:
        """
        Parse and evaluate an expression, handling addition and subtraction.

        Returns:
            float: The evaluated result of the expression.
        """
        result = self._parse_term()
        while self.pos < len(self.expr) and self.expr[self.pos] in ('+', '-'):
            operator = self.expr[self.pos]
            self.pos += 1  # Skip the operator
            term = self._parse_term()
            if operator == '+':
                result += term
            else:
                result -= term
        return result

    def _parse_term(self) -> float:
        """
        Parse and evaluate a term, handling multiplication and division.

        Returns:
            float: The evaluated result of the term.
        """
        result = self._parse_factor()
        while self.pos < len(self.expr) and self.expr[self.pos] in ('*', '/'):
            operator = self.expr[self.pos]
            self.pos += 1  # Skip the operator
            factor = self._parse_factor()
            if operator == '*':
                result *= factor
            else:
                if factor == 0:
                    raise ZeroDivisionError("Division by zero is not allowed.")
                result /= factor
        return result

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor which can include a unary operator.

        Returns:
            float: The evaluated result of the factor.
        """
        # Handling unary operators: + and -
        if self.pos < len(self.expr) and self.expr[self.pos] in ('+', '-'):
            operator = self.expr[self.pos]
            self.pos += 1
            factor = self._parse_factor()
            return factor if operator == '+' else -factor

        return self._parse_primary()

    def _parse_primary(self) -> float:
        """
        Parse and evaluate a primary element in the expression.
        A primary element is either a number or a parenthesized expression.

        Returns:
            float: The evaluated result of the primary element.

        Raises:
            ValueError: If parentheses are unbalanced.
        """
        if self.pos < len(self.expr) and self.expr[self.pos] == '(':
            self.pos += 1  # Skip the '('
            result = self._parse_expression()
            if self.pos >= len(self.expr) or self.expr[self.pos] != ')':
                raise ValueError("Mismatched parentheses: missing ')'.")
            self.pos += 1  # Skip the ')'
            return result
        return self._parse_number()

    def _parse_number(self) -> float:
        """
        Parse a number (integer or floating-point) from the expression.

        Returns:
            float: The converted float value of the number string.

        Raises:
            ValueError: If a valid number cannot be parsed.
        """
        start_pos = self.pos
        dot_count = 0

        # A valid number must contain at least one digit.
        if self.pos < len(self.expr) and (self.expr[self.pos].isdigit() or self.expr[self.pos] == '.'):
            while self.pos < len(self.expr) and (self.expr[self.pos].isdigit() or self.expr[self.pos] == '.'):
                if self.expr[self.pos] == '.':
                    dot_count += 1
                    if dot_count > 1:
                        raise ValueError("Invalid number format: multiple decimal points encountered.")
                self.pos += 1
            number_str = self.expr[start_pos:self.pos]
            try:
                return float(number_str)
            except Exception:
                raise ValueError(f"Invalid number format: '{number_str}'.")
        else:
            raise ValueError(f"Expected a number at position {self.pos}.")

if __name__ == "__main__":
    # Console-based interface for the Calculator.
    calc = Calculator()
    print("Simple Arithmetic Calculator")
    print("Enter an expression to evaluate or type 'exit' to quit.")
    
    while True:
        user_input = input(">>> ")
        if user_input.lower() in ("exit", "quit"):
            print("Exiting the calculator. Goodbye!")
            break
        try:
            result = calc.calculate(user_input)
            print(f"Result: {result}")
        except Exception as error:
            print(f"Error: {error}")
```