# Python Console-Based Arithmetic Calculator

I've created a high-quality arithmetic calculator that meets ISO/IEC 25010 requirements. The implementation uses object-oriented programming principles and implements a robust expression parsing algorithm.

```python
class Calculator:
    """
    A calculator class that evaluates arithmetic expressions.
    
    This class implements a simple calculator that supports basic arithmetic
    operations (addition, subtraction, multiplication, division) and respects
    operator precedence and parentheses.
    """
    
    def __init__(self):
        """Initialize the Calculator instance."""
        # Define valid tokens for the calculator
        self.operators = {'+', '-', '*', '/'}
        self.parentheses = {'(', ')'}
        self.valid_chars = self.operators.union(self.parentheses).union({'.', ' '})
        
    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression and return the result.
        
        Args:
            expression: A string containing an arithmetic expression to evaluate.
            
        Returns:
            The numerical result of evaluating the expression.
            
        Raises:
            ValueError: If the expression contains invalid characters or syntax.
            ZeroDivisionError: If the expression involves division by zero.
            SyntaxError: If the expression has unbalanced parentheses.
        """
        # Input validation
        self._validate_expression(expression)
        
        # Tokenize the expression
        tokens = self._tokenize(expression)
        
        # Parse and evaluate the expression
        result, _ = self._parse_expression(tokens, 0)
        return result
    
    def _validate_expression(self, expression: str) -> None:
        """
        Validate the input expression for basic syntax errors.
        
        Args:
            expression: The arithmetic expression to validate.
            
        Raises:
            ValueError: If the expression contains invalid characters.
            SyntaxError: If the expression has unbalanced parentheses.
        """
        # Check for empty expressions
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
        
        # Check for invalid characters
        for char in expression:
            if not char.isdigit() and char not in self.valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
        
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
        
        if paren_count > 0:
            raise SyntaxError("Unbalanced parentheses: missing closing parentheses")
    
    def _tokenize(self, expression: str) -> list:
        """
        Convert the expression string into a list of tokens.
        
        Args:
            expression: The arithmetic expression to tokenize.
            
        Returns:
            A list of tokens (numbers, operators, and parentheses).
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]
            
            # Skip whitespace
            if char.isspace():
                i += 1
                continue
            
            # Handle operators and parentheses
            if char in self.operators or char in self.parentheses:
                tokens.append(char)
                i += 1
                continue
            
            # Handle numbers (including decimal points)
            if char.isdigit() or char == '.':
                # Extract the complete number
                j = i
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    j += 1
                
                # Convert to number and add to tokens
                num_str = expression[i:j]
                try:
                    # Handle the case where there might be multiple decimal points
                    if num_str.count('.') > 1:
                        raise ValueError(f"Invalid number format: {num_str}")
                    tokens.append(float(num_str))
                except ValueError:
                    raise ValueError(f"Invalid number format: {num_str}")
                
                i = j
                continue
            
            # If we get here, we have an invalid character
            raise ValueError(f"Invalid character in expression: '{char}'")
        
        return tokens
    
    def _parse_expression(self, tokens: list, index: int) -> tuple:
        """
        Recursively parse and evaluate an expression.
        
        This method implements a recursive descent parser to handle
        operator precedence and parentheses.
        
        Args:
            tokens: List of tokens to parse.
            index: Current position in the token list.
            
        Returns:
            A tuple containing (result, new_index).
        """
        # Parse the left term
        left, index = self._parse_term(tokens, index)
        
        # Process any addition or subtraction
        while index < len(tokens) and (tokens[index] == '+' or tokens[index] == '-'):
            operator = tokens[index]
            right, index = self._parse_term(tokens, index + 1)
            
            if operator == '+':
                left += right
            else:  # operator == '-'
                left -= right
        
        return left, index
    
    def _parse_term(self, tokens: list, index: int) -> tuple:
        """
        Parse and evaluate a term (product or quotient of factors).
        
        Args:
            tokens: List of tokens to parse.
            index: Current position in the token list.
            
        Returns:
            A tuple containing (result, new_index).
        """
        # Parse the left factor
        left, index = self._parse_factor(tokens, index)
        
        # Process any multiplication or division
        while index < len(tokens) and (tokens[index] == '*' or tokens[index] == '/'):
            operator = tokens[index]
            right, index = self._parse_factor(tokens, index + 1)
            
            if operator == '*':
                left *= right
            else:  # operator == '/'
                if right == 0:
                    raise ZeroDivisionError("Division by zero is not allowed")
                left /= right
        
        return left, index
    
    def _parse_factor(self, tokens: list, index: int) -> tuple:
        """
        Parse and evaluate a factor (number or parenthesized expression).
        
        Args:
            tokens: List of tokens to parse.
            index: Current position in the token list.
            
        Returns:
            A tuple containing (result, new_index).
            
        Raises:
            ValueError: If the expression has unexpected syntax.
            SyntaxError: If there are missing parentheses.
        """
        if index >= len(tokens):
            raise ValueError("Unexpected end of expression")
        
        token = tokens[index]
        
        # Handle numbers
        if isinstance(token, (int, float)):
            return token, index + 1
        
        # Handle parenthesized expressions
        if token == '(':
            result, index = self._parse_expression(tokens, index + 1)
            
            # Ensure there's a closing parenthesis
            if index >= len(tokens) or tokens[index] != ')':
                raise SyntaxError("Missing closing parenthesis")
            
            return result, index + 1
        
        # Handle unary plus and minus
        if token == '+' or token == '-':
            factor, index = self._parse_factor(tokens, index + 1)
            if token == '-':
                factor = -factor
            return factor, index
        
        raise ValueError(f"Unexpected token: {token}")


if __name__ == "__main__":
    # Example usage
    calculator = Calculator()
    
    try:
        # Test different expressions
        test_expressions = [
            "2 + 3",
            "2.5 * (3 + 4)",
            "10 / (2 * 5)",
            "3 * (4 + 2) - 5",
            "-5 + 3",
            "2 * -3"
        ]
        
        print("Calculator Test Results:")
        print("-----------------------")
        for expr in test_expressions:
            result = calculator.calculate(expr)
            print(f"{expr} = {result}")
            
    except (ValueError, ZeroDivisionError, SyntaxError) as e:
        print(f"Error: {e}")
```

## Key Features

1. **Object-Oriented Design**: Implemented as a `Calculator` class with clear interface.

2. **Complete Expression Parsing**: Handles operator precedence, parentheses, and negative numbers correctly.

3. **Robust Error Handling**:
   - Validates input for invalid characters
   - Checks for balanced parentheses
   - Handles division by zero
   - Validates number formats

4. **Efficient Algorithm**:
   - Uses recursive descent parsing (time complexity: O(n))
   - Avoids unnecessary memory usage

5. **Security**: Thoroughly validates input without using dangerous functions like `eval()`.

6. **Readability & Documentation**: Comprehensive docstrings and comments explain the code.

7. **Testability**: Includes example tests in the main block.

The code follows a traditional parsing strategy with three layers (expression, term, factor) to handle operator precedence correctly. It's designed to be maintainable, easy to understand, and robust against invalid inputs.