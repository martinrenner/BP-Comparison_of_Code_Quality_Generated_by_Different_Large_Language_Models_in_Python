```python
import re


class Calculator:
    """
    A console-based arithmetic calculator that evaluates expressions with
    addition, subtraction, multiplication, division, and parentheses.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.

        Args:
            expression (str): The mathematical expression to evaluate.

        Returns:
            float: The result of the evaluation.

        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
            TypeError: If expression is not a string.
        """
        if not isinstance(expression, str):
            raise TypeError("Input expression must be a string.")

        normalized_expression = self._normalize_expression(expression)
        self._validate_parentheses(normalized_expression)

        try:
            result = self._evaluate(normalized_expression)
            return result
        except ZeroDivisionError:
            raise ValueError("Division by zero encountered.")
        except Exception as e:
            raise ValueError(f"Evaluation error: {e}")

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes the expression: removes whitespace and validates characters.

        Args:
            expression (str): The input mathematical expression.

        Returns:
            str: The normalized expression.

        Raises:
            ValueError: If the expression contains invalid characters.
        """
        allowed_chars = set("0123456789+-*/().")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")

        return expression.replace(" ", "")

    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses in the expression are balanced.

        Args:
            expression (str): The normalized mathematical expression.

        Raises:
            ValueError: If parentheses are unbalanced.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: unmatched ')'.")
                stack.pop()
        if stack:
            raise ValueError("Unbalanced parentheses: unmatched '('.")

    def _evaluate(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a stack-based approach.  Handles operator precedence.

        Args:
            expression: str, the normalized expression string

        Returns:
            float, the result of evaluating the expression
        """
        tokens = self._tokenize(expression)
        output_queue = []
        operator_stack = []

        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}

        for token in tokens:
            if self._is_number(token):
                output_queue.append(float(token))
            elif token in precedence:
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Mismatched parentheses.")
                operator_stack.pop()  # Pop the '('

        while operator_stack:
            if operator_stack[-1] == '(':  # Check for unmatched '('
                raise ValueError("Mismatched parentheses.")
            output_queue.append(operator_stack.pop())

        return self._evaluate_postfix(output_queue)

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression into numbers, operators, and parentheses.  Handles multi-digit numbers and decimals.

        Args:
            expression: str, the normalized expression

        Returns:
            list: a list of tokens
        """
        return re.findall(r"[-+]?\d*\.?\d+|[-+*/()]", expression)

    def _is_number(self, token: str) -> bool:
        """
        Checks if a token represents a valid number (integer or float).
        """
        try:
            float(token)
            return True
        except ValueError:
            return False

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a postfix expression (Reverse Polish Notation).

        Args:
            postfix_tokens: list, a list of tokens in postfix order

        Returns:
            float: the result of the expression
        """

        stack = []
        for token in postfix_tokens:
            if isinstance(token, float):
                stack.append(token)
            else:  # token is an operator
                if len(stack) < 2:
                    raise ValueError("Invalid expression format.")

                operand2 = stack.pop()
                operand1 = stack.pop()

                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero.")
                    result = operand1 / operand2
                else:
                    raise ValueError(f"Unknown operator: {token}")

                stack.append(result)

        if len(stack) != 1:  # Check for a single final result.
            raise ValueError("Invalid expression format.")
        return stack.pop()


def main():
    """
    Main function to run the calculator in a loop.
    """
    calculator = Calculator()

    while True:
        try:
            expression = input("Enter a mathematical expression (or 'quit' to exit): ")
            if expression.lower() == 'quit':
                break
            result = calculator.calculate(expression)
            print(f"Result: {result}")
        except ValueError as e:
            print(f"Error: {e}")
        except TypeError as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```
