# Arithmetic Calculator Implementation

I'll develop a console-based arithmetic calculator that meets all your requirements using Object-Oriented Programming principles and good software design practices.

```python
from typing import List, Union, Dict, Callable
import re


class Calculator:
    """
    A calculator class for evaluating arithmetic expressions.
    
    This class implements a calculator that can evaluate arithmetic expressions
    with support for addition, subtraction, multiplication, division, and parentheses
    while respecting operator precedence.
    """
    
    def __init__(self):
        """Initialize the Calculator with operators and their precedence."""
        # Define operators and their precedence (higher number = higher precedence)
        self.operators: Dict[str, Dict[str, Union[int, Callable]]] = {
            '+': {'precedence': 1, 'function': lambda a, b: a + b},
            '-': {'precedence': 1, 'function': lambda a, b: a - b},
            '*': {'precedence': 2, 'function': lambda a, b: a * b},
            '/': {'precedence': 2, 'function': lambda a, b: a / b}
        }

    def calculate(self, expression: str) -> float:
        """
        Evaluate the given arithmetic expression and return the result.
        
        Args:
            expression (str): The arithmetic expression to evaluate
                              (e.g., "3 + 4 * 2 / (1 - 5)")
                              
        Returns:
            float: The result of the evaluated expression
            
        Raises:
            ValueError: If the expression contains invalid characters or is malformed
            SyntaxError: If parentheses are unbalanced
            ZeroDivisionError: If division by zero is attempted
        """
        # Validate the expression
        self._validate_expression(expression)
        
        # Tokenize and evaluate
        tokens = self._tokenize(expression)
        result = self._evaluate_expression(tokens)
        
        return result
    
    def _validate_expression(self, expression: str) -> None:
        """
        Validate the expression for correctness.
        
        Args:
            expression (str): The expression to validate
            
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If parentheses are unbalanced
        """
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().() \t")
        if any(char not in valid_chars for char in expression):
            raise ValueError("Expression contains invalid characters")
        
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
                
        if paren_count > 0:
            raise SyntaxError("Unbalanced parentheses: missing closing parentheses")
    
    def _tokenize(self, expression: str) -> List[str]:
        """
        Convert the expression string into a list of tokens.
        
        Args:
            expression (str): The expression to tokenize
            
        Returns:
            List[str]: A list of tokens (numbers, operators, parentheses)
        """
        # Replace any whitespace with empty strings
        expression = expression.replace(" ", "").replace("\t", "")
        
        # Insert spaces around operators and parentheses for easier tokenization
        for op in "+-*/()":
            expression = expression.replace(op, f" {op} ")
            
        # Handle negative numbers
        tokens = expression.split()
        i = 0
        while i < len(tokens) - 1:
            # Check for patterns like "( -" or "operator -"
            if tokens[i] in ['(', '+', '-', '*', '/'] and tokens[i+1] == '-':
                # If we have a negative sign after an operator or opening parenthesis,
                # and the next token is a number, combine them
                if i + 2 < len(tokens) and re.match(r'\d+(\.\d+)?', tokens[i+2]):
                    tokens[i+1] = tokens[i+1] + tokens[i+2]  # Combine the negative sign with the number
                    tokens.pop(i+2)  # Remove the number as it's now part of the negative number
            i += 1
            
        return tokens
    
    def _evaluate_expression(self, tokens: List[str]) -> float:
        """
        Evaluate an expression represented as a list of tokens.
        
        This method uses the Shunting Yard algorithm to convert the infix notation
        to Reverse Polish Notation (RPN) and then evaluates the RPN expression.
        
        Args:
            tokens (List[str]): List of tokens representing the expression
            
        Returns:
            float: The result of evaluating the expression
        """
        # Convert infix to RPN using Shunting Yard algorithm
        rpn_tokens = self._infix_to_rpn(tokens)
        
        # Evaluate RPN
        return self._evaluate_rpn(rpn_tokens)
    
    def _infix_to_rpn(self, tokens: List[str]) -> List[str]:
        """
        Convert an infix expression to Reverse Polish Notation using the Shunting Yard algorithm.
        
        Args:
            tokens (List[str]): List of tokens in infix notation
            
        Returns:
            List[str]: List of tokens in RPN
        """
        output_queue = []
        operator_stack = []
        
        for token in tokens:
            if re.match(r'^-?\d+(\.\d+)?$', token):  # If token is a number
                output_queue.append(token)
            elif token in self.operators:  # If token is an operator
                while (operator_stack and 
                       operator_stack[-1] != '(' and 
                       ((self.operators.get(token, {}).get('precedence', 0) <= 
                         self.operators.get(operator_stack[-1], {}).get('precedence', 0)))):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the left parenthesis
                else:
                    raise SyntaxError("Mismatched parentheses")
                    
        # Pop any remaining operators from the stack to the output queue
        while operator_stack:
            if operator_stack[-1] == '(':
                raise SyntaxError("Mismatched parentheses")
            output_queue.append(operator_stack.pop())
            
        return output_queue
    
    def _evaluate_rpn(self, rpn_tokens: List[str]) -> float:
        """
        Evaluate an expression in Reverse Polish Notation.
        
        Args:
            rpn_tokens (List[str]): List of tokens in RPN
            
        Returns:
            float: The result of evaluating the expression
            
        Raises:
            ZeroDivisionError: If division by zero is attempted
        """
        stack = []
        
        for token in rpn_tokens:
            if re.match(r'^-?\d+(\.\d+)?$', token):  # If token is a number
                stack.append(float(token))
            elif token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: not enough operands")
                
                b = stack.pop()
                a = stack.pop()
                
                if token == '/' and b == 0:
                    raise ZeroDivisionError("Division by zero")
                
                result = self.operators[token]['function'](a, b)
                stack.append(result)
        
        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands")
            
        return stack[0]


def main():
    """
    Main function to run the calculator as a console application.
    """
    calculator = Calculator()
    
    print("Calculator Application (Type 'exit' to quit)")
    print("Supports: +, -, *, /, parentheses, and decimal numbers")
    
    while True:
        try:
            expression = input("\nEnter expression: ")
            
            if expression.lower() == 'exit':
                break
                
            if not expression.strip():
                print("Please enter an expression")
                continue
                
            result = calculator.calculate(expression)
            print(f"Result: {result}")
            
        except (ValueError, SyntaxError, ZeroDivisionError) as e:
            print(f"Error: {str(e)}")
        except Exception as e:
            print(f"Unexpected error: {str(e)}")


if __name__ == "__main__":
    main()
```

## Key Features of the Implementation

1. **Object-Oriented Design**: Implemented the Calculator class with a clean interface.

2. **Robust Expression Parsing**: 
   - Handles integers, floats, and negative numbers
   - Supports proper operator precedence
   - Validates expressions before evaluation

3. **Efficient Algorithm**: 
   - Uses the Shunting Yard algorithm to convert infix notation to Reverse Polish Notation (RPN)
   - Provides O(n) time complexity where n is the number of tokens

4. **Error Handling**:
   - Validates expressions for invalid characters
   - Checks for balanced parentheses
   - Handles division by zero
   - Provides meaningful error messages

5. **Clean Code**:
   - Clear method and variable names
   - Comprehensive docstrings
   - Logical structure with separate methods for different responsibilities
   - Type hints for better readability and tooling support

6. **Security**: 
   - No use of eval() or similar functions
   - Input validation to prevent unexpected behavior

7. **Testability**: 
   - Modular design makes unit testing straightforward
   - Each method has a single responsibility

This implementation conforms to the ISO/IEC 25010 standard by providing functional suitability, performance efficiency, compatibility, reliability, security, and maintainability.