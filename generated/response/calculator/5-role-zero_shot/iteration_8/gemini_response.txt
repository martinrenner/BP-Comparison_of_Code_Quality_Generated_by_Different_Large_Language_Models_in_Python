```python
import re
from typing import Union


class Calculator:
    """
    A console-based arithmetic calculator that supports addition, subtraction,
    multiplication, division, and parentheses, handling operator precedence
    and both integer and floating-point numbers.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression string and returns the result.

        Args:
            expression: The mathematical expression to evaluate (e.g., "2 + 3 * (4 - 1)").

        Returns:
            The result of the expression as a float.

        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero, or empty expression).
        """

        if not expression.strip():
            raise ValueError("Expression cannot be empty.")

        try:
            tokens = self._tokenize(expression)
            postfix = self._infix_to_postfix(tokens)
            result = self._evaluate_postfix(postfix)
            return result
        except ZeroDivisionError:
            raise ZeroDivisionError("Division by zero encountered.")
        except ValueError as e:
            raise ValueError(f"Invalid expression: {e}")


    def _tokenize(self, expression: str) -> list[str]:
        """
        Tokenizes the input expression string.

        Args:
            expression: The mathematical expression string.

        Returns:
             A list of tokens (numbers, operators, parentheses).

        Raises:
            ValueError: if finds an invalid character
        """
        # Regex to split the expression into tokens.  Handles integers, floats, and negative numbers correctly.
        tokens = re.findall(r"(\d+\.?\d*|\.\d+|[-+*/()]|\s+)", expression)
        # Strip all whitespace, check all chars.
        cleared_tokens = [token for token in tokens if not token.isspace()]
        for token in cleared_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[-+*/()]$", token):
                raise ValueError(f"Invalid character found:'{token}'")
        return cleared_tokens

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts an infix expression (represented as a list of tokens) to postfix notation.

        Args:
            tokens: A list of tokens in infix notation.

        Returns:
            A list of tokens in postfix notation.

        Raises:
            ValueError: If detects an unbalanced parenthesis
        """
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []

        for token in tokens:
            if re.match(r"^\d+\.?\d*$|^\.\d+$", token):  # If it's a number (integer or float)
                output.append(token)
            elif token in precedence:  # If it's an operator
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(token, 0) <= precedence.get(operator_stack[-1], 0)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                try:
                    while operator_stack[-1] != '(':
                        output.append(operator_stack.pop())
                    operator_stack.pop()  # Remove the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")
            # Should not happen with a cleared input
            else:
                raise ValueError(f"Invalid token: {token}")

        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Unbalanced parentheses")
            output.append(operator_stack.pop())

        return output

    def _evaluate_postfix(self, postfix_tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).

        Args:
            postfix_tokens: A list of tokens in postfix notation.

        Returns:
            The result of the expression.

        Raises:
            ValueError: if expression is invalid
        """
        operand_stack = []

        for token in postfix_tokens:
            if re.match(r"^\d+\.?\d*$|^\.\d+$", token): # If it's a number
                operand_stack.append(float(token))  # Convert to float to handle decimal points
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: not enough operands")

                if token == '+':
                    operand_stack.append(operand1 + operand2)
                elif token == '-':
                    operand_stack.append(operand1 - operand2)
                elif token == '*':
                    operand_stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero")
                    operand_stack.append(operand1 / operand2)
                # Should not happen with a cleared input
                else:
                    raise ValueError(f"Invalid operator: {token}")


        if len(operand_stack) != 1:
            raise ValueError("Invalid expression: too many operands")

        return operand_stack[0]


def main():
    calculator = Calculator()

    while True:
        expression = input("Enter a mathematical expression (or 'quit' to exit): ")
        if expression.lower() == 'quit':
            break

        try:
            result = calculator.calculate(expression)
            print(f"Result: {result}")
        except ValueError as e:
            print(f"Error: {e}")
        except ZeroDivisionError as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```
