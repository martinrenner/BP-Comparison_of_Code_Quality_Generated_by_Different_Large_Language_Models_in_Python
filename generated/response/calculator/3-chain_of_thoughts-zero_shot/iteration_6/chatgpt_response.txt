```python
class Calculator:
    """
    A console-based arithmetic calculator that evaluates arithmetic expressions
    using object-oriented design. It supports basic operations (addition, subtraction,
    multiplication, division), parentheses, and numbers in integer or decimal format
    (including negative numbers). The algorithm uses the shunting yard method to respect
    operator precedence and is protected against invalid inputs.
    """

    def __init__(self):
        # Define supported operators with their precedence and associativity.
        self.operators = {
            '+': {'precedence': 1, 'associativity': 'left'},
            '-': {'precedence': 1, 'associativity': 'left'},
            '*': {'precedence': 2, 'associativity': 'left'},
            '/': {'precedence': 2, 'associativity': 'left'},
        }

    def calculate(self, expression: str) -> float:
        """
        Evaluates an arithmetic expression and returns the result as a float.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: If the expression is invalid (e.g., contains unbalanced parentheses,
                        invalid characters, or malformed numbers).
            ZeroDivisionError: If a division by zero is encountered.
        """
        if not expression:
            raise ValueError("Empty expression provided.")

        tokens = self._tokenize(expression)
        rpn = self._to_rpn(tokens)
        result = self._evaluate_rpn(rpn)
        return result

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens.

        Tokens can be:
          - float numbers (including negative numbers)
          - operator strings: '+', '-', '*', '/'
          - parenthesis: '(' or ')'

        This method also validates that the expression contains only allowed characters
        and handles unary plus or minus appropriately. In cases where a unary operator is
        applied directly to a parenthesized expression (e.g. "-(2+3)"), a 0 is inserted
        to correctly interpret the unary operation.

        Args:
            expression (str): The arithmetic expression to tokenize.

        Returns:
            list: A list of tokens (floats and strings).

        Raises:
            ValueError: If an invalid character or malformed number is encountered.
        """
        tokens = []
        i = 0
        n = len(expression)
        # When expecting a number (or something that can start a number), allow unary operators.
        expecting_number = True

        while i < n:
            char = expression[i]

            # Skip whitespace
            if char.isspace():
                i += 1
                continue

            # Validate allowed characters.
            if char not in "0123456789.+-*/()":
                raise ValueError(f"Invalid character found: '{char}'")

            # Handle a unary plus or minus when a number is expected.
            if expecting_number and char in "+-":
                # Look ahead to see what follows the sign (skip any whitespace).
                j = i + 1
                while j < n and expression[j].isspace():
                    j += 1
                if j < n and expression[j] == "(":
                    # For expressions like "-(2+3)", insert a 0 before binary operator '-'
                    tokens.append(0.0)
                    tokens.append(char)
                    i += 1
                    expecting_number = True
                    continue
                elif j < n and (expression[j].isdigit() or expression[j] == '.'):
                    # It's a unary operator attached to a number literal.
                    sign = 1 if char == '+' else -1
                    i += 1  # move past the sign
                    num_str = ""
                    dot_count = 0
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: too many decimal points.")
                        num_str += expression[i]
                        i += 1
                    try:
                        number = float(num_str) * sign
                    except Exception:
                        raise ValueError(f"Invalid number: {num_str}")
                    tokens.append(number)
                    expecting_number = False
                    continue
                else:
                    raise ValueError("Invalid syntax after unary operator.")

            # Handle numeric tokens (start with a digit or a dot).
            if char.isdigit() or char == '.':
                num_str = ""
                dot_count = 0
                while i < n and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: too many decimal points.")
                    num_str += expression[i]
                    i += 1
                try:
                    number = float(num_str)
                except Exception:
                    raise ValueError(f"Invalid number: {num_str}")
                tokens.append(number)
                expecting_number = False
                continue

            # Handle binary operators.
            if char in self.operators:
                tokens.append(char)
                i += 1
                expecting_number = True  # After an operator, we expect another number.
                continue

            # Handle opening parenthesis.
            if char == "(":
                tokens.append(char)
                i += 1
                expecting_number = True
                continue

            # Handle closing parenthesis.
            if char == ")":
                tokens.append(char)
                i += 1
                expecting_number = False
                continue

            # This point should not be reached.
            i += 1

        return tokens

    def _to_rpn(self, tokens: list) -> list:
        """
        Converts a list of tokens in infix notation into Reverse Polish Notation (RPN)
        using the shunting yard algorithm.

        Args:
            tokens (list): The list of tokens in infix format.

        Returns:
            list: The tokens arranged in RPN order.

        Raises:
            ValueError: If unbalanced parentheses are detected.
        """
        output_queue = []
        operator_stack = []

        for token in tokens:
            if isinstance(token, (int, float)):
                output_queue.append(token)
            elif token in self.operators:
                while operator_stack:
                    top = operator_stack[-1]
                    if top in self.operators:
                        top_prec = self.operators[top]['precedence']
                        token_prec = self.operators[token]['precedence']
                        # For left-associative operators, pop operators with greater or equal precedence.
                        if (top_prec > token_prec) or (top_prec == token_prec and 
                                                        self.operators[token]['associativity'] == 'left'):
                            output_queue.append(operator_stack.pop())
                        else:
                            break
                    else:
                        break
                operator_stack.append(token)
            elif token == "(":
                operator_stack.append(token)
            elif token == ")":
                # Pop from the stack until an opening parenthesis is found.
                while operator_stack and operator_stack[-1] != "(":
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: missing '('")
                operator_stack.pop()  # Remove the '(' from the stack.
            else:
                raise ValueError(f"Unknown token encountered: {token}")

        # Pop any remaining operators from the stack.
        while operator_stack:
            top = operator_stack.pop()
            if top in ("(", ")"):
                raise ValueError("Unbalanced parentheses detected.")
            output_queue.append(top)

        return output_queue

    def _evaluate_rpn(self, tokens: list) -> float:
        """
        Evaluates an expression in Reverse Polish Notation (RPN).

        Args:
            tokens (list): The expression in RPN as a list of tokens.

        Returns:
            float: The evaluation result.

        Raises:
            ValueError: If the RPN expression is malformed.
            ZeroDivisionError: If division by zero occurs.
        """
        stack = []
        for token in tokens:
            if isinstance(token, (int, float)):
                stack.append(token)
            elif token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient operands.")
                right = stack.pop()
                left = stack.pop()
                if token == '+':
                    stack.append(left + right)
                elif token == '-':
                    stack.append(left - right)
                elif token == '*':
                    stack.append(left * right)
                elif token == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero encountered.")
                    stack.append(left / right)
            else:
                raise ValueError(f"Unknown token in RPN evaluation: {token}")

        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands remain.")

        return stack[0]


if __name__ == "__main__":
    # Console loop to interactively evaluate arithmetic expressions.
    calculator = Calculator()
    print("Arithmetic Calculator. Type 'quit' to exit.")

    while True:
        try:
            expr = input("Enter arithmetic expression: ")
            if expr.strip().lower() == "quit":
                break
            result = calculator.calculate(expr)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```