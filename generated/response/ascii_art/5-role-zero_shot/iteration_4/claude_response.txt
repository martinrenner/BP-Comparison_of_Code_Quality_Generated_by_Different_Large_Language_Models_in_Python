# ASCII Art Generator Implementation

I'll create a console-based 2D ASCII Art application following the requirements. The implementation will use OOP principles with proper validation, documentation, and best practices.

```python
class AsciiArt:
    """
    A class to generate ASCII art shapes.
    
    This class provides methods to create various ASCII art shapes
    using a specified symbol character.
    """
    
    @staticmethod
    def _validate_input(symbol: str, *dimensions: int) -> None:
        """
        Validates the input parameters for all drawing functions.
        
        Args:
            symbol: The character to use for drawing.
            *dimensions: Variable number of dimension parameters (width, height).
        
        Raises:
            ValueError: If symbol is not a single character or is whitespace.
            ValueError: If any dimension is negative or zero.
        """
        # Validate symbol
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character")
        
        # Validate dimensions
        for dim in dimensions:
            if dim <= 0:
                raise ValueError("Dimensions must be positive integers")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width using the given symbol.
        
        Args:
            width: The width (and height) of the square.
            symbol: The character to use for drawing.
            
        Returns:
            A multi-line string representing the ASCII art square.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_input(symbol, width)
        
        # Create a square by drawing 'width' number of lines, each with 'width' symbols
        return '\n'.join([symbol * width] * width)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width and height using the given symbol.
        
        Args:
            width: The width of the rectangle.
            height: The height of the rectangle.
            symbol: The character to use for drawing.
            
        Returns:
            A multi-line string representing the ASCII art rectangle.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_input(symbol, width, height)
        
        # Create a rectangle by drawing 'height' number of lines, each with 'width' symbols
        return '\n'.join([symbol * width] * height)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width and height using the given symbol.
        
        The parallelogram grows diagonally to the right, starting from the top-left corner,
        with each row shifted by one space to the right.
        
        Args:
            width: The width of the parallelogram.
            height: The height of the parallelogram.
            symbol: The character to use for drawing.
            
        Returns:
            A multi-line string representing the ASCII art parallelogram.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_input(symbol, width, height)
        
        lines = []
        for i in range(height):
            # Add increasing spaces before each line, then add the symbols
            lines.append(' ' * i + symbol * width)
        
        return '\n'.join(lines)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified dimensions using the given symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width: The maximum width of the triangle.
            height: The height of the triangle.
            symbol: The character to use for drawing.
            
        Returns:
            A multi-line string representing the ASCII art right-angled triangle.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_input(symbol, width, height)
        
        lines = []
        # Calculate how many symbols to add per row
        symbols_per_row = [int(round(i * (width / height))) for i in range(1, height + 1)]
        
        for count in symbols_per_row:
            lines.append(symbol * count)
        
        return '\n'.join(lines)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height using the given symbol.
        
        Args:
            height: The height of the pyramid.
            symbol: The character to use for drawing.
            
        Returns:
            A multi-line string representing the ASCII art pyramid.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_input(symbol, height)
        
        lines = []
        for i in range(1, height + 1):
            # Calculate spaces before symbols and number of symbols
            spaces = ' ' * (height - i)
            symbols = symbol * (2 * i - 1)
            lines.append(spaces + symbols)
        
        return '\n'.join(lines)


def main():
    """
    Main function to demonstrate the ASCII Art functionality.
    """
    ascii_art = AsciiArt()
    
    # Example usage
    try:
        print("\nSquare (4x4 using '*'):")
        print(ascii_art.draw_square(4, '*'))
        
        print("\nRectangle (6x3 using '#'):")
        print(ascii_art.draw_rectangle(6, 3, '#'))
        
        print("\nParallelogram (5x3 using '@'):")
        print(ascii_art.draw_parallelogram(5, 3, '@'))
        
        print("\nTriangle (5x3 using '+'):")
        print(ascii_art.draw_triangle(5, 3, '+'))
        
        print("\nPyramid (4 height using '$'):")
        print(ascii_art.draw_pyramid(4, '$'))
    
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

This implementation includes:

1. **OOP Design:**
   - Encapsulated all functionality in the `AsciiArt` class
   - Used static method for input validation

2. **Input Validation:**
   - Checks for single-character, non-whitespace symbols
   - Validates that all dimensions are positive integers
   - Raises appropriate ValueError with descriptive messages

3. **Algorithm Efficiency:**
   - Uses list comprehensions and joins for efficient string creation
   - Avoids unnecessary computations in loops

4. **Documentation:**
   - Comprehensive docstrings following Python conventions
   - Clear parameter and return value descriptions
   - Documentation of exceptions

5. **Security:**
   - Input validation protects against invalid inputs
   - No external dependencies or file operations that could introduce vulnerabilities

6. **Code Quality:**
   - Clean, readable code structure
   - Consistent naming conventions
   - Modular design with a clear separation of concerns

The implementation satisfies all the requirements and produces accurate ASCII art shapes based on the requested dimensions and symbols.