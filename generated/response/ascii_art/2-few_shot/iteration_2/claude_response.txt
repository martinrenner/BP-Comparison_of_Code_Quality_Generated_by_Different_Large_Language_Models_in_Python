# ASCII Art Generator

I'll create a high-quality Python console-based ASCII art generator that follows object-oriented design principles and meets ISO/IEC 25010 quality standards.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes filled with specified symbols.
    
    This class provides methods to draw various shapes like squares, rectangles,
    triangles, parallelograms, and pyramids using ASCII characters.
    """
    
    def __init__(self):
        """Initialize the AsciiArt class."""
        pass
        
    def _validate_input(self, symbol: str, *dimensions: int) -> None:
        """
        Validates input parameters for all drawing functions.
        
        Args:
            symbol (str): The character to use for drawing the shape.
            *dimensions (int): Variable number of dimension parameters (width, height).
            
        Raises:
            ValueError: If symbol is not a single character, is a whitespace, or if
                        any dimension is negative or zero.
            TypeError: If dimensions are not integers.
        """
        # Validate symbol
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")
            
        # Validate dimensions
        for i, dim in enumerate(dimensions):
            if not isinstance(dim, int):
                raise TypeError(f"Dimension {i+1} must be an integer.")
            if dim <= 0:
                raise ValueError(f"Dimension {i+1} must be positive.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing the square.
            
        Returns:
            str: A multi-line string representing a square in ASCII art.
            
        Raises:
            ValueError: If width is negative or zero, or if symbol is invalid.
            TypeError: If width is not an integer.
        """
        self._validate_input(symbol, width)
        
        # Create a square by repeating the symbol
        row = symbol * width
        return '\n'.join([row for _ in range(width)])
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing the rectangle.
            
        Returns:
            str: A multi-line string representing a rectangle in ASCII art.
            
        Raises:
            ValueError: If width or height is negative or zero, or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Create a rectangle by repeating the symbol
        row = symbol * width
        return '\n'.join([row for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram filled with the specified symbol.
        
        The parallelogram starts at the top-left and shifts to the right
        by one space for each row.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing the parallelogram.
            
        Returns:
            str: A multi-line string representing a parallelogram in ASCII art.
            
        Raises:
            ValueError: If width or height is negative or zero, or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Create a parallelogram by adding spaces and repeating the symbol
        result = []
        for i in range(height):
            result.append(' ' * i + symbol * width)
        
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle filled with the specified symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing the triangle.
            
        Returns:
            str: A multi-line string representing a right-angled triangle in ASCII art.
            
        Raises:
            ValueError: If width or height is negative or zero, or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Calculate the width increment per row
        if height == 1:
            return symbol * width
            
        width_increment = width / height
        result = []
        
        for i in range(1, height + 1):
            # Calculate width for the current row (ensuring we have an integer)
            current_width = round(i * width_increment)
            result.append(symbol * current_width)
        
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing the pyramid.
            
        Returns:
            str: A multi-line string representing a pyramid in ASCII art.
            
        Raises:
            ValueError: If height is negative or zero, or if symbol is invalid.
            TypeError: If height is not an integer.
        """
        self._validate_input(symbol, height)
        
        # Create a pyramid by calculating spaces and symbols for each row
        result = []
        for i in range(1, height + 1):
            # Calculate number of symbols for the current row
            symbols = 2 * i - 1
            # Calculate padding to center the symbols
            padding = height - i
            result.append(' ' * padding + symbol * symbols)
        
        return '\n'.join(result)


def main():
    """
    Main function to demonstrate the ASCII art generator.
    
    This function creates sample ASCII art shapes and displays them to the console.
    """
    ascii_art = AsciiArt()
    
    # Demonstrate the shapes
    print("Square (5x5 with '#'):")
    print(ascii_art.draw_square(5, '#'))
    print("\nRectangle (8x4 with '*'):")
    print(ascii_art.draw_rectangle(8, 4, '*'))
    print("\nParallelogram (6x4 with '@'):")
    print(ascii_art.draw_parallelogram(6, 4, '@'))
    print("\nTriangle (8x4 with '+'):")
    print(ascii_art.draw_triangle(8, 4, '+'))
    print("\nPyramid (5 with '&'):")
    print(ascii_art.draw_pyramid(5, '&'))


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"Error: {e}")
```

The code implements a console-based 2D ASCII art application that meets all the specified requirements:

1. **Functionality Requirements**:
   - Implements all required drawing functions: draw_square, draw_rectangle, draw_parallelogram, draw_triangle, and draw_pyramid

2. **Implementation Requirements**:
   - Uses OOP with an AsciiArt class and implements the required interface
   - Includes input validation for all parameters
   - Returns multi-line strings representing the ASCII art shapes
   - Fills shapes with the specified symbol

3. **Code Quality Requirements**:
   - Correctness: The code produces expected results for various inputs
   - Performance: Uses efficient algorithms for drawing shapes
   - Modularity: Code is structured into logical components with a single responsibility
   - Security: Validates inputs to protect against invalid or malicious inputs
   - Testability: Methods have clear inputs and outputs, making them easy to test
   - Readability & Documentation: Uses comprehensive docstrings, clear variable names, and appropriate comments

The main function provides examples of how to use each shape generation method, and the code includes proper error handling to ensure robustness.