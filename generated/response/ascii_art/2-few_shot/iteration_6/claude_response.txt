# ASCII Art Generator

I'll create a high-quality Python console-based 2D ASCII art application that meets the specified requirements. The implementation will focus on object-oriented programming principles and include proper validation, error handling, and documentation.

```python
class AsciiArt:
    """
    A class for creating ASCII art shapes.
    
    This class provides methods to generate various ASCII art shapes
    such as squares, rectangles, parallelograms, triangles, and pyramids.
    Each shape is filled with a user-specified character.
    """
    
    @staticmethod
    def _validate_input(width: int, height: int, symbol: str) -> None:
        """
        Validates input parameters for ASCII art generation.
        
        Args:
            width (int): The width of the shape.
            height (int): The height of the shape.
            symbol (str): The character to fill the shape with.
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        # Validate width and height
        if not isinstance(width, int):
            raise TypeError("Width must be an integer.")
        if not isinstance(height, int):
            raise TypeError("Height must be an integer.")
        
        if width < 0:
            raise ValueError("Width cannot be negative.")
        if height < 0:
            raise ValueError("Height cannot be negative.")
        
        # Validate symbol
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be exactly one character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to fill the square with.
            
        Returns:
            str: A multi-line string representing the square ASCII art.
            
        Raises:
            ValueError: If width is negative or if symbol is invalid.
            TypeError: If width is not an integer.
        """
        self._validate_input(width, width, symbol)
        
        if width == 0:
            return ""
            
        # Create a square by repeating the symbol
        square_line = symbol * width
        result = "\n".join([square_line for _ in range(width)])
        return result
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to fill the rectangle with.
            
        Returns:
            str: A multi-line string representing the rectangle ASCII art.
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(width, height, symbol)
        
        if width == 0 or height == 0:
            return ""
            
        # Create a rectangle by repeating the symbol
        rectangle_line = symbol * width
        result = "\n".join([rectangle_line for _ in range(height)])
        return result
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram filled with the specified symbol.
        Each row is shifted one space to the right from the previous row.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to fill the parallelogram with.
            
        Returns:
            str: A multi-line string representing the parallelogram ASCII art.
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(width, height, symbol)
        
        if width == 0 or height == 0:
            return ""
            
        # Create a parallelogram by shifting each row
        result = []
        for i in range(height):
            spaces = " " * i
            row = spaces + symbol * width
            result.append(row)
        
        return "\n".join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle filled with the specified symbol.
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to fill the triangle with.
            
        Returns:
            str: A multi-line string representing the triangle ASCII art.
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(width, height, symbol)
        
        if width == 0 or height == 0:
            return ""
            
        # Calculate the number of symbols to add in each row
        symbols_per_row = []
        if height == 1:
            symbols_per_row = [width]
        else:
            increment = width / height
            for i in range(height):
                symbols = int((i + 1) * increment + 0.5)  # Round to nearest integer
                symbols_per_row.append(min(symbols, width))  # Ensure we don't exceed width
            
        # Create the triangle
        result = []
        for i in range(height):
            row = symbol * symbols_per_row[i]
            result.append(row)
        
        return "\n".join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to fill the pyramid with.
            
        Returns:
            str: A multi-line string representing the pyramid ASCII art.
            
        Raises:
            ValueError: If height is negative or if symbol is invalid.
            TypeError: If height is not an integer.
        """
        self._validate_input(height, height, symbol)  # Width not used but validated for consistency
        
        if height == 0:
            return ""
            
        # Calculate the width of the base and create the pyramid
        width = 2 * height - 1
        result = []
        
        for i in range(height):
            # Calculate the number of symbols for this row
            symbols_count = 2 * i + 1
            
            # Calculate the number of spaces needed to center the symbols
            spaces_count = (width - symbols_count) // 2
            
            # Create the row with proper spacing and symbols
            spaces = " " * spaces_count
            row_symbols = symbol * symbols_count
            row = spaces + row_symbols
            
            result.append(row)
        
        return "\n".join(result)


def main():
    """
    Main function to demonstrate the ASCII art generator.
    This provides a simple command-line interface to interact with the AsciiArt class.
    """
    ascii_art = AsciiArt()
    
    print("ASCII Art Generator")
    print("===================")
    
    while True:
        print("\nChoose a shape to draw:")
        print("1. Square")
        print("2. Rectangle")
        print("3. Parallelogram")
        print("4. Triangle")
        print("5. Pyramid")
        print("0. Exit")
        
        try:
            choice = int(input("Enter your choice (0-5): "))
            
            if choice == 0:
                print("Goodbye!")
                break
                
            if choice not in range(1, 6):
                print("Invalid choice. Please enter a number between 0 and 5.")
                continue
                
            symbol = input("Enter a single character to use for the shape: ")
            
            if choice == 1:  # Square
                width = int(input("Enter the side length: "))
                result = ascii_art.draw_square(width, symbol)
                
            elif choice == 2:  # Rectangle
                width = int(input("Enter the width: "))
                height = int(input("Enter the height: "))
                result = ascii_art.draw_rectangle(width, height, symbol)
                
            elif choice == 3:  # Parallelogram
                width = int(input("Enter the width: "))
                height = int(input("Enter the height: "))
                result = ascii_art.draw_parallelogram(width, height, symbol)
                
            elif choice == 4:  # Triangle
                width = int(input("Enter the width: "))
                height = int(input("Enter the height: "))
                result = ascii_art.draw_triangle(width, height, symbol)
                
            elif choice == 5:  # Pyramid
                height = int(input("Enter the height: "))
                result = ascii_art.draw_pyramid(height, symbol)
            
            # Display the result
            print("\nYour ASCII art:")
            print(result)
            
        except ValueError as e:
            print(f"Error: {e}")
        except TypeError as e:
            print(f"Error: {e}")
        
if __name__ == "__main__":
    main()
```

The code above implements the ASCII Art generator with the following features:

1. **Object-Oriented Design**: Implemented using a class with well-defined methods.
2. **Input Validation**: Thorough validation of width, height, and symbol parameters with appropriate error messages.
3. **Error Handling**: Uses appropriate exception types for different error conditions.
4. **Documentation**: Comprehensive docstrings for all methods and classes.
5. **Modularity**: Logic is separated into dedicated methods with a clear responsibility.
6. **Main Function**: Includes a demonstration interface to test the functionality.
7. **Code Quality**: Clear variable names, consistent formatting, and logical structure.

Each shape method returns a multi-line string that represents the ASCII art, which can be displayed in a console or saved to a file.