# ASCII Art Generator

I'll create a high-quality, console-based 2D ASCII Art application that adheres to ISO/IEC 25010 standards.

```python
"""
ASCII Art Generator

This module provides functionality to draw various ASCII art shapes.
Implements ISO/IEC 25010 software quality standards.
"""
from typing import TypeVar, Generic, Any


class InvalidSymbolError(ValueError):
    """Exception raised when an invalid symbol is provided."""
    pass


class InvalidDimensionError(ValueError):
    """Exception raised when an invalid dimension is provided."""
    pass


class AsciiArt:
    """
    A class for creating ASCII art shapes.
    
    This class implements various methods to draw ASCII art shapes
    like squares, rectangles, triangles, etc.
    """

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validates if the provided symbol is a single printable character.
        
        Args:
            symbol (str): The symbol to validate.
            
        Raises:
            InvalidSymbolError: If the symbol is not a single printable character.
        """
        if len(symbol) != 1:
            raise InvalidSymbolError("Symbol must be a single character")
        if symbol.isspace():
            raise InvalidSymbolError("Symbol cannot be a whitespace character")

    @staticmethod
    def _validate_dimension(dimension: int, name: str) -> None:
        """
        Validates if the provided dimension is positive.
        
        Args:
            dimension (int): The dimension to validate.
            name (str): The name of the dimension (for error messages).
            
        Raises:
            InvalidDimensionError: If the dimension is not positive.
            TypeError: If the dimension is not an integer.
        """
        if not isinstance(dimension, int):
            raise TypeError(f"{name} must be an integer")
        if dimension <= 0:
            raise InvalidDimensionError(f"{name} must be positive")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width using the given symbol.
        
        Args:
            width (int): The width of the square.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A string representing the ASCII art square.
            
        Raises:
            InvalidSymbolError: If the symbol is invalid.
            InvalidDimensionError: If the width is not positive.
        """
        self._validate_symbol(symbol)
        self._validate_dimension(width, "Width")
        
        # Draw a square (which is just a rectangle with equal sides)
        return self.draw_rectangle(width, width, symbol)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width and height using the given symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A string representing the ASCII art rectangle.
            
        Raises:
            InvalidSymbolError: If the symbol is invalid.
            InvalidDimensionError: If the width or height is not positive.
        """
        self._validate_symbol(symbol)
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        
        # Create a string of symbols with the specified width
        row = symbol * width
        
        # Join multiple rows to create a rectangle
        return '\n'.join(row for _ in range(height))

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width and height using the given symbol.
        
        The parallelogram grows diagonally to the right, with each row shifted by one space.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A string representing the ASCII art parallelogram.
            
        Raises:
            InvalidSymbolError: If the symbol is invalid.
            InvalidDimensionError: If the width or height is not positive.
        """
        self._validate_symbol(symbol)
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        
        result = []
        for i in range(height):
            # Add spaces for the diagonal shift
            spaces = ' ' * i
            # Add the symbols
            row = spaces + symbol * width
            result.append(row)
        
        return '\n'.join(result)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width and height using the given symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A string representing the ASCII art right-angled triangle.
            
        Raises:
            InvalidSymbolError: If the symbol is invalid.
            InvalidDimensionError: If the width or height is not positive.
        """
        self._validate_symbol(symbol)
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        
        result = []
        # Calculate the increment in width per row
        width_increment = width / height if height > 0 else 0
        
        for i in range(height):
            # Calculate the current width (number of symbols)
            current_width = int((i + 1) * width_increment)
            if current_width < 1:
                current_width = 1  # Ensure at least one symbol per row
            
            # Add the symbols for this row
            row = symbol * current_width
            result.append(row)
        
        return '\n'.join(result)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height using the given symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A string representing the ASCII art pyramid.
            
        Raises:
            InvalidSymbolError: If the symbol is invalid.
            InvalidDimensionError: If the height is not positive.
        """
        self._validate_symbol(symbol)
        self._validate_dimension(height, "Height")
        
        result = []
        for i in range(height):
            # Calculate spaces and symbols
            spaces = ' ' * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            
            # Combine spaces and symbols
            row = spaces + symbols
            result.append(row)
        
        return '\n'.join(result)


def main():
    """
    Main function to demonstrate the ASCII Art Generator.
    """
    ascii_art = AsciiArt()
    
    print("ASCII Art Generator")
    print("===================")
    
    while True:
        print("\nChoose a shape to draw:")
        print("1. Square")
        print("2. Rectangle")
        print("3. Parallelogram")
        print("4. Triangle (Right-angled)")
        print("5. Pyramid")
        print("6. Exit")
        
        choice = input("Enter your choice (1-6): ")
        
        if choice == '6':
            print("Exiting the program. Goodbye!")
            break
        
        try:
            symbol = input("Enter a symbol to use (single character): ")
            
            if choice == '1':
                width = int(input("Enter width: "))
                result = ascii_art.draw_square(width, symbol)
                
            elif choice == '2':
                width = int(input("Enter width: "))
                height = int(input("Enter height: "))
                result = ascii_art.draw_rectangle(width, height, symbol)
                
            elif choice == '3':
                width = int(input("Enter width: "))
                height = int(input("Enter height: "))
                result = ascii_art.draw_parallelogram(width, height, symbol)
                
            elif choice == '4':
                width = int(input("Enter width: "))
                height = int(input("Enter height: "))
                result = ascii_art.draw_triangle(width, height, symbol)
                
            elif choice == '5':
                height = int(input("Enter height: "))
                result = ascii_art.draw_pyramid(height, symbol)
                
            else:
                print("Invalid choice. Please enter a number between 1 and 6.")
                continue
                
            print("\nYour ASCII Art:")
            print(result)
            
        except (InvalidSymbolError, InvalidDimensionError, TypeError, ValueError) as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Design Explanation

This ASCII Art application follows ISO/IEC 25010 quality standards:

1. **Functionality**:
   - Implements five ASCII shape drawing functions with the required behavior
   - Provides proper input validation for symbols and dimensions

2. **Reliability**:
   - Includes comprehensive error handling with custom exceptions
   - Validates all inputs before processing

3. **Usability**:
   - Includes clear user interface text
   - Provides informative error messages

4. **Efficiency**:
   - Uses efficient algorithms for drawing shapes
   - Minimizes redundant computations

5. **Maintainability**:
   - Follows OOP principles with a well-structured AsciiArt class
   - Uses clear docstrings, variable names, and comments
   - Modular design separates concerns

6. **Portability**:
   - Uses standard Python without platform-specific dependencies

7. **Security**:
   - Validates all user input to prevent unexpected behavior
   - Implements custom exceptions for specific error cases

8. **Compatibility**:
   - Uses standard Python features for compatibility across environments

The code is designed to be extendable, allowing for easy addition of new shape types or customizations in the future.