# ASCII Art Generator

I'll create a high-quality, console-based 2D ASCII art generator that meets ISO/IEC 25010 requirements. Below is the implementation with a focus on OOP principles, proper validation, and clean code.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to draw various ASCII shapes such as squares,
    rectangles, triangles, etc., using a specified character symbol.
    """
    
    @staticmethod
    def _validate_input(width, height, symbol):
        """
        Validate input parameters for ASCII art generation.
        
        Args:
            width (int): The width of the shape.
            height (int, optional): The height of the shape. Defaults to None.
            symbol (str): The character to use for drawing.
            
        Raises:
            ValueError: If width or height is negative or zero.
            TypeError: If width or height is not an integer.
            ValueError: If symbol is not a single character or is whitespace.
        """
        # Validate width
        if not isinstance(width, int):
            raise TypeError("Width must be an integer")
        if width <= 0:
            raise ValueError("Width must be positive")
            
        # Validate height if provided
        if height is not None:
            if not isinstance(height, int):
                raise TypeError("Height must be an integer")
            if height <= 0:
                raise ValueError("Height must be positive")
        
        # Validate symbol
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace")
    
    def draw_square(self, width, symbol):
        """
        Draw a square with the specified width and symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the square.
            
        Raises:
            ValueError, TypeError: If inputs are invalid.
        """
        self._validate_input(width, None, symbol)
        
        # Create the square
        row = symbol * width
        square = '\n'.join([row for _ in range(width)])
        
        return square
    
    def draw_rectangle(self, width, height, symbol):
        """
        Draw a rectangle with the specified width, height, and symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the rectangle.
            
        Raises:
            ValueError, TypeError: If inputs are invalid.
        """
        self._validate_input(width, height, symbol)
        
        # Create the rectangle
        row = symbol * width
        rectangle = '\n'.join([row for _ in range(height)])
        
        return rectangle
    
    def draw_parallelogram(self, width, height, symbol):
        """
        Draw a parallelogram with the specified width, height, and symbol.
        
        The parallelogram grows diagonally to the right, starting from the top-left corner.
        Each row is shifted by one space to the right.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the parallelogram.
            
        Raises:
            ValueError, TypeError: If inputs are invalid.
        """
        self._validate_input(width, height, symbol)
        
        # Create the parallelogram
        parallelogram_lines = []
        for i in range(height):
            # Add spaces for the diagonal effect, then add symbols
            parallelogram_lines.append(' ' * i + symbol * width)
            
        return '\n'.join(parallelogram_lines)
    
    def draw_triangle(self, width, height, symbol):
        """
        Draw a right-angled triangle with the specified width, height, and symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The maximum width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the triangle.
            
        Raises:
            ValueError, TypeError: If inputs are invalid.
        """
        self._validate_input(width, height, symbol)
        
        # Create the triangle
        triangle_lines = []
        for i in range(height):
            # Calculate symbols per row (proportional to height)
            symbols_count = max(1, int(width * (i + 1) / height))
            triangle_lines.append(symbol * symbols_count)
            
        return '\n'.join(triangle_lines)
    
    def draw_pyramid(self, height, symbol):
        """
        Draw a symmetrical pyramid with the specified height and symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the pyramid.
            
        Raises:
            ValueError, TypeError: If inputs are invalid.
        """
        self._validate_input(height, None, symbol)
        
        # Create the pyramid
        pyramid_lines = []
        for i in range(height):
            # Calculate spaces and symbols for each row
            spaces = ' ' * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            pyramid_lines.append(spaces + symbols)
            
        return '\n'.join(pyramid_lines)


def main():
    """
    Main function to demonstrate the ASCII art generator.
    """
    ascii_art = AsciiArt()
    
    print("\n=== ASCII Art Generator ===\n")
    
    try:
        # Display a menu and examples
        print("1. Square")
        print("Example:")
        print(ascii_art.draw_square(4, "*"))
        
        print("\n2. Rectangle")
        print("Example:")
        print(ascii_art.draw_rectangle(6, 3, "#"))
        
        print("\n3. Parallelogram")
        print("Example:")
        print(ascii_art.draw_parallelogram(5, 3, "@"))
        
        print("\n4. Right Triangle")
        print("Example:")
        print(ascii_art.draw_triangle(5, 5, "+"))
        
        print("\n5. Pyramid")
        print("Example:")
        print(ascii_art.draw_pyramid(4, "^"))
        
        # Get user input for custom art
        print("\nCreate your own ASCII art:")
        choice = int(input("Enter choice (1-5): "))
        symbol = input("Enter symbol (single character): ")
        
        if choice == 1:
            width = int(input("Enter width: "))
            print(ascii_art.draw_square(width, symbol))
        elif choice == 2:
            width = int(input("Enter width: "))
            height = int(input("Enter height: "))
            print(ascii_art.draw_rectangle(width, height, symbol))
        elif choice == 3:
            width = int(input("Enter width: "))
            height = int(input("Enter height: "))
            print(ascii_art.draw_parallelogram(width, height, symbol))
        elif choice == 4:
            width = int(input("Enter width: "))
            height = int(input("Enter height: "))
            print(ascii_art.draw_triangle(width, height, symbol))
        elif choice == 5:
            height = int(input("Enter height: "))
            print(ascii_art.draw_pyramid(height, symbol))
        else:
            print("Invalid choice!")
            
    except (ValueError, TypeError) as e:
        print(f"Error: {str(e)}")


if __name__ == "__main__":
    main()
```

## Key Features

1. **Object-Oriented Design**: Implemented using a class-based approach with clearly defined methods.

2. **Comprehensive Input Validation**:
   - Checks for negative/zero dimensions
   - Validates symbol is a single character and not whitespace
   - Uses proper exception types (ValueError, TypeError)

3. **Documentation**:
   - Detailed docstrings for all methods
   - Clear parameter and return type descriptions
   - Exception documentation

4. **User Interface**:
   - Interactive console menu
   - Example outputs for each shape
   - Error handling for user input

5. **Code Quality**:
   - Follows consistent naming conventions
   - Uses helper methods to reduce code duplication
   - Maintains separation of concerns

6. **Security**:
   - Validates all input to prevent malicious or invalid inputs

This implementation meets all the specified requirements and adheres to software quality standards defined in ISO/IEC 25010.