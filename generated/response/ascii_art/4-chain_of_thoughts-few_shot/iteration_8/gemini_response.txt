Okay, let's break this down step by step and build the Python code for the ASCII art application, adhering to all requirements and the ISO/IEC 25010 quality characteristics.

**Step 1: Overall Structure and Class Definition**

We'll define an `AsciiArt` class to encapsulate all the drawing functions. This promotes modularity and maintainability.  We'll use docstrings extensively for documentation and clear, descriptive variable names.

**Step 2: Input Validation**

We'll implement input validation within each drawing function to handle:

*   **Multi-character symbols:** Ensure the symbol is only one character.
*   **Whitespace symbols:** Prevent using spaces or other whitespace as symbols.
*   **Negative or zero width/height:**  Ensure dimensions are positive integers.
*   **Type validation:** Ensure that width, height and symbol parameters have correct types.

We'll use built-in Python exceptions like `ValueError` and `TypeError` for appropriate error handling.

**Step 3:  Drawing Logic (Efficient Algorithms)**

We'll use efficient algorithms for each shape.  For strings, we'll primarily use string multiplication and concatenation, which are generally quite efficient in Python. We'll avoid unnecessary loops or complex data structures where simpler string operations suffice.

**Step 4:  Return Values**

Each function will return a multi-line string representing the drawn shape.

**Step 5: Code Formatting and Quality**

We will follow PEP 8 guidelines for code style (though we don't need to explicitly enforce 79-character line limits here). We'll use meaningful comments to explain non-obvious logic.

**Here's the complete Python code:**

```python
class AsciiArt:
    """
    A class for generating various ASCII art shapes.
    """

    def _validate_input(self, width: int, height: int, symbol: str, is_pyramid: bool = False) -> None:
        """Validates common input parameters for drawing functions."""
        if not isinstance(width, int):
            raise TypeError("Width must be an integer.")
        if not is_pyramid:
            if not isinstance(height, int):
                raise TypeError("Height must be an integer.")
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
        if width <= 0:
            raise ValueError("Width must be a positive integer.")
        if not is_pyramid:
            if height <= 0:
                raise ValueError("Height must be a positive integer.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of the given width filled with the specified symbol.

        Args:
            width (int): The width of the square.
            symbol (str): The character to use for drawing the square.

        Returns:
            str: A multi-line string representing the square.

        Raises:
            TypeError: If width is not an integer or symbol is not a string
            ValueError: If symbol is not a single character, is whitespace,
                        or if width is not positive.
        """

        self._validate_input(width, 1, symbol)  # height is irrelevant for square, use dummy value.
        return (symbol * width + '\n') * width

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle of the given width and height, filled with the symbol.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing.

        Returns:
            str: A multi-line string representing the rectangle.

        Raises:
            TypeError: If width/height are not integers or symbol is not a string
            ValueError: If symbol is invalid, or dimensions are not positive.
        """
        self._validate_input(width, height, symbol)
        return (symbol * width + '\n') * height

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing.

        Returns:
            str: A multi-line string representing the parallelogram.

        Raises:
            TypeError: If width/height are not integers or symbol is not a string
            ValueError: If symbol is invalid, or dimensions are not positive.
        """
        self._validate_input(width, height, symbol)
        result = ""
        for i in range(height):
            result += " " * i + symbol * width + "\n"
        return result

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.

        Args:
            width (int): The width of the triangle's base.
            height (int): The height of the triangle.
            symbol (str): The character to use.

        Returns:
            str: A multi-line string representing the triangle.

        Raises:
            TypeError: If width/height are not integers or symbol is not a string
            ValueError: If symbol is invalid, or dimensions are not positive.
        """
        self._validate_input(width, height, symbol)
        if width != height:
            raise ValueError("Width and height must be equal for a right-angled triangle.")
        result = ""
        for i in range(1, height + 1):
            result += symbol * i + "\n"
        return result
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid.

        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use.

        Returns:
            str: A multi-line string representing the pyramid.

        Raises:
            TypeError: If height is not an integer or symbol is not a string
            ValueError: If symbol is invalid, or height is not positive.
        """
        self._validate_input(width=1, height=height, symbol=symbol, is_pyramid=True)  # width is not required
        if not isinstance(height, int):
            raise TypeError("Height must be an integer.")
        if height <= 0:
            raise ValueError("Height must be positive")

        result = ""
        for i in range(1, height + 1):
            spaces = " " * (height - i)
            symbols = symbol * (2 * i - 1)
            result += spaces + symbols + "\n"
        return result

# Example Usage (and basic testing)
if __name__ == "__main__":
    art = AsciiArt()

    try:
        print("Square:")
        print(art.draw_square(5, "*"))

        print("\nRectangle:")
        print(art.draw_rectangle(7, 3, "#"))

        print("\nParallelogram:")
        print(art.draw_parallelogram(6, 4, "@"))

        print("\nTriangle:")
        print(art.draw_triangle(4, 4, "+"))

        print("\nPyramid:")
        print(art.draw_pyramid(5, "X"))

        # Example of invalid input (uncomment to test error handling)
        # print("\nInvalid Square (negative width):")
        # print(art.draw_square(-5, "*"))  # Raises ValueError

        # print("\nInvalid Rectangle (multi-char symbol):")
        # print(art.draw_rectangle(4, 2, "##"))   #Raises ValueError
        
        # print("\nInvalid Rectangle (width is not int):")
        # print(art.draw_rectangle("4", 2, "#"))   #Raises TypeError

    except ValueError as e:
        print(f"Error: {e}")
    except TypeError as e:
        print(f"Error: {e}")
```

Key Improvements and Explanations:

*   **`_validate_input` Method:**  This private method centralizes input validation, reducing code duplication across the drawing functions.  This improves maintainability and consistency.
*   **Type Hints:**  Type hints (`width: int`, `symbol: str`, etc.) are used throughout, enhancing readability and enabling static analysis tools to catch potential type errors.
*   **Docstrings:**  Comprehensive docstrings explain the purpose of each function, its parameters, return values, and potential exceptions. This is crucial for documentation and maintainability.
*   **Error Handling:**  `ValueError` and `TypeError` are used appropriately to signal incorrect input.  Error messages are clear and informative.
*   **Efficiency:** String operations are used efficiently. For instance, `(symbol * width + '\n') * height` is a concise and fast way to create the rectangular shapes.
*   **Object-Oriented Design:** The `AsciiArt` class encapsulates the functionality, promoting modularity and allowing for potential future extensions (e.g., adding more shapes or drawing methods).
*   **Main Block (`if __name__ == "__main__":`)**:  This allows the code to be both run as a script and imported as a module without the example code automatically executing.  It also includes basic testing and demonstrates how to handle potential exceptions.
*    **Triangle validation:** Additional validation for the `draw_triangle` to check equality between *width* and *height*.

This improved code addresses all the requirements, adheres to good coding practices, and aligns with the principles of ISO/IEC 25010 regarding functionality, reliability, usability, efficiency, maintainability, and portability. It's also significantly more robust and easier to understand than a less structured approach.
