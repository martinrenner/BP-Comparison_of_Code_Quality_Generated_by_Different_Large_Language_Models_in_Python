```python
import math


class AsciiArt:
    """
    A class to generate ASCII art shapes.

    This class provides methods for drawing several 2D shapes filled with a user-selected symbol:
    - Square
    - Rectangle
    - Parallelogram
    - Right-angled Triangle
    - Symmetrical Pyramid

    Each method returns a multi-line string representing the respective ASCII art shape.

    All input parameters are validated to ensure they meet the criteria:
        • Dimensions (width and height) must be positive integers.
        • The drawing symbol must be a single non-whitespace character.
    """

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validates that the symbol is a single non-whitespace character.

        Args:
            symbol (str): The character used to fill the shape.

        Raises:
            ValueError: If symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validates that a given dimension is a positive integer.

        Args:
            value (int): The value of the dimension.
            name (str): The name of the dimension (for error messages).

        Raises:
            ValueError: If the dimension is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of the specified width using the provided symbol.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): A single character to fill the square.

        Returns:
            str: A multi-line string representing the ASCII square.

        Raises:
            ValueError: If width is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_symbol(symbol)

        # Create each row of the square and join them with newlines.
        rows = [symbol * width for _ in range(width)]
        return "\n".join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle using the specified width and height.

        Args:
            width (int): The number of characters in each row.
            height (int): The number of rows.
            symbol (str): A single character to fill the rectangle.

        Returns:
            str: A multi-line string representing the ASCII rectangle.

        Raises:
            ValueError: If width or height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        rows = [symbol * width for _ in range(height)]
        return "\n".join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram that shifts to the right each row.

        Each row starts with an increasing number of spaces (starting with zero) 
        followed by the drawing symbol repeated to form the shape.

        Args:
            width (int): The number of symbols per row.
            height (int): The number of rows.
            symbol (str): A single character to fill the parallelogram.

        Returns:
            str: A multi-line string representing the ASCII parallelogram.

        Raises:
            ValueError: If width or height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        rows = [(" " * i) + (symbol * width) for i in range(height)]
        return "\n".join(rows)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle that grows diagonally to the right.

        The triangle is constructed so that:
            - It has 'height' rows.
            - The base (last row) has exactly 'width' symbols.
            - The number of symbols in each row is determined
              using a proportional scaling based on the row index.

        Args:
            width (int): The number of symbols in the base of the triangle.
            height (int): The number of rows in the triangle.
            symbol (str): A single character to fill the triangle.

        Returns:
            str: A multi-line string representing the ASCII right-angled triangle.

        Raises:
            ValueError: If width or height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Compute the number of symbols for the current row.
            # Ensure that the triangle grows and that the last row has exactly 'width' symbols.
            num_symbols = math.ceil((i + 1) * width / height)
            num_symbols = max(1, num_symbols)  # Ensure at least one symbol per row.
            rows.append(symbol * num_symbols)
        return "\n".join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid of the specified height.

        The pyramid has a base width of (2 * height - 1); each row is centered.

        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): A single character to fill the pyramid.

        Returns:
            str: A multi-line string representing the ASCII pyramid.

        Raises:
            ValueError: If height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Calculate the number of spaces for left-padding (to center the pyramid)
            spaces = " " * (height - i - 1)
            # Each row contains an odd number of symbols: 2*i + 1
            symbols_in_row = symbol * (2 * i + 1)
            rows.append(spaces + symbols_in_row)
        return "\n".join(rows)


def main():
    """
    Starts the console-based ASCII Art application.

    The user can select a shape, provide dimensions and a drawing symbol,
    and view the generated ASCII art.
    """
    art = AsciiArt()

    menu = (
        "\nSelect a shape to draw:\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Triangle (right-angled)\n"
        "5. Pyramid\n"
        "6. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice (1-6): ").strip()
        if choice == '6':
            print("Exiting...")
            break

        try:
            if choice == '1':
                width = int(input("Enter width for the square: "))
                symbol = input("Enter the symbol to use: ")
                art_str = art.draw_square(width, symbol)
            elif choice == '2':
                width = int(input("Enter width for the rectangle: "))
                height = int(input("Enter height for the rectangle: "))
                symbol = input("Enter the symbol to use: ")
                art_str = art.draw_rectangle(width, height, symbol)
            elif choice == '3':
                width = int(input("Enter width for the parallelogram: "))
                height = int(input("Enter height for the parallelogram: "))
                symbol = input("Enter the symbol to use: ")
                art_str = art.draw_parallelogram(width, height, symbol)
            elif choice == '4':
                width = int(input("Enter the base width for the triangle: "))
                height = int(input("Enter height for the triangle: "))
                symbol = input("Enter the symbol to use: ")
                art_str = art.draw_triangle(width, height, symbol)
            elif choice == '5':
                height = int(input("Enter height for the pyramid: "))
                symbol = input("Enter the symbol to use: ")
                art_str = art.draw_pyramid(height, symbol)
            else:
                print("Invalid choice. Please select a number between 1 and 6.")
                continue

            print("\n" + art_str + "\n")
        except ValueError as ve:
            print(f"Error: {ve}")


if __name__ == "__main__":
    main()
```