# ASCII Art Generator

I'll create a high-quality Python console application for generating ASCII art shapes that meets ISO/IEC 25010 requirements.

```python
class AsciiArt:
    """
    A class for creating ASCII art shapes.
    
    This class provides methods to draw various ASCII art shapes with 
    customizable dimensions and characters.
    """

    @staticmethod
    def _validate_input(width: int, height: int, symbol: str) -> None:
        """
        Validates the inputs for all drawing methods.
        
        Args:
            width (int): The width of the shape.
            height (int): The height of the shape.
            symbol (str): The character to use for drawing.
            
        Raises:
            ValueError: If the input parameters are invalid.
            TypeError: If the input types are incorrect.
        """
        # Validate types
        if not isinstance(width, int):
            raise TypeError("Width must be an integer.")
        if not isinstance(height, int):
            raise TypeError("Height must be an integer.")
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
            
        # Validate values
        if width <= 0:
            raise ValueError("Width must be a positive integer.")
        if height <= 0:
            raise ValueError("Height must be a positive integer.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square ASCII art shape.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the ASCII art square.
            
        Raises:
            ValueError: If the input parameters are invalid.
            TypeError: If the input types are incorrect.
        """
        self._validate_input(width, width, symbol)
        
        # Create a square by repeating the symbol
        rows = [symbol * width for _ in range(width)]
        return '\n'.join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangular ASCII art shape.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the ASCII art rectangle.
            
        Raises:
            ValueError: If the input parameters are invalid.
            TypeError: If the input types are incorrect.
        """
        self._validate_input(width, height, symbol)
        
        # Create a rectangle by repeating the symbol
        rows = [symbol * width for _ in range(height)]
        return '\n'.join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram ASCII art shape.
        
        The parallelogram grows diagonally to the right, starting from 
        the top-left corner, with each row shifted by one space.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the ASCII art parallelogram.
            
        Raises:
            ValueError: If the input parameters are invalid.
            TypeError: If the input types are incorrect.
        """
        self._validate_input(width, height, symbol)
        
        # Create a parallelogram by shifting each row
        rows = []
        for i in range(height):
            rows.append(' ' * i + symbol * width)
        return '\n'.join(rows)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle ASCII art shape.
        
        The triangle grows diagonally to the right, starting from 
        the top-left corner.
        
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the ASCII art triangle.
            
        Raises:
            ValueError: If the input parameters are invalid.
            TypeError: If the input types are incorrect.
        """
        self._validate_input(width, height, symbol)

        # Create a right-angled triangle
        rows = []
        for i in range(height):
            # Calculate how many symbols to print in this row
            symbols_count = max(1, int((i + 1) * width / height))
            rows.append(symbol * symbols_count)
        return '\n'.join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid ASCII art shape.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the ASCII art pyramid.
            
        Raises:
            ValueError: If the input parameters are invalid.
            TypeError: If the input types are incorrect.
        """
        # Using a width of 2*height-1 to ensure valid aspect ratio 
        # for a symmetrical pyramid
        self._validate_input(2 * height - 1, height, symbol)
        
        rows = []
        for i in range(height):
            # Calculate number of symbols and spaces for this row
            symbols_count = 2 * i + 1
            spaces_count = height - i - 1
            
            # Build the row: spaces on both sides with symbols in the middle
            row = ' ' * spaces_count + symbol * symbols_count
            rows.append(row)
        
        return '\n'.join(rows)


def main() -> None:
    """
    Main function to demonstrate the ASCII art functionality.
    
    This function provides a simple console interface for drawing ASCII art shapes.
    """
    ascii_art = AsciiArt()
    
    print("Welcome to ASCII Art Generator!")
    print("===============================")
    
    while True:
        print("\nAvailable shapes:")
        print("1. Square")
        print("2. Rectangle")
        print("3. Parallelogram")
        print("4. Triangle (Right-angled)")
        print("5. Pyramid")
        print("0. Exit")
        
        try:
            choice = int(input("\nEnter your choice (0-5): "))
            
            if choice == 0:
                print("Thank you for using ASCII Art Generator!")
                break
            
            symbol = input("Enter the symbol to use (single character): ")
            
            if choice == 1:
                width = int(input("Enter the width of the square: "))
                result = ascii_art.draw_square(width, symbol)
            elif choice == 2:
                width = int(input("Enter the width of the rectangle: "))
                height = int(input("Enter the height of the rectangle: "))
                result = ascii_art.draw_rectangle(width, height, symbol)
            elif choice == 3:
                width = int(input("Enter the width of the parallelogram: "))
                height = int(input("Enter the height of the parallelogram: "))
                result = ascii_art.draw_parallelogram(width, height, symbol)
            elif choice == 4:
                width = int(input("Enter the width of the triangle: "))
                height = int(input("Enter the height of the triangle: "))
                result = ascii_art.draw_triangle(width, height, symbol)
            elif choice == 5:
                height = int(input("Enter the height of the pyramid: "))
                result = ascii_art.draw_pyramid(height, symbol)
            else:
                print("Invalid choice. Please try again.")
                continue
            
            print("\nYour ASCII art:")
            print(result)
            
        except ValueError as e:
            print(f"Error: {e}")
        except TypeError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")


if __name__ == "__main__":
    main()
```

## Implementation Details

This implementation:

1. **Object-Oriented Design**: Uses a class-based approach with the `AsciiArt` class.

2. **Input Validation**: Includes a reusable validation method that checks:
   - Type validation
   - Value validation (positive numbers)
   - Symbol validation (single character, non-whitespace)

3. **Error Handling**: Uses appropriate error types (TypeError, ValueError) with descriptive error messages.

4. **Documentation**: Includes comprehensive docstrings with argument descriptions and return value information.

5. **Clean Implementation**: Each shape-drawing function follows a consistent pattern.

6. **User Interface**: Includes a `main()` function with appropriate error handling.

7. **Performance**: Uses efficient algorithms for creating each shape.

8. **Security**: Validates all user input to prevent unexpected behavior.

The implementation follows all the requirements in the prompt, providing a clean, maintainable, and well-documented solution for generating ASCII art shapes.