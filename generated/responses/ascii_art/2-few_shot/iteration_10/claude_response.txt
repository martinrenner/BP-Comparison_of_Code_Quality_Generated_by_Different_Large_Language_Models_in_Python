# ASCII Art Generator

I'll create a console-based 2D ASCII Art application that follows the ISO/IEC 25010 requirements. The implementation will include all the requested shape drawing functionality with proper validation and error handling.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to create various ASCII art shapes
    like squares, rectangles, parallelograms, triangles, and pyramids.
    Each shape is filled with a user-specified symbol.
    """
    
    @staticmethod
    def _validate_input(width: int, height: int, symbol: str) -> None:
        """
        Validates the input parameters for all drawing functions.
        
        Args:
            width (int): The width of the shape.
            height (int): The height of the shape.
            symbol (str): The character to use for drawing.
            
        Raises:
            ValueError: If width or height is negative, or if symbol is not a single character.
            TypeError: If width or height is not an integer.
        """
        # Validate width and height
        if not isinstance(width, int):
            raise TypeError("Width must be an integer.")
        if height is not None and not isinstance(height, int):
            raise TypeError("Height must be an integer.")
        
        if width <= 0:
            raise ValueError("Width must be a positive integer.")
        if height is not None and height <= 0:
            raise ValueError("Height must be a positive integer.")
        
        # Validate symbol
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width and symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the square.
            
        Raises:
            ValueError: If width is negative, or if symbol is not a single character.
            TypeError: If width is not an integer.
        """
        self._validate_input(width, width, symbol)
        
        # Create the square
        row = symbol * width
        square = [row for _ in range(width)]
        return '\n'.join(square)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width, height, and symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the rectangle.
            
        Raises:
            ValueError: If width or height is negative, or if symbol is not a single character.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(width, height, symbol)
        
        # Create the rectangle
        row = symbol * width
        rectangle = [row for _ in range(height)]
        return '\n'.join(rectangle)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width, height, and symbol.
        
        The parallelogram grows diagonally to the right, starting from
        the top-left corner with each row shifted by one space.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the parallelogram.
            
        Raises:
            ValueError: If width or height is negative, or if symbol is not a single character.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(width, height, symbol)
        
        # Create the parallelogram
        parallelogram = []
        for i in range(height):
            # Add i spaces before each row to create the diagonal effect
            row = " " * i + symbol * width
            parallelogram.append(row)
        
        return '\n'.join(parallelogram)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width, height, and symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The maximum width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the triangle.
            
        Raises:
            ValueError: If width or height is negative, or if symbol is not a single character.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(width, height, symbol)
        
        # Create the triangle
        triangle = []
        for i in range(1, height + 1):
            # Calculate how many symbols to draw in this row
            symbols_in_row = min(i, width)
            row = symbol * symbols_in_row
            triangle.append(row)
        
        return '\n'.join(triangle)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height and symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the pyramid.
            
        Raises:
            ValueError: If height is negative, or if symbol is not a single character.
            TypeError: If height is not an integer.
        """
        self._validate_input(height, height, symbol)
        
        # Create the pyramid
        pyramid = []
        width = 2 * height - 1  # Maximum width of the pyramid
        
        for i in range(1, height + 1):
            # Calculate number of symbols and spaces for this row
            num_symbols = 2 * i - 1
            num_spaces = (width - num_symbols) // 2
            
            # Create the row with correct spacing
            row = " " * num_spaces + symbol * num_symbols
            pyramid.append(row)
        
        return '\n'.join(pyramid)


def main():
    """
    Main function to demonstrate the ASCII art generator.
    """
    ascii_art = AsciiArt()
    
    print("ASCII Art Generator")
    print("===================")
    
    try:
        # Example demonstrations
        print("\nSquare (5x5, '#'):")
        print(ascii_art.draw_square(5, "#"))
        
        print("\nRectangle (8x4, '*'):")
        print(ascii_art.draw_rectangle(8, 4, "*"))
        
        print("\nParallelogram (6x3, '@'):")
        print(ascii_art.draw_parallelogram(6, 3, "@"))
        
        print("\nTriangle (5x5, '+'):")
        print(ascii_art.draw_triangle(5, 5, "+"))
        
        print("\nPyramid (4, '&'):")
        print(ascii_art.draw_pyramid(4, "&"))
        
    except (ValueError, TypeError) as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

This implementation includes:

1. A well-structured `AsciiArt` class with methods for drawing different shapes
2. Comprehensive input validation that handles:
   - Negative dimensions
   - Non-integer dimensions
   - Multi-character symbols
   - Whitespace symbols
3. Detailed docstrings for each method
4. Clean, efficient implementations of each drawing function
5. A main function demonstrating the usage of the class
6. Error handling for all potential exceptions

The code follows OOP principles, implements the required interface, and meets all the specified requirements for code quality, including correctness, performance, modularity, security, testability, and documentation.