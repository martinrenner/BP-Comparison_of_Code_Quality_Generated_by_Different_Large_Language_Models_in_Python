```python
class AsciiArt:
    """
    A class for generating 2D ASCII art shapes.

    This class implements methods to draw common
    shapes: square, rectangle, parallelogram, right-angled triangle,
    and symmetrical pyramid. Each shape is fully filled with a user-provided symbol.

    Methods:
        draw_square(width: int, symbol: str) -> str
        draw_rectangle(width: int, height: int, symbol: str) -> str
        draw_parallelogram(width: int, height: int, symbol: str) -> str
        draw_triangle(width: int, height: int, symbol: str) -> str
        draw_pyramid(height: int, symbol: str) -> str
    """

    @staticmethod
    def _validate_dimensions(value: int, name: str) -> None:
        """
        Validates that a dimension is a positive integer.

        Args:
            value (int): The dimension (width or height).
            name (str): The name of the dimension (for error messages).

        Raises:
            ValueError: If the provided dimension is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validates that the symbol is a single, non-whitespace character.

        Args:
            symbol (str): The character to use for drawing.

        Raises:
            ValueError: If symbol is not exactly one non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a completely filled square using the provided symbol.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): The symbol to fill the square.

        Returns:
            str: A multi-line string representing the square.
        """
        self._validate_dimensions(width, "Width")
        self._validate_symbol(symbol)

        rows = []
        for _ in range(width):
            rows.append(symbol * width)
        return "\n".join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled rectangle using the provided symbol.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to fill the rectangle.

        Returns:
            str: A multi-line string representing the rectangle.
        """
        self._validate_dimensions(width, "Width")
        self._validate_dimensions(height, "Height")
        self._validate_symbol(symbol)

        rows = []
        for _ in range(height):
            rows.append(symbol * width)
        return "\n".join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled parallelogram using the provided symbol.
        Each row is shifted one space to the right to simulate a diagonal growth
        starting from the top-left corner.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The symbol to fill the shape.

        Returns:
            str: A multi-line string representing the parallelogram.
        """
        self._validate_dimensions(width, "Width")
        self._validate_dimensions(height, "Height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Each row is prefixed with i spaces to produce a diagonal shift.
            rows.append(" " * i + symbol * width)
        return "\n".join(rows)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled right-angled triangle with the right angle at the top-left corner.
        Each subsequent row is indented by one additional space, and the number of symbols decreases
        by one from the previous row.

        Note:
            To form a proper triangle with a visible right angle at the top-left, the provided width
            must be greater than or equal to the height.

        Args:
            width (int): The number of symbols in the first (top) row.
            height (int): The number of rows in the triangle.
            symbol (str): The symbol to fill the triangle.

        Returns:
            str: A multi-line string representing the right-angled triangle.

        Raises:
            ValueError: If width is less than height.
        """
        self._validate_dimensions(width, "Width")
        self._validate_dimensions(height, "Height")
        self._validate_symbol(symbol)

        if width < height:
            raise ValueError("For a right-angled triangle with the right angle at the top-left, "
                             "width must be at least equal to height.")

        rows = []
        for i in range(height):
            # Each row is indented by i spaces.
            # The first row has 'width' symbols; each subsequent row has one fewer symbol.
            rows.append(" " * i + symbol * (width - i))
        return "\n".join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a completely filled symmetrical pyramid using the provided symbol.
        The pyramid is centered and its base has a width of (2 * height - 1) symbols.

        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to fill the pyramid.

        Returns:
            str: A multi-line string representing the pyramid.
        """
        self._validate_dimensions(height, "Height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Calculate the number of symbols (always an odd number: 1, 3, 5, ...)
            num_symbols = 2 * i + 1
            # Calculate the number of leading spaces to center the pyramid horizontally.
            spaces = height - i - 1
            rows.append(" " * spaces + symbol * num_symbols)
        return "\n".join(rows)


if __name__ == '__main__':
    # Demonstration and simple tests for the AsciiArt class.
    art = AsciiArt()
    
    try:
        print("Square (width = 4, symbol = '#'):")
        print(art.draw_square(4, '#'))
        print("\nRectangle (width = 6, height = 3, symbol = '*'):")
        print(art.draw_rectangle(6, 3, '*'))
        print("\nParallelogram (width = 5, height = 4, symbol = '@'):")
        print(art.draw_parallelogram(5, 4, '@'))
        print("\nRight-angled Triangle (width = 5, height = 3, symbol = '%'):")
        print(art.draw_triangle(5, 3, '%'))
        print("\nPyramid (height = 4, symbol = '^'):")
        print(art.draw_pyramid(4, '^'))
    except ValueError as error:
        print("Error:", error)
```