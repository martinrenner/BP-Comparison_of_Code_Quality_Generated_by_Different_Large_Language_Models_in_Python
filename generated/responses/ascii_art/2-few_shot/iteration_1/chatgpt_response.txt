```python
import math


class AsciiArt:
    """
    A class for generating console-based 2D ASCII art shapes.
    
    The class implements functions for drawing various filled ASCII shapes:
      - Square
      - Rectangle
      - Parallelogram (with diagonal shift)
      - Right-angled triangle (with size scaling)
      - Symmetrical pyramid
    """

    @staticmethod
    def _validate_dimension(value: int, name: str) -> None:
        """
        Validates that a dimension (width or height) is a positive integer.
        
        Args:
            value (int): The dimension value to validate.
            name (str): The name of the dimension (for error messages).
            
        Raises:
            ValueError: If the value is not an integer or is less than or equal to zero.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validates that the symbol is a single, non-whitespace character.
        
        Args:
            symbol (str): The symbol to validate.
            
        Raises:
            ValueError: If the symbol is not a single character or is a whitespace.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single, non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a completely filled ASCII square.
        
        Args:
            width (int): The side length of the square.
            symbol (str): The character used to fill the square.
        
        Returns:
            str: A multi-line string representing the ASCII square.
        
        Raises:
            ValueError: If width is not a positive integer or symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_symbol(symbol)
        
        # Create a list of identical lines, each with the symbol repeated 'width' times.
        square_lines = [symbol * width for _ in range(width)]
        return "\n".join(square_lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled ASCII rectangle.
        
        Args:
            width (int): The number of characters in each row.
            height (int): The number of rows.
            symbol (str): The character used to fill the rectangle.
        
        Returns:
            str: A multi-line string representing the ASCII rectangle.
        
        Raises:
            ValueError: If width or height is not a positive integer or symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        
        rectangle_lines = [symbol * width for _ in range(height)]
        return "\n".join(rectangle_lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled ASCII parallelogram that shifts one space to the right each row.
        
        Args:
            width (int): The number of characters in each row.
            height (int): The number of rows.
            symbol (str): The character used to fill the parallelogram.
        
        Returns:
            str: A multi-line string representing the ASCII parallelogram.
        
        Raises:
            ValueError: If width or height is not a positive integer or symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        
        lines = []
        for i in range(height):
            # Each row is shifted i spaces to the right
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled right-angled ASCII triangle that grows diagonally 
        from the top-left corner.
        
        The base of the triangle is of length 'width' and the triangle has 'height' rows.
        For each row (except the last), the number of symbols is calculated such that it
        scales linearly between 1 and 'width'. The last row is forced to have exactly 'width' symbols.
        
        Args:
            width (int): The number of symbols on the base (last row) of the triangle.
            height (int): The number of rows of the triangle.
            symbol (str): The character used to fill the triangle.
        
        Returns:
            str: A multi-line string representing the ASCII triangle.
        
        Raises:
            ValueError: If width or height is not a positive integer or symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        
        lines = []
        for i in range(height):
            if i == height - 1:
                num_symbols = width  # Ensure the last row has exactly 'width' symbols.
            else:
                # Calculate the number of symbols using a linear scale.
                num_symbols = max(1, math.ceil((i + 1) * width / height))
            lines.append(symbol * num_symbols)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a completely filled symmetrical ASCII pyramid.
        
        Each row i (0-indexed) has (2*i + 1) symbols, with leading spaces to ensure the pyramid is centered.
        
        Args:
            height (int): The number of rows of the pyramid.
            symbol (str): The character used to fill the pyramid.
        
        Returns:
            str: A multi-line string representing the ASCII pyramid.
        
        Raises:
            ValueError: If height is not a positive integer or symbol is invalid.
        """
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        
        lines = []
        for i in range(height):
            num_symbols = 2 * i + 1
            num_spaces = height - i - 1
            line = " " * num_spaces + symbol * num_symbols
            lines.append(line)
        return "\n".join(lines)


if __name__ == "__main__":
    # Example usage and basic testing of the AsciiArt class.
    art = AsciiArt()

    try:
        print("Square (width=5):")
        print(art.draw_square(5, "#"))
        print("\nRectangle (width=10, height=4):")
        print(art.draw_rectangle(10, 4, "*"))
        print("\nParallelogram (width=8, height=5):")
        print(art.draw_parallelogram(8, 5, "@"))
        print("\nRight-angled Triangle (width=10, height=5):")
        print(art.draw_triangle(10, 5, "$"))
        print("\nPyramid (height=5):")
        print(art.draw_pyramid(5, "%"))
    except ValueError as ve:
        print("Input error:", ve)
```