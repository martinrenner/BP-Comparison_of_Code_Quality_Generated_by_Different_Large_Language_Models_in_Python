```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.

    This class provides methods to draw various shapes like squares, rectangles,
    parallelograms, triangles, and pyramids using a specified symbol.
    """

    def _validate_input(self, symbol: str):
        """
        Validates the input symbol.

        Args:
            symbol (str): The symbol to use for drawing.

        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of the specified width using the specified symbol.

        Args:
            width (int): The width of the square.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the ASCII art square.

        Raises:
            ValueError: If width is negative or symbol is invalid.
        """
        self._validate_input(symbol)
        if width < 0:
            raise ValueError("Width cannot be negative.")

        return "\n".join([symbol * width for _ in range(width)])

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle of the specified width and height using the specified symbol.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the ASCII art rectangle.

        Raises:
            ValueError: If width or height is negative or symbol is invalid.
        """
        self._validate_input(symbol)
        if width < 0 or height < 0:
            raise ValueError("Width and height cannot be negative.")

        return "\n".join([symbol * width for _ in range(height)])

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram of the specified width and height.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the ASCII art parallelogram.

        Raises:
            ValueError: If width or height is negative or symbol is invalid.
        """
        self._validate_input(symbol)
        if width < 0 or height < 0:
            raise ValueError("Width and height cannot be negative.")

        result = []
        for i in range(height):
            result.append(" " * i + symbol * width)
        return "\n".join(result)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.

        Args:
            width (int): The width.
            height (int): The height of the triangle.
            symbol (str): The symbol to use.

        Returns:
            str: The ASCII art triangle.

        Raises:
            ValueError: For negative/invalid dimensions or invalid symbol.
        """
        self._validate_input(symbol)
        if width < 0 or height < 0:
            raise ValueError("Width and height cannot be negative.")
        if width > height:
          raise ValueError("Width cannot be greater than height.")

        result = []
        for i in range(height):
            result.append(symbol * (i + 1))
            if (i+1) == width:
                for j in range(i+1, height):
                  result.append(symbol * width)
                break

        return "\n".join(result)


    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid of the specified height.

        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to use.

        Returns:
            str: A multi-line string representing the ASCII art pyramid.

        Raises:
              ValueError: If height is negative or symbol is invalid
        """
        self._validate_input(symbol)
        if height < 0:
            raise ValueError("Height cannot be negative.")

        result = []
        for i in range(height):
            result.append(" " * (height - i - 1) + symbol * (2 * i + 1))
        return "\n".join(result)
```
