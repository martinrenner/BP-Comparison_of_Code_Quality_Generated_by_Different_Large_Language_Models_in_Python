# ASCII Art Generator

I'll develop a console-based 2D ASCII Art application that meets your requirements using Object-Oriented Programming principles. Here's my implementation with emphasis on clean architecture, efficiency, and best practices:

```python
class AsciiArt:
    """
    A class for creating various ASCII art shapes.
    
    This class provides methods to generate ASCII art shapes such as squares,
    rectangles, parallelograms, triangles, and pyramids using a specified symbol.
    All methods include input validation and return multi-line strings.
    """
    
    @staticmethod
    def _validate_input(width: int, height: int, symbol: str) -> None:
        """
        Validates the input parameters for all ASCII art drawing methods.
        
        Args:
            width (int): The width of the shape.
            height (int): The height of the shape.
            symbol (str): The symbol to use for drawing.
            
        Raises:
            ValueError: If the symbol is not exactly one character or is whitespace.
            ValueError: If width or height is negative or zero.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be exactly one character.")
        
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
            
        if width <= 0 or height <= 0:
            raise ValueError("Dimensions must be positive integers.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the square.
            
        Raises:
            ValueError: If input validation fails.
        """
        self._validate_input(width, width, symbol)
        
        # For a square, width equals height
        return self.draw_rectangle(width, width, symbol)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the rectangle.
            
        Raises:
            ValueError: If input validation fails.
        """
        self._validate_input(width, height, symbol)
        
        # Create a line of symbols with the specified width
        line = symbol * width
        
        # Repeat the line for the specified height
        return "\n".join([line for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram filled with the specified symbol.
        
        The parallelogram grows diagonally to the right, with each row
        shifted by one space from the previous row.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the parallelogram.
            
        Raises:
            ValueError: If input validation fails.
        """
        self._validate_input(width, height, symbol)
        
        result = []
        line = symbol * width
        
        for i in range(height):
            # Add i spaces before each line to create the diagonal effect
            result.append(" " * i + line)
            
        return "\n".join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle filled with the specified symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The maximum width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the triangle.
            
        Raises:
            ValueError: If input validation fails.
        """
        self._validate_input(width, height, symbol)
        
        result = []
        
        # Calculate how many symbols to add per line
        symbols_per_line = max(1, width // height)
        remaining_symbols = width % height
        
        current_width = symbols_per_line
        if remaining_symbols > 0:
            current_width += 1
            remaining_symbols -= 1
            
        for _ in range(height):
            result.append(symbol * current_width)
            
            if remaining_symbols > 0:
                remaining_symbols -= 1
            else:
                current_width += symbols_per_line
                
        return "\n".join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the pyramid.
            
        Raises:
            ValueError: If input validation fails.
        """
        # For a pyramid, width is arbitrary, using height as a placeholder
        self._validate_input(height, height, symbol)
        
        result = []
        
        for i in range(height):
            # Calculate spaces and symbols for each line
            spaces = " " * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            result.append(spaces + symbols)
            
        return "\n".join(result)
```

This implementation provides a clean, maintainable ASCII art generator with the following key features:

1. **Object-Oriented Design**: Uses a class with well-defined methods for each shape.
2. **Input Validation**: Centralized validation logic that checks for negative dimensions and validates symbols.
3. **Clear Documentation**: Comprehensive docstrings for the class and all methods.
4. **Efficient Algorithms**: Simple, straightforward algorithms for drawing each shape.
5. **Error Handling**: Appropriate error types with informative messages.
6. **Clean Code**: Readable variable names and logical implementation.

Each method returns a multi-line string that represents the requested ASCII art shape, filled with the specified symbol. The code is designed to be robust against invalid inputs while maintaining high performance for all operations.