```python
import math

class AsciiArt:
    """
    A class for generating 2D ASCII art shapes.

    This class provides methods to draw various shapes such as a square, rectangle,
    parallelogram, right-angled triangle, and symmetrical pyramid. Each shape is completely
    filled with a user-selected printable symbol. Input validations ensure that the dimensions
    are positive integers and that the drawing symbol is a single non-whitespace character.
    """

    def __init__(self):
        pass

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validates that a dimension (width or height) is a positive integer.

        Args:
            value (int): The numeric value to validate.
            name (str): The name of the dimension for error messages (e.g., "width", "height").

        Raises:
            ValueError: If 'value' is not an integer greater than zero.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name.capitalize()} must be a positive integer.")

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validates that the drawing symbol is exactly one character and is not a whitespace.

        Args:
            symbol (str): The symbol to validate.

        Raises:
            ValueError: If the symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a filled square with a given side length using the specified symbol.

        Args:
            width (int): The length of each side of the square.
            symbol (str): The character used to draw the square.

        Returns:
            str: A multi-line string representing the square.

        Raises:
            ValueError: If width is not positive or if symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Build each row of the square by repeating the symbol 'width' times.
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled rectangle with given width and height using the specified symbol.

        Args:
            width (int): The width (number of symbols per row) of the rectangle.
            height (int): The height (number of rows) of the rectangle.
            symbol (str): The character used to draw the rectangle.

        Returns:
            str: A multi-line string representing the rectangle.

        Raises:
            ValueError: If either dimension is not positive or if symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled parallelogram (slanted to the right) with given width and height using the specified symbol.

        Each row is indented by one extra space than the previous row to achieve the slanted effect.

        Args:
            width (int): The width (number of symbols) of the parallelogram.
            height (int): The height (number of rows) of the parallelogram.
            symbol (str): The character used to draw the parallelogram.

        Returns:
            str: A multi-line string representing the parallelogram.

        Raises:
            ValueError: If either dimension is not positive or if symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = [(" " * i) + (symbol * width) for i in range(height)]
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled right-angled triangle using the specified symbol.
        The triangle grows diagonally to the right starting from the top-left corner.
        The number of symbols in each row is scaled proportionally so that the base row has 'width' symbols 
        and the triangle has 'height' rows.

        Args:
            width (int): The intended length of the triangle's base.
            height (int): The height (number of rows) of the triangle.
            symbol (str): The character used to draw the triangle.

        Returns:
            str: A multi-line string representing the triangle.

        Raises:
            ValueError: If dimensions are not positive or if symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Scale the number of symbols in the current row so that the last row has exactly 'width' symbols.
            count = math.ceil((i + 1) * width / height)
            lines.append(symbol * count)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical filled pyramid with the specified height and symbol.
        The pyramid is centered with each row containing an odd number of symbols.

        Args:
            height (int): The height (number of rows) of the pyramid.
            symbol (str): The character used to draw the pyramid.

        Returns:
            str: A multi-line string representing the pyramid.

        Raises:
            ValueError: If height isn't positive or if the symbol is invalid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            num_symbols = 2 * i + 1
            # Left padding ensures the pyramid is centered.
            padding = height - i - 1
            line = (" " * padding) + (symbol * num_symbols)
            lines.append(line)
        return "\n".join(lines)


def main():
    """
    Console-based interface for the ASCII Art application.

    This function displays a menu for the user to choose which ASCII art shape to draw.
    It then prompts the user for the required dimensions and symbol, calls the corresponding drawing
    method from the AsciiArt class, and prints the generated art.
    """
    art = AsciiArt()

    menu = (
        "\nASCII Art Drawer Menu:\n"
        "1. Draw Square\n"
        "2. Draw Rectangle\n"
        "3. Draw Parallelogram\n"
        "4. Draw Right-Angled Triangle\n"
        "5. Draw Pyramid\n"
        "6. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice (1-6): ").strip()

        if choice == "1":
            try:
                width = int(input("Enter the side length of the square: "))
                symbol = input("Enter the symbol: ").strip()
                result = art.draw_square(width, symbol)
                print("\n" + result)
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "2":
            try:
                width = int(input("Enter the width of the rectangle: "))
                height = int(input("Enter the height of the rectangle: "))
                symbol = input("Enter the symbol: ").strip()
                result = art.draw_rectangle(width, height, symbol)
                print("\n" + result)
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "3":
            try:
                width = int(input("Enter the width of the parallelogram: "))
                height = int(input("Enter the height of the parallelogram: "))
                symbol = input("Enter the symbol: ").strip()
                result = art.draw_parallelogram(width, height, symbol)
                print("\n" + result)
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "4":
            try:
                width = int(input("Enter the base width of the triangle: "))
                height = int(input("Enter the height of the triangle: "))
                symbol = input("Enter the symbol: ").strip()
                result = art.draw_triangle(width, height, symbol)
                print("\n" + result)
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "5":
            try:
                height = int(input("Enter the height of the pyramid: "))
                symbol = input("Enter the symbol: ").strip()
                result = art.draw_pyramid(height, symbol)
                print("\n" + result)
            except ValueError as e:
                print(f"Error: {e}")

        elif choice == "6":
            print("Exiting ASCII Art Drawer. Goodbye!")
            break

        else:
            print("Invalid choice. Please select an option between 1 and 6.")


if __name__ == "__main__":
    main()
```