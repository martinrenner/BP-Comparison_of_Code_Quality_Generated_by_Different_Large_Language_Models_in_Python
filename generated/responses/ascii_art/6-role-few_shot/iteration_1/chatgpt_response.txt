```python
class AsciiArt:
    """
    A class for drawing various 2D ASCII art shapes.
    
    Provides methods to draw a square, rectangle, parallelogram,
    right-angled triangle, and a symmetrical pyramid using a given
    printable symbol.
    """
    
    @staticmethod
    def _validate_dimension(name: str, value: int) -> None:
        """
        Validates that the given dimension value is a positive integer.
        
        Args:
            name (str): Name of the dimension for error reporting.
            value (int): The dimension value to validate.
            
        Raises:
            ValueError: If the value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be an integer greater than 0.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validates that the symbol is exactly one character and is not whitespace.
        
        Args:
            symbol (str): The symbol used for drawing.
            
        Raises:
            ValueError: If symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol must not be a whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a completely filled square of the given width using the specified symbol.
        
        Args:
            width (int): The width (and height) of the square.
            symbol (str): The character used for drawing.
            
        Returns:
            str: A multi-line string representing the square.
            
        Raises:
            ValueError: If width is not positive or symbol is invalid.
        """
        self._validate_dimension("Width", width)
        self._validate_symbol(symbol)
        
        # Create square: width rows of width symbols
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled rectangle of the given width and height using the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character used for drawing.
            
        Returns:
            str: A multi-line string representing the rectangle.
            
        Raises:
            ValueError: If width/height are not positive or symbol is invalid.
        """
        self._validate_dimension("Width", width)
        self._validate_dimension("Height", height)
        self._validate_symbol(symbol)
        
        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled parallelogram that grows diagonally 
        (each row shifted one space to the right), using the specified symbol.
        
        Args:
            width (int): The number of symbols per row (unshifted).
            height (int): The number of rows in the parallelogram.
            symbol (str): The character used for drawing.
            
        Returns:
            str: A multi-line string representing the parallelogram.
            
        Raises:
            ValueError: If width/height are not positive or symbol is invalid.
        """
        self._validate_dimension("Width", width)
        self._validate_dimension("Height", height)
        self._validate_symbol(symbol)
        
        lines = [(" " * i) + (symbol * width) for i in range(height)]
        return "\n".join(lines)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled right-angled triangle that grows diagonally to the right.
        The triangle is constructed such that the top row contains one symbol and 
        the bottom row contains 'width' symbols, with a linear interpolation in between.
        
        Args:
            width (int): The number of symbols in the bottom row.
            height (int): The total number of rows in the triangle.
            symbol (str): The character used for drawing.
            
        Returns:
            str: A multi-line string representing the right-angled triangle.
            
        Raises:
            ValueError: If width/height are not positive or symbol is invalid.
        """
        self._validate_dimension("Width", width)
        self._validate_dimension("Height", height)
        self._validate_symbol(symbol)
        
        lines = []
        # Special case: If triangle has only one row, draw a full row.
        if height == 1:
            lines.append(symbol * width)
        else:
            for i in range(height):
                # Linear interpolation: first row is 1 symbol, last row is 'width' symbols.
                # Ensure at least one symbol on the top row and exactly 'width' on last row.
                count = round(1 + (width - 1) * (i / (height - 1)))
                lines.append(symbol * count)
        return "\n".join(lines)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height.
        The pyramid has an odd number of symbols on each row, centered horizontally.
        
        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): The character used for building the pyramid.
            
        Returns:
            str: A multi-line string representing the pyramid.
            
        Raises:
            ValueError: If height is not positive or symbol is invalid.
        """
        self._validate_dimension("Height", height)
        self._validate_symbol(symbol)
        
        lines = []
        for i in range(height):
            # Calculate number of symbols and left padding
            symbols_count = 2 * i + 1
            padding = height - 1 - i
            line = (" " * padding) + (symbol * symbols_count)
            lines.append(line)
        return "\n".join(lines)

def main():
    """
    Runs the console-based ASCII Art application.
    Users can choose a shape and provide the necessary dimensions and symbol.
    """
    art = AsciiArt()
    
    menu = (
        "\nASCII Art Drawer\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Right-Angled Triangle\n"
        "5. Pyramid\n"
        "6. Exit\n"
        "Enter your choice (1-6): "
    )
    
    while True:
        try:
            choice = input(menu).strip()
            if not choice.isdigit():
                print("Please enter a valid number between 1 and 6.")
                continue
            choice = int(choice)
            
            if choice == 6:
                print("Exiting ASCII Art Drawer. Goodbye!")
                break
            
            # Common prompt for symbol used by all shapes
            symbol = input("Enter a printable symbol (single non-whitespace character) to draw with: ").strip()
            
            if choice == 1:  # Square
                width = int(input("Enter width (positive integer): ").strip())
                result = art.draw_square(width, symbol)
            elif choice == 2:  # Rectangle
                width = int(input("Enter width (positive integer): ").strip())
                height = int(input("Enter height (positive integer): ").strip())
                result = art.draw_rectangle(width, height, symbol)
            elif choice == 3:  # Parallelogram
                width = int(input("Enter width (positive integer): ").strip())
                height = int(input("Enter height (positive integer): ").strip())
                result = art.draw_parallelogram(width, height, symbol)
            elif choice == 4:  # Right-Angled Triangle
                width = int(input("Enter the number of symbols for the base (positive integer): ").strip())
                height = int(input("Enter the height (number of rows, positive integer): ").strip())
                result = art.draw_triangle(width, height, symbol)
            elif choice == 5:  # Pyramid
                height = int(input("Enter the height (positive integer): ").strip())
                result = art.draw_pyramid(height, symbol)
            else:
                print("Invalid choice. Please choose a number between 1 and 6.")
                continue
            
            print("\nGenerated ASCII Art:")
            print(result)
            
        except ValueError as ve:
            print(f"Input error: {ve}")
        except Exception as ex:
            print(f"An unexpected error occurred: {ex}")

if __name__ == "__main__":
    main()
```