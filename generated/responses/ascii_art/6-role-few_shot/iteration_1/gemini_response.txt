```python
class AsciiArt:
    """
    A class for generating various ASCII art shapes.

    This class provides methods to draw squares, rectangles, parallelograms,
    right-angled triangles, and pyramids using a specified symbol.  It includes
    input validation to ensure correct usage and prevent common errors.
    """

    def _validate_input(self, symbol: str):
        """Validates the input symbol."""
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")

    def _validate_dimensions(self, width: int, height: int = None):
      """Validates width and height"""
      if width < 1:
          raise ValueError("Width must be greater than 0.")
      if height is not None and height < 1:
        raise ValueError("Height must be greater than 0.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of the specified width using the given symbol.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): The character to use for drawing the square.

        Returns:
            str: A multi-line string representing the ASCII art square.

        Raises:
            ValueError: If the symbol is not a single character or is whitespace,
                        or if the width is not a positive integer.
        """
        self._validate_input(symbol)
        self._validate_dimensions(width)

        square = ""
        for _ in range(width):
            square += symbol * width + "\n"
        return square

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle of the specified width and height using the given symbol.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing the rectangle.

        Returns:
            str: A multi-line string representing the ASCII art rectangle.

        Raises:
            ValueError: If the symbol is not a single character or is whitespace,
                        or if the width or height is not a positive integer.
        """
        self._validate_input(symbol)
        self._validate_dimensions(width, height)

        rectangle = ""
        for _ in range(height):
            rectangle += symbol * width + "\n"
        return rectangle

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width, height, and symbol.

        The parallelogram's top-left corner starts at the origin, and each
        subsequent row is shifted one space to the right.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing.

        Returns:
            str: A multi-line string representing the ASCII art parallelogram.

        Raises:
            ValueError: If the symbol is invalid or dimensions are not positive.
        """
        self._validate_input(symbol)
        self._validate_dimensions(width, height)

        parallelogram = ""
        for i in range(height):
            parallelogram += " " * i + symbol * width + "\n"
        return parallelogram

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.

        Args:
            width: The base width
            height: the triangle height
            symbol (str): The character to use for drawing the triangle.

        Returns:
            str: Multi-line string: ASCII art

        Raises:
            ValueError: If the input is invalid.
        """

        self._validate_input(symbol)
        self._validate_dimensions(width, height)

        if width != height:
            raise ValueError("For a right-angled triangle, width and height must be equal in this implementation.")

        triangle = ""
        for i in range(height):
            triangle += symbol * (i + 1) + "\n"
        return triangle


    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid of the specified height using the given symbol.

        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing the pyramid.

        Returns:
            str: A multi-line string representing the ASCII art pyramid.

        Raises:
            ValueError: If the symbol is not a single character or is whitespace,
                        or if the height is not a positive integer.
        """
        self._validate_input(symbol)
        self._validate_dimensions(height, height)   # Use height as both

        pyramid = ""
        for i in range(height):
            spaces = " " * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            pyramid += spaces + symbols + "\n"
        return pyramid
```
