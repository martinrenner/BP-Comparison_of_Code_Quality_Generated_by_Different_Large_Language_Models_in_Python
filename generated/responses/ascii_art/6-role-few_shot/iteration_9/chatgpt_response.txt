```python
#!/usr/bin/env python3
"""
Console-based 2D ASCII Art application.

This application allows the user to draw various 2D ASCII shapes:
  - Square
  - Rectangle
  - Parallelogram (shifting each row)
  - Right-angled Triangle (growing from top-left)
  - Symmetrical Pyramid

Each shape is completely filled using a single printable symbol.

Author: Senior Software Developer
Date: 2023-10-XX
"""

import math


class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    Methods:
        draw_square(width: int, symbol: str) -> str
            Draws a square of the given width.
        draw_rectangle(width: int, height: int, symbol: str) -> str
            Draws a rectangle of the given width and height.
        draw_parallelogram(width: int, height: int, symbol: str) -> str
            Draws a parallelogram that shifts one space to the right per row.
        draw_triangle(width: int, height: int, symbol: str) -> str
            Draws a right-angled triangle that grows diagonally to the right.
        draw_pyramid(height: int, symbol: str) -> str
            Draws a symmetrical pyramid with the specified height.
    """

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validates that a dimension is a positive integer.
        
        Args:
            value (int): The dimension value (width or height).
            name (str): The name of the dimension parameter.
        
        Raises:
            ValueError: If the dimension is not a positive integer.
        """
        if not isinstance(value, int):
            raise ValueError(f"{name} must be an integer. Got type {type(value).__name__}.")
        if value < 1:
            raise ValueError(f"{name} must be a positive integer. Got: {value}.")

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validates that the symbol is a single, non-whitespace printable character.
        
        Args:
            symbol (str): The symbol to be used for drawing.
            
        Raises:
            ValueError: If symbol is not a single character or is whitespace.
        """
        if not isinstance(symbol, str):
            raise ValueError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a filled square using the provided symbol.

        Args:
            width (int): The length of each side of the square.
            symbol (str): A single character used to draw the square.
        
        Returns:
            str: Multiline string representing the ASCII square.
        
        Raises:
            ValueError: If width is not a positive integer or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Create each row as a string of repeated symbols.
        rows = [symbol * width for _ in range(width)]
        return "\n".join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled rectangle using the provided symbol.

        Args:
            width (int): The rectangle's width.
            height (int): The rectangle's height.
            symbol (str): A single character used to draw the rectangle.
        
        Returns:
            str: Multiline string representing the ASCII rectangle.
        
        Raises:
            ValueError: If width/height are invalid or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = [symbol * width for _ in range(height)]
        return "\n".join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled parallelogram using the provided symbol.

        The parallelogram grows diagonally to the right by shifting each row by one space.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): A single character used to draw the parallelogram.
        
        Returns:
            str: Multiline string representing the ASCII parallelogram.
        
        Raises:
            ValueError: If width/height are invalid or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Each row is shifted by i spaces.
            line = " " * i + (symbol * width)
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle using the provided symbol.

        The triangle grows diagonally to the right. The 'width' parameter represents
        the maximum base width, and 'height' represents the number of rows. The number
        of symbols in each row is computed proportionally so that the final row has
        approximately 'width' symbols and the first row has at least one symbol.

        Args:
            width (int): The expected width of the triangle's base.
            height (int): The number of rows in the triangle.
            symbol (str): A single character used to draw the triangle.
        
        Returns:
            str: Multiline string representing the ASCII triangle.
        
        Raises:
            ValueError: If width/height are invalid or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        # Compute number of symbols per row using proportional scaling.
        for i in range(height):
            # Use round to get a proportional count, ensuring at least one symbol.
            num_symbols = max(1, round((i + 1) * width / height))
            rows.append(symbol * num_symbols)
        return "\n".join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid using the provided symbol.

        A pyramid with the specified height is drawn such that each row
        contains an odd number of symbols centered with leading spaces.

        Args:
            height (int): The height of the pyramid.
            symbol (str): A single character used to draw the pyramid.
        
        Returns:
            str: Multiline string representing the ASCII pyramid.
        
        Raises:
            ValueError: If height is invalid or symbol is invalid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # The number of symbols in the row is 2*i + 1.
            symbols_count = 2 * i + 1
            # Center the symbols by preceding them with (height - i - 1) spaces.
            spaces = " " * (height - i - 1)
            rows.append(spaces + (symbol * symbols_count))
        return "\n".join(rows)


def main():
    """
    Main function to interact with the user via the console.

    The user can choose a shape, input dimensions and a symbol,
    and then the corresponding ASCII art is printed to the console.
    """
    art = AsciiArt()

    menu = (
        "\nASCII Art Drawing Application\n"
        "Select a shape to draw:\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Right-angled Triangle (growing to the right)\n"
        "5. Pyramid\n"
        "6. Exit\n"
        "Enter your choice (1-6): "
    )

    while True:
        choice = input(menu).strip()
        if choice == "6":
            print("Exiting the application. Goodbye!")
            break

        try:
            if choice not in {"1", "2", "3", "4", "5"}:
                print("Invalid choice. Please enter a number between 1 and 6.")
                continue

            # All shapes use a symbol which must be a single non-whitespace printable character.
            symbol = input("Enter a single non-whitespace symbol for drawing: ").strip()
            # The AsciiArt methods will validate the symbol.

            if choice == "1":  # Square
                width = int(input("Enter the width of the square: ").strip())
                result = art.draw_square(width, symbol)
            elif choice == "2":  # Rectangle
                width = int(input("Enter the width of the rectangle: ").strip())
                height = int(input("Enter the height of the rectangle: ").strip())
                result = art.draw_rectangle(width, height, symbol)
            elif choice == "3":  # Parallelogram
                width = int(input("Enter the width of the parallelogram: ").strip())
                height = int(input("Enter the height of the parallelogram: ").strip())
                result = art.draw_parallelogram(width, height, symbol)
            elif choice == "4":  # Triangle
                width = int(input("Enter the expected base width of the triangle: ").strip())
                height = int(input("Enter the height (number of rows) of the triangle: ").strip())
                result = art.draw_triangle(width, height, symbol)
            elif choice == "5":  # Pyramid
                height = int(input("Enter the height of the pyramid: ").strip())
                result = art.draw_pyramid(height, symbol)
            else:
                result = "Unknown shape option."

            print("\n" + result + "\n")
        except ValueError as ve:
            print(f"Input error: {ve}")
        except Exception as ex:
            print(f"An unexpected error occurred: {ex}")


if __name__ == '__main__':
    main()
```