```python
import math


class AsciiArt:
    """
    A class for generating 2D ASCII art shapes.
    Provides methods to draw a square, rectangle, parallelogram, right-angled triangle, and pyramid.
    """

    def __init__(self):
        """Initialize the AsciiArt instance."""
        pass  # Currently no instance-specific state is required.

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validates that the symbol is exactly one non-whitespace printable character.

        Args:
            symbol (str): The symbol to be used for drawing.

        Raises:
            ValueError: If symbol is not a single, non-whitespace character.
        """
        if not isinstance(symbol, str):
            raise ValueError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be exactly one character.")
        if symbol.isspace():
            raise ValueError("Symbol must not be a whitespace character.")

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validates that a given dimension (width or height) is a positive integer.

        Args:
            value (int): The numeric dimension to validate.
            name (str): A name for the dimension, used in error messages.

        Raises:
            ValueError: If the value is not a positive integer.
        """
        if not isinstance(value, int):
            raise ValueError(f"{name} must be an integer.")
        if value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a completely filled square.

        Args:
            width (int): The side length of the square.
            symbol (str): A single printable non-whitespace character to fill the square.

        Returns:
            str: A multi-line string representing the ASCII square.

        Raises:
            ValueError: If width is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled rectangle.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): A single printable non-whitespace character to fill the rectangle.

        Returns:
            str: A multi-line string representing the ASCII rectangle.

        Raises:
            ValueError: If width or height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled parallelogram.
        Each row is shifted by one space to the right, starting from the top-left corner.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height (number of rows) of the parallelogram.
            symbol (str): A single printable non-whitespace character to fill the shape.

        Returns:
            str: A multi-line string representing the ASCII parallelogram.

        Raises:
            ValueError: If width or height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Each subsequent row is indented by one more space.
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle that grows diagonally to the right.
        The triangle uses a linear scaling such that the last row has 'width' symbols.
        
        For example, with width=5 and height=5, the rows will have 1, 2, 3, 4, and 5 symbols respectively.
        When width and height are not equal, the number of symbols in each row is determined by:
            num_symbols = ceil((row_index + 1) * width / height)

        Args:
            width (int): The desired number of symbols in the base (last row) of the triangle.
            height (int): The number of rows for the triangle.
            symbol (str): A single printable non-whitespace character to fill the triangle.

        Returns:
            str: A multi-line string representing the ASCII right-angled triangle.

        Raises:
            ValueError: If width or height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Compute the number of symbols for this row based on a linear scale.
            num_symbols = math.ceil((i + 1) * width / height)
            line = symbol * num_symbols
            lines.append(line)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid.
        The pyramid is centered and the base has a width of (2 * height - 1).

        Args:
            height (int): The height of the pyramid.
            symbol (str): A single printable non-whitespace character to construct the pyramid.

        Returns:
            str: A multi-line string representing the ASCII pyramid.

        Raises:
            ValueError: If height is not a positive integer or if symbol is invalid.
        """
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Each row has an increasing number of symbols: 2*i + 1.
            # The row is centered by prepending (height - i - 1) spaces.
            spaces = " " * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            lines.append(spaces + symbols)
        return "\n".join(lines)


if __name__ == "__main__":
    # Example usage of the AsciiArt class.
    art = AsciiArt()

    print("Square (width=4):")
    print(art.draw_square(4, "#"))
    print("\nRectangle (width=6, height=3):")
    print(art.draw_rectangle(6, 3, "*"))
    print("\nParallelogram (width=5, height=4):")
    print(art.draw_parallelogram(5, 4, "@"))
    print("\nRight-angled Triangle (width=5, height=5):")
    print(art.draw_triangle(5, 5, "$"))
    print("\nPyramid (height=4):")
    print(art.draw_pyramid(4, "%"))
```