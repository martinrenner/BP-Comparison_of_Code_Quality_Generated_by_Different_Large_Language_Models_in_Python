I'll develop a console-based 2D ASCII Art application following the requirements and best practices you specified. Here's the implementation:

```python
class AsciiArt:
    """
    A class for creating 2D ASCII art shapes.
    
    This class provides methods to draw various ASCII art shapes
    such as squares, rectangles, parallelograms, triangles, and pyramids.
    """
    
    @staticmethod
    def _validate_inputs(symbol: str, width: int = None, height: int = None) -> None:
        """
        Validates the inputs for all drawing methods.
        
        Args:
            symbol (str): The character to use for drawing the shape.
            width (int, optional): The width of the shape. Defaults to None.
            height (int, optional): The height of the shape. Defaults to None.
            
        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
            ValueError: If the width or height is negative.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
        
        if width is not None and width < 0:
            raise ValueError("Width cannot be negative.")
            
        if height is not None and height < 0:
            raise ValueError("Height cannot be negative.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width and symbol.
        
        Args:
            width (int): The width of the square.
            symbol (str): The character to use for drawing the square.
            
        Returns:
            str: A multi-line string representing the ASCII art of the square.
            
        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
            ValueError: If the width is negative.
        """
        self._validate_inputs(symbol, width=width)
        
        if width == 0:
            return ""
            
        result = []
        for _ in range(width):
            result.append(symbol * width)
            
        return "\n".join(result)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width, height, and symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing the rectangle.
            
        Returns:
            str: A multi-line string representing the ASCII art of the rectangle.
            
        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
            ValueError: If the width or height is negative.
        """
        self._validate_inputs(symbol, width=width, height=height)
        
        if width == 0 or height == 0:
            return ""
            
        result = []
        for _ in range(height):
            result.append(symbol * width)
            
        return "\n".join(result)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width, height, and symbol.
        The parallelogram grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing the parallelogram.
            
        Returns:
            str: A multi-line string representing the ASCII art of the parallelogram.
            
        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
            ValueError: If the width or height is negative.
        """
        self._validate_inputs(symbol, width=width, height=height)
        
        if width == 0 or height == 0:
            return ""
            
        result = []
        for i in range(height):
            result.append(" " * i + symbol * width)
            
        return "\n".join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width, height, and symbol.
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The maximum width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing the triangle.
            
        Returns:
            str: A multi-line string representing the ASCII art of the triangle.
            
        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
            ValueError: If the width or height is negative.
        """
        self._validate_inputs(symbol, width=width, height=height)
        
        if width == 0 or height == 0:
            return ""
        
        # Calculate the number of symbols per row
        symbols_per_row = []
        for i in range(1, height + 1):
            # Linear interpolation to determine width at each row
            sym_count = max(1, min(round(i * width / height), width))
            symbols_per_row.append(sym_count)
        
        result = []
        for count in symbols_per_row:
            result.append(symbol * count)
            
        return "\n".join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height and symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing the pyramid.
            
        Returns:
            str: A multi-line string representing the ASCII art of the pyramid.
            
        Raises:
            ValueError: If the symbol is not a single character or is whitespace.
            ValueError: If the height is negative.
        """
        self._validate_inputs(symbol, height=height)
        
        if height == 0:
            return ""
            
        result = []
        width = 2 * height - 1
        
        for i in range(height):
            # Calculate the number of symbols to draw: 2*i + 1
            symbols_count = 2 * i + 1
            # Calculate padding to center the symbols
            padding = (width - symbols_count) // 2
            result.append(" " * padding + symbol * symbols_count)
            
        return "\n".join(result)
```

Here's also a sample usage demonstration:

```python
def main():
    """
    Main function to demonstrate the usage of the AsciiArt class.
    """
    ascii_art = AsciiArt()
    
    print("Square (5x5, '*'):")
    print(ascii_art.draw_square(5, "*"))
    print()
    
    print("Rectangle (8x3, '#'):")
    print(ascii_art.draw_rectangle(8, 3, "#"))
    print()
    
    print("Parallelogram (6x4, '@'):")
    print(ascii_art.draw_parallelogram(6, 4, "@"))
    print()
    
    print("Triangle (5x5, '+'):")
    print(ascii_art.draw_triangle(5, 5, "+"))
    print()
    
    print("Pyramid (4, '&'):")
    print(ascii_art.draw_pyramid(4, "&"))

if __name__ == "__main__":
    main()
```

This implementation follows all the specified requirements:
1. It uses OOP with a proper AsciiArt class
2. Includes validation for all inputs using built-in error types
3. Each shape function returns a multi-line string representing the ASCII art
4. The code is modular, correct, testable, and has good documentation
5. It follows the given code examples for structure and style