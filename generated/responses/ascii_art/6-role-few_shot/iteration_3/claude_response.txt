# ASCII Art Generator

I'll develop a console-based 2D ASCII Art application that meets your requirements. The solution will follow OOP principles with proper validation, error handling, and documentation.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to create various ASCII art shapes
    such as squares, rectangles, parallelograms, triangles, and pyramids.
    Each shape is generated using a specified symbol.
    """
    
    @staticmethod
    def _validate_input(width: int, height: int, symbol: str) -> None:
        """
        Validates input parameters for ASCII art generation.
        
        Args:
            width (int): The width of the shape.
            height (int): The height of the shape.
            symbol (str): The symbol to use for drawing.
            
        Raises:
            ValueError: If any of the parameters are invalid.
        """
        if not isinstance(width, int) or not isinstance(height, int):
            raise TypeError("Width and height must be integers.")
            
        if width <= 0 or height <= 0:
            raise ValueError("Width and height must be positive.")
            
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
            
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
            
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
        
        Args:
            width (int): The width (and height) of the square.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the square ASCII art.
            
        Raises:
            ValueError: If the parameters are invalid.
        """
        self._validate_input(width, width, symbol)
        
        row = symbol * width
        return '\n'.join([row for _ in range(width)])
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the rectangle ASCII art.
            
        Raises:
            ValueError: If the parameters are invalid.
        """
        self._validate_input(width, height, symbol)
        
        row = symbol * width
        return '\n'.join([row for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram filled with the specified symbol.
        The parallelogram grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the parallelogram ASCII art.
            
        Raises:
            ValueError: If the parameters are invalid.
        """
        self._validate_input(width, height, symbol)
        
        result = []
        for i in range(height):
            padding = ' ' * i
            row = padding + symbol * width
            result.append(row)
        
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle filled with the specified symbol.
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the triangle ASCII art.
            
        Raises:
            ValueError: If the parameters are invalid.
        """
        self._validate_input(width, height, symbol)
        
        result = []
        # Calculate the number of symbols per row
        symbols_per_row = [int(i * (width / height) + 0.5) for i in range(1, height + 1)]
        
        for num_symbols in symbols_per_row:
            row = symbol * num_symbols
            result.append(row)
        
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to use for drawing.
            
        Returns:
            str: A multi-line string representing the pyramid ASCII art.
            
        Raises:
            ValueError: If the parameters are invalid.
        """
        self._validate_input(height * 2 - 1, height, symbol)
        
        result = []
        for i in range(1, height + 1):
            # Calculate the number of symbols in the current row
            num_symbols = 2 * i - 1
            # Calculate the padding required for centering
            padding = ' ' * (height - i)
            # Construct the row
            row = padding + symbol * num_symbols
            result.append(row)
        
        return '\n'.join(result)
```

This implementation includes:

1. A comprehensive `AsciiArt` class with methods for drawing different shapes
2. Input validation for all parameters
3. Detailed docstrings for all methods
4. Proper error handling with descriptive messages
5. Efficient algorithms for generating each shape
6. Clean code structure with consistent styling

Each method returns a multi-line string representing the requested ASCII art shape, filled with the specified symbol. The code includes validation to ensure the symbol is a single, non-whitespace character and that dimensions are positive integers.