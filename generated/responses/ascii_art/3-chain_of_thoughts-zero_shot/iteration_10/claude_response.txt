# ASCII Art Generator

I'll create a console-based 2D ASCII art generator that meets the ISO/IEC 25010 requirements with proper structure, validation, and error handling.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to create various ASCII art shapes
    such as squares, rectangles, parallelograms, triangles, and pyramids.
    Each shape is filled with a user-specified symbol.
    """
    
    @staticmethod
    def _validate_input(width: int, height: int, symbol: str) -> None:
        """
        Validate the input parameters for ASCII art generation.
        
        Args:
            width: The width of the shape
            height: The height of the shape
            symbol: The character to fill the shape with
            
        Raises:
            ValueError: If width or height is negative, or if symbol is not a single character
            TypeError: If width or height is not an integer, or if symbol is not a string
        """
        # Check types
        if not isinstance(width, int):
            raise TypeError("Width must be an integer")
        if not isinstance(height, int):
            raise TypeError("Height must be an integer")
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string")
            
        # Check values
        if width < 0:
            raise ValueError("Width cannot be negative")
        if height < 0:
            raise ValueError("Height cannot be negative")
        if len(symbol) != 1:
            raise ValueError("Symbol must be exactly one character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a square filled with the specified symbol.
        
        Args:
            width: The width and height of the square
            symbol: The character to fill the square with
            
        Returns:
            A string representation of the square
            
        Raises:
            ValueError: If width is negative or if symbol is invalid
            TypeError: If width is not an integer or if symbol is not a string
        """
        self._validate_input(width, width, symbol)
        
        # A square is a special case of a rectangle where width equals height
        return self.draw_rectangle(width, width, symbol)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a rectangle filled with the specified symbol.
        
        Args:
            width: The width of the rectangle
            height: The height of the rectangle
            symbol: The character to fill the rectangle with
            
        Returns:
            A string representation of the rectangle
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid
            TypeError: If width or height is not an integer or if symbol is not a string
        """
        self._validate_input(width, height, symbol)
        
        # Create a line of symbols with the specified width
        line = symbol * width
        
        # Create the rectangle by repeating the line for the specified height
        rows = [line for _ in range(height)]
        
        # Join the rows with newline characters
        return "\n".join(rows)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a parallelogram filled with the specified symbol.
        Each row is shifted one position to the right from the previous row.
        
        Args:
            width: The width of the parallelogram
            height: The height of the parallelogram
            symbol: The character to fill the parallelogram with
            
        Returns:
            A string representation of the parallelogram
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid
            TypeError: If width or height is not an integer or if symbol is not a string
        """
        self._validate_input(width, height, symbol)
        
        rows = []
        for i in range(height):
            # Add spaces equal to the current row number, followed by symbols
            row = " " * i + symbol * width
            rows.append(row)
        
        return "\n".join(rows)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a right-angled triangle filled with the specified symbol.
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width: The base width of the triangle
            height: The height of the triangle
            symbol: The character to fill the triangle with
            
        Returns:
            A string representation of the triangle
            
        Raises:
            ValueError: If width or height is negative or if symbol is invalid
            TypeError: If width or height is not an integer or if symbol is not a string
        """
        self._validate_input(width, height, symbol)
        
        rows = []
        # Calculate how much width to add in each row
        if height <= 1:
            step = 0  # Avoid division by zero
        else:
            step = width / height
            
        for i in range(height):
            # Calculate the number of symbols in the current row
            # Ensure we always have at least 1 symbol in non-empty rows
            # and exactly 'width' symbols in the last row
            if i == height - 1:
                num_symbols = width
            else:
                num_symbols = max(1, int((i + 1) * step))
                
            row = symbol * num_symbols
            rows.append(row)
        
        return "\n".join(rows)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height: The height of the pyramid
            symbol: The character to fill the pyramid with
            
        Returns:
            A string representation of the pyramid
            
        Raises:
            ValueError: If height is negative or if symbol is invalid
            TypeError: If height is not an integer or if symbol is not a string
        """
        # Pass width=0 as a placeholder, it will be validated inside
        self._validate_input(0, height, symbol)
        
        rows = []
        for i in range(height):
            # Calculate spaces and symbols for the current row
            spaces = " " * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            row = spaces + symbols
            rows.append(row)
        
        return "\n".join(rows)


def main():
    """
    Main function to demonstrate the ASCII art generator.
    """
    ascii_art = AsciiArt()
    
    print("Welcome to the ASCII Art Generator!")
    print("----------------------------------")
    
    while True:
        print("\nChoose a shape to draw:")
        print("1. Square")
        print("2. Rectangle")
        print("3. Parallelogram")
        print("4. Triangle (right-angled)")
        print("5. Pyramid")
        print("0. Exit")
        
        try:
            choice = int(input("\nEnter your choice (0-5): "))
            
            if choice == 0:
                print("Thank you for using ASCII Art Generator. Goodbye!")
                break
                
            if choice < 1 or choice > 5:
                print("Invalid choice! Please enter a number between 0 and 5.")
                continue
                
            symbol = input("Enter a symbol to draw with (single character): ")
                
            if choice == 1:
                width = int(input("Enter the width of the square: "))
                result = ascii_art.draw_square(width, symbol)
            elif choice == 2:
                width = int(input("Enter the width of the rectangle: "))
                height = int(input("Enter the height of the rectangle: "))
                result = ascii_art.draw_rectangle(width, height, symbol)
            elif choice == 3:
                width = int(input("Enter the width of the parallelogram: "))
                height = int(input("Enter the height of the parallelogram: "))
                result = ascii_art.draw_parallelogram(width, height, symbol)
            elif choice == 4:
                width = int(input("Enter the width of the triangle: "))
                height = int(input("Enter the height of the triangle: "))
                result = ascii_art.draw_triangle(width, height, symbol)
            elif choice == 5:
                height = int(input("Enter the height of the pyramid: "))
                result = ascii_art.draw_pyramid(height, symbol)
                
            print("\nResult:")
            print(result)
                
        except ValueError as e:
            print(f"Error: {e}")
        except TypeError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")


if __name__ == "__main__":
    main()
```

## Features and Highlights

1. **OOP Implementation**: The code uses a class-based approach with proper encapsulation and method organization.

2. **Input Validation**:
   - Checks for negative dimensions
   - Validates that symbols are single characters
   - Prevents whitespace symbols
   - Type checking for all inputs

3. **Error Handling**:
   - Uses appropriate error types (ValueError, TypeError)
   - Provides meaningful error messages
   - The main function catches and displays errors gracefully

4. **Modularity**:
   - Private validation method to avoid code duplication
   - Each shape function is independent and follows the same interface
   - The main function is separate from the class implementation

5. **Documentation**:
   - Comprehensive docstrings for the class and all methods
   - Clear parameter and return value descriptions
   - Exception information in docstrings

6. **User Interface**:
   - Simple, intuitive console interface
   - Clear menu options
   - Input prompts with guidance

7. **Security**:
   - Protected against invalid inputs
   - Proper exception handling to prevent crashes

This implementation meets the ISO/IEC 25010 quality standards in terms of functionality, security, performance, usability, and maintainability.