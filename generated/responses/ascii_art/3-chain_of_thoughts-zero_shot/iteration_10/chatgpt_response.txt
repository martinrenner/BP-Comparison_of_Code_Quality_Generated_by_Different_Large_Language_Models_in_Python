```python
#!/usr/bin/env python3
"""
Console-based 2D ASCII Art Generator

This module defines the AsciiArt class that provides methods to generate
different ASCII shapes: square, rectangle, parallelogram, right-angled triangle,
and symmetrical pyramid.

The code validates inputs (dimensions and symbol) and returns each shape as a multi‐line
string. A simple console menu allows users to choose and generate shapes.

This implementation targets ISO/IEC 25010 requirements:
  - Correctness: Each function returns the expected ASCII art output.
  - Performance: Uses efficient string operations.
  - Modularity: Each shape has its dedicated method.
  - Security: Input validation protects against invalid data.
  - Testability: Each method returns a string; interactive parts are isolated.
  - Readability & Documentation: Clear docstrings, variable names, and inline comments.
"""

class AsciiArt:
    """
    A class to generate ASCII art shapes.
    """

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validate that a dimension is a positive integer.

        Args:
            value (int): The dimension value.
            name (str): The name of the dimension (e.g., 'width' or 'height').

        Raises:
            ValueError: If the dimension is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validate that the symbol is a single non-whitespace character.

        Args:
            symbol (str): The symbol to use for drawing.

        Raises:
            ValueError: If symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a square of given width filled entirely with the provided symbol.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): The character used to fill the square.

        Returns:
            str: Multi-line string representing the square.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a rectangle of given width and height filled with the provided symbol.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character used to fill the rectangle.

        Returns:
            str: Multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a parallelogram that grows diagonally to the right.
        Each row is shifted one space to the right starting from the top-left corner.

        Args:
            width (int): The number of symbols in each row.
            height (int): The total number of rows.
            symbol (str): The character used to fill the shape.

        Returns:
            str: Multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = [(" " * i) + (symbol * width) for i in range(height)]
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a right-angled triangle that grows diagonally to the right,
        starting from the top-left corner. The triangle is scaled such that the bottom
        row has 'width' symbols and the top row has at least one symbol.

        The number of symbols in each row is determined by linear interpolation:
            If height == 1, the triangle consists of a single row with 'width' symbols.
            Otherwise, for row index r (0-indexed), the count is:
                count = int( r * (width - 1) / (height - 1) ) + 1

        Args:
            width (int): The number of symbols on the base (last row) of the triangle.
            height (int): The total number of rows.
            symbol (str): The character used to fill the triangle.

        Returns:
            str: Multi-line string representing the triangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        if height == 1:
            # Single row triangle.
            lines.append(symbol * width)
        else:
            for row in range(height):
                # Linear interpolation to determine the number of symbols.
                count = int(row * (width - 1) / (height - 1)) + 1
                lines.append(symbol * count)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid.
        The pyramid will have 'height' rows. Each row has an odd number of symbols,
        centered within a width of (2*height - 1).

        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): The character used to build the pyramid.

        Returns:
            str: Multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        base_width = 2 * height - 1
        for i in range(height):
            num_symbols = 2 * i + 1
            num_spaces = (base_width - num_symbols) // 2
            # Each row is composed of left spaces, the symbols, and optionally right spaces.
            line = " " * num_spaces + symbol * num_symbols + " " * num_spaces
            lines.append(line)
        return "\n".join(lines)


def main():
    """
    Main function to run the ASCII Art Generator.
    Presents a simple console menu for the user to choose and display shapes.
    """
    art = AsciiArt()

    menu = (
        "\nASCII Art Generator\n"
        "----------------------\n"
        "1. Draw Square\n"
        "2. Draw Rectangle\n"
        "3. Draw Parallelogram\n"
        "4. Draw Right-Angled Triangle\n"
        "5. Draw Pyramid\n"
        "6. Exit\n"
    )

    def get_positive_int(prompt: str) -> int:
        """
        Prompt the user until a valid positive integer is entered.
        """
        while True:
            try:
                value = int(input(prompt))
                if value <= 0:
                    print("Please enter a positive integer.")
                    continue
                return value
            except ValueError:
                print("Invalid input. Please enter a valid integer.")

    def get_symbol(prompt: str) -> str:
        """
        Prompt the user until a valid single non-whitespace character is entered.
        """
        while True:
            symbol = input(prompt)
            if len(symbol) != 1 or symbol.isspace():
                print("Please enter a single non-whitespace character.")
            else:
                return symbol

    while True:
        print(menu)
        choice = input("Enter your choice (1-6): ").strip()
        if choice == "6":
            print("Exiting. Thank you for using the ASCII Art Generator!")
            break

        try:
            if choice == "1":
                width = get_positive_int("Enter the side length of the square: ")
                symbol = get_symbol("Enter a symbol to draw the square: ")
                result = art.draw_square(width, symbol)
            elif choice == "2":
                width = get_positive_int("Enter the width of the rectangle: ")
                height = get_positive_int("Enter the height of the rectangle: ")
                symbol = get_symbol("Enter a symbol to draw the rectangle: ")
                result = art.draw_rectangle(width, height, symbol)
            elif choice == "3":
                width = get_positive_int("Enter the width of the parallelogram: ")
                height = get_positive_int("Enter the height of the parallelogram: ")
                symbol = get_symbol("Enter a symbol to draw the parallelogram: ")
                result = art.draw_parallelogram(width, height, symbol)
            elif choice == "4":
                width = get_positive_int("Enter the base width of the triangle: ")
                height = get_positive_int("Enter the height of the triangle: ")
                symbol = get_symbol("Enter a symbol to draw the triangle: ")
                result = art.draw_triangle(width, height, symbol)
            elif choice == "5":
                height = get_positive_int("Enter the height of the pyramid: ")
                symbol = get_symbol("Enter a symbol to draw the pyramid: ")
                result = art.draw_pyramid(height, symbol)
            else:
                print("Invalid choice. Please enter a number between 1 and 6.")
                continue

            print("\nGenerated ASCII Art:")
            print(result)
        except ValueError as ve:
            print(f"Error: {ve}")

if __name__ == "__main__":
    main()
```