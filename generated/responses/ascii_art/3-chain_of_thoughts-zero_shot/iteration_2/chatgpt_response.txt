```python
import math


class AsciiArt:
    """
    A class for generating 2D ASCII art for various shapes.
    
    Methods:
        draw_square(width: int, symbol: str) -> str:
            Returns an ASCII art square.
            
        draw_rectangle(width: int, height: int, symbol: str) -> str:
            Returns an ASCII art rectangle.
            
        draw_parallelogram(width: int, height: int, symbol: str) -> str:
            Returns an ASCII art parallelogram with each row shifted by one space.
            
        draw_triangle(width: int, height: int, symbol: str) -> str:
            Returns an ASCII art right-angled triangle.
            The triangle is drawn such that the top row contains one symbol
            and the bottom row contains exactly "width" symbols.
            
        draw_pyramid(height: int, symbol: str) -> str:
            Returns an ASCII art symmetrical pyramid.
    """

    @staticmethod
    def _validate_dimension(value: int, name: str) -> None:
        """
        Validates that a dimension is a positive integer.
        
        Parameters:
            value (int): The dimension value.
            name (str): The name of the dimension (e.g., 'width' or 'height').
            
        Raises:
            ValueError: If the value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name.capitalize()} must be a positive integer.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validates that the symbol is a single, non-whitespace character.
        
        Parameters:
            symbol (str): The symbol to be used in ASCII art.
            
        Raises:
            ValueError: If the symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a filled square using the specified symbol.
        
        Parameters:
            width (int): The side length of the square.
            symbol (str): The symbol used for drawing.
            
        Returns:
            str: Multi-line string representing the square.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled rectangle using the specified symbol.
        
        Parameters:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol used for drawing.
            
        Returns:
            str: Multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled parallelogram using the specified symbol.
        Each subsequent row is shifted one space to the right.
        
        Parameters:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): The symbol used for drawing.
            
        Returns:
            str: Multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            # Each row is prepended with 'i' spaces.
            lines.append(" " * i + symbol * width)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle using the specified symbol.
        The triangle is constructed so that the top row has 1 symbol and
        the bottom row has exactly 'width' symbols. Intermediate rows are
        determined by linear interpolation.
        
        Parameters:
            width (int): The number of symbols in the base (last row).
            height (int): The total number of rows.
            symbol (str): The symbol used for drawing.
            
        Returns:
            str: Multi-line string representing the triangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        if height == 1:
            # When height is 1, the triangle degenerates into a single line.
            lines.append(symbol * width)
        else:
            # Linear interpolation: first row has 1 symbol, last row has 'width' symbols.
            for i in range(1, height + 1):
                # Calculate the number of symbols for the i-th row.
                # Using floor division ensures an increasing sequence.
                count = ((i - 1) * (width - 1)) // (height - 1) + 1
                lines.append(symbol * count)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid using the specified symbol.
        The pyramid is centered horizontally.
        
        Parameters:
            height (int): The number of rows in the pyramid.
            symbol (str): The symbol used for drawing.
            
        Returns:
            str: Multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            # The number of symbols in each row is (2*i + 1).
            num_symbols = 2 * i + 1
            # Calculate left padding to center the pyramid.
            num_spaces = height - i - 1
            lines.append(" " * num_spaces + symbol * num_symbols)
        return "\n".join(lines)


def main():
    """
    Console-based interface for generating ASCII art shapes.
    Allows the user to select a shape, enter the required dimensions
    and symbol, and then outputs the generated ASCII art.
    """
    art = AsciiArt()
    menu = (
        "\nASCII Art Generator\n"
        "Select a shape to draw:\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Triangle (right-angled)\n"
        "5. Pyramid\n"
        "0. Exit\n"
        "Enter your choice: "
    )

    while True:
        try:
            choice = input(menu).strip()
            if choice == "0":
                print("Exiting ASCII Art Generator. Goodbye!")
                break

            if choice not in {"1", "2", "3", "4", "5"}:
                print("Invalid choice. Please enter a number from 0 to 5.")
                continue

            # Get the drawing symbol.
            symbol = input("Enter a single non-whitespace character to use as the drawing symbol: ").strip()
            # Validation occurs in the drawing methods.
            
            ascii_art = ""
            if choice == "1":
                # Square: requires one dimension.
                width = int(input("Enter the width (side length) of the square: ").strip())
                ascii_art = art.draw_square(width, symbol)
            elif choice == "2":
                # Rectangle: requires width and height.
                width = int(input("Enter the width of the rectangle: ").strip())
                height = int(input("Enter the height of the rectangle: ").strip())
                ascii_art = art.draw_rectangle(width, height, symbol)
            elif choice == "3":
                # Parallelogram: requires width and height.
                width = int(input("Enter the width of the parallelogram: ").strip())
                height = int(input("Enter the height of the parallelogram: ").strip())
                ascii_art = art.draw_parallelogram(width, height, symbol)
            elif choice == "4":
                # Triangle: requires base width and height.
                width = int(input("Enter the width (base length) of the triangle: ").strip())
                height = int(input("Enter the height of the triangle: ").strip())
                ascii_art = art.draw_triangle(width, height, symbol)
            elif choice == "5":
                # Pyramid: requires only height.
                height = int(input("Enter the height of the pyramid: ").strip())
                ascii_art = art.draw_pyramid(height, symbol)

            print("\nGenerated ASCII Art:\n")
            print(ascii_art)
        except ValueError as ve:
            # Catch validation errors or int conversion issues.
            print(f"Input error: {ve}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
```