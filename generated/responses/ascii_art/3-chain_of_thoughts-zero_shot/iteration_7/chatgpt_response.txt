```python
class AsciiArt:
    """
    A class that generates 2D ASCII art shapes.
    
    Provides methods to draw:
        - Square
        - Rectangle
        - Parallelogram (diagonally shifted)
        - Right-angled triangle (growing diagonally from the topâ€“left corner)
        - Symmetrical pyramid
        
    Each method returns a multi-line string representing the filled shape,
    using a user-specified printable (single, non-whitespace) character.
    """

    @staticmethod
    def _validate_dimension(value: int, name: str) -> None:
        """
        Validate that a dimension (width or height) is a positive integer.

        :param value: The value to check.
        :param name: The name of the parameter (for error messages).
        :raises TypeError: If value is not an integer.
        :raises ValueError: If value is not positive.
        """
        if not isinstance(value, int):
            raise TypeError(f"{name.capitalize()} must be an integer.")
        if value <= 0:
            raise ValueError(f"{name.capitalize()} must be positive.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validate that the symbol is a single printable, non-whitespace character.

        :param symbol: The symbol to check.
        :raises TypeError: If symbol is not a str.
        :raises ValueError: If symbol is not exactly one character or is whitespace.
        """
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a filled ASCII square.

        :param width: The side length of the square (number of symbols per side).
        :param symbol: The symbol used to draw the square.
        :return: A multi-line string representing the square.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Build each row of the square and join them with newline characters.
        row = symbol * width
        rows = [row for _ in range(width)]
        return "\n".join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a filled ASCII rectangle.

        :param width: The width of the rectangle.
        :param height: The height of the rectangle.
        :param symbol: The symbol used to draw the rectangle.
        :return: A multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        row = symbol * width
        rows = [row for _ in range(height)]
        return "\n".join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a filled ASCII parallelogram.
        
        Each row is shifted to the right by one extra space, starting from the top-left.

        :param width: The number of symbols on each row.
        :param height: The number of rows.
        :param symbol: The symbol used to draw the parallelogram.
        :return: A multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Each row is shifted with i leading spaces.
            row = " " * i + symbol * width
            rows.append(row)
        return "\n".join(rows)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a filled right-angled ASCII triangle that grows diagonally from the top-left corner.
        
        The triangle's first row will have one symbol and the last row will have a count equal to 'width'.
        For height > 1, the number of symbols increases gradually from 1 to width over the given height.
        If height equals 1, the triangle is a single row with 'width' symbols.

        :param width: The number of symbols in the bottom row (base of the triangle).
        :param height: The number of rows.
        :param symbol: The symbol used to draw the triangle.
        :return: A multi-line string representing the triangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        # For a triangle growing from 1 symbol to 'width' symbols, we will distribute
        # the increase over the given height. When height is 1, use width directly.
        for i in range(height):
            if height == 1:
                count = width
            else:
                # Distribute the symbols linearly: ensure first row is at least 1,
                # and the last row has exactly 'width' symbols.
                count = 1 + (i * (width - 1)) // (height - 1)
            rows.append(symbol * count)
        return "\n".join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a filled, symmetrical ASCII pyramid.

        The pyramid is centered, with the first row containing one symbol and each subsequent row
        increasing the symbol count by 2, resulting in a base width of (2 * height - 1) symbols.

        :param height: The number of rows in the pyramid.
        :param symbol: The symbol used to draw the pyramid.
        :return: A multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Calculate the number of symbols and the required leading spaces for centering.
            num_symbols = 2 * i + 1
            num_spaces = height - 1 - i
            row = " " * num_spaces + symbol * num_symbols
            rows.append(row)
        return "\n".join(rows)


# Example usage and simple tests:
if __name__ == "__main__":
    art = AsciiArt()
    
    print("Square (width=5):")
    print(art.draw_square(5, "#"))
    print("\nRectangle (width=10, height=3):")
    print(art.draw_rectangle(10, 3, "*"))
    print("\nParallelogram (width=7, height=4):")
    print(art.draw_parallelogram(7, 4, "@"))
    print("\nRight-angled Triangle (width=10, height=5):")
    print(art.draw_triangle(10, 5, "$"))
    print("\nPyramid (height=5):")
    print(art.draw_pyramid(5, "%"))
```