I'll create a console-based 2D ASCII art application following Object-Oriented Programming principles and meeting ISO/IEC 25010 quality standards. Let me develop this step by step.

```python
class AsciiArt:
    """
    A class for generating various ASCII art shapes.
    
    This class provides methods to draw different geometric shapes using ASCII characters,
    following the ISO/IEC 25010 quality standards for maintainability, security, and usability.
    """
    
    @staticmethod
    def _validate_input(width=None, height=None, symbol=None):
        """
        Validates the input parameters for all drawing methods.
        
        Args:
            width (int, optional): Width of the shape.
            height (int, optional): Height of the shape.
            symbol (str, optional): Character to use for drawing.
            
        Raises:
            ValueError: If any input parameters don't meet the requirements.
            TypeError: If input parameters are of incorrect type.
        """
        # Validate symbol
        if symbol is not None:
            if not isinstance(symbol, str):
                raise TypeError("Symbol must be a string")
            if len(symbol) != 1:
                raise ValueError("Symbol must be exactly one character")
            if symbol.isspace():
                raise ValueError("Symbol cannot be a whitespace character")
        
        # Validate width and height
        if width is not None:
            if not isinstance(width, int):
                raise TypeError("Width must be an integer")
            if width <= 0:
                raise ValueError("Width must be positive")
                
        if height is not None:
            if not isinstance(height, int):
                raise TypeError("Height must be an integer")
            if height <= 0:
                raise ValueError("Height must be positive")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width using the given symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing the square.
            
        Returns:
            str: A multi-line string representing the square.
            
        Raises:
            ValueError: If width is not positive or symbol is invalid.
            TypeError: If input parameters are of incorrect type.
        """
        self._validate_input(width=width, symbol=symbol)
        
        # Create a row of symbols
        row = symbol * width
        
        # Join rows to create the square
        return '\n'.join([row for _ in range(width)])
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width and height using the given symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing the rectangle.
            
        Returns:
            str: A multi-line string representing the rectangle.
            
        Raises:
            ValueError: If width or height is not positive or symbol is invalid.
            TypeError: If input parameters are of incorrect type.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Create a row of symbols
        row = symbol * width
        
        # Join rows to create the rectangle
        return '\n'.join([row for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width and height using the given symbol.
        The parallelogram grows diagonally to the right, with each row shifted by one space.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing the parallelogram.
            
        Returns:
            str: A multi-line string representing the parallelogram.
            
        Raises:
            ValueError: If width or height is not positive or symbol is invalid.
            TypeError: If input parameters are of incorrect type.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        result = []
        for i in range(height):
            # Add spaces based on row number, then add symbols
            result.append(' ' * i + symbol * width)
            
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width and height using the given symbol.
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The width of the triangle (base).
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing the triangle.
            
        Returns:
            str: A multi-line string representing the triangle.
            
        Raises:
            ValueError: If width or height is not positive or symbol is invalid.
            TypeError: If input parameters are of incorrect type.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        result = []
        for i in range(height):
            # Calculate width of current row based on total width and height
            # This ensures the triangle reaches the desired width at the bottom
            symbols_in_row = max(1, int((i + 1) * width / height))
            result.append(symbol * symbols_in_row)
            
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height using the given symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing the pyramid.
            
        Returns:
            str: A multi-line string representing the pyramid.
            
        Raises:
            ValueError: If height is not positive or symbol is invalid.
            TypeError: If input parameters are of incorrect type.
        """
        self._validate_input(height=height, symbol=symbol)
        
        result = []
        for i in range(height):
            # Calculate number of symbols for current row
            symbols_count = 2 * i + 1
            # Calculate padding needed to center the symbols
            padding = height - i - 1
            # Add the row to the result
            row = ' ' * padding + symbol * symbols_count
            result.append(row)
            
        return '\n'.join(result)


# Example usage
def main():
    """
    Demonstrates the usage of the AsciiArt class by creating and displaying various shapes.
    """
    ascii_art = AsciiArt()
    
    print("ASCII Art Examples:\n")
    
    print("Square (4x4 using '*'):")
    print(ascii_art.draw_square(4, '*'))
    print()
    
    print("Rectangle (6x3 using '#'):")
    print(ascii_art.draw_rectangle(6, 3, '#'))
    print()
    
    print("Parallelogram (5x3 using '@'):")
    print(ascii_art.draw_parallelogram(5, 3, '@'))
    print()
    
    print("Right-angled Triangle (5x5 using '+'):")
    print(ascii_art.draw_triangle(5, 5, '+'))
    print()
    
    print("Pyramid (5 rows using '^'):")
    print(ascii_art.draw_pyramid(5, '^'))


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"An error occurred: {e}")
```

This implementation includes:

1. **Correctness**: Each method produces the expected ASCII art for the specified shapes.

2. **Performance**: The algorithms are efficient, using straightforward string operations and list comprehensions where appropriate.

3. **Modularity**: The code is structured into logical components with a clear AsciiArt class and separate methods for each shape.

4. **Security**: Input validation defends against invalid parameters through a comprehensive _validate_input method.

5. **Exception Handling**: Appropriate error types (ValueError, TypeError) with descriptive messages for different validation failures.

6. **Testability**: The methods have clear inputs and outputs, making them easy to test.

7. **Readability & Documentation**: Comprehensive docstrings, clear variable names, and helpful comments throughout.

8. **Maintainability**: The code follows a consistent style and separates concerns appropriately.

The main function demonstrates how to use the AsciiArt class to create various shapes, which helps users understand the functionality.