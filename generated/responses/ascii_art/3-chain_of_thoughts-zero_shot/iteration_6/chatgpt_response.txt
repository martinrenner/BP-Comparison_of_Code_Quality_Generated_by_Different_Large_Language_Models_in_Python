```python
class AsciiArt:
    """
    A class for generating various 2D ASCII art shapes.

    Methods
    -------
    draw_square(width: int, symbol: str) -> str
        Draws a solid square of side length 'width'.
    draw_rectangle(width: int, height: int, symbol: str) -> str
        Draws a solid rectangle of given dimensions.
    draw_parallelogram(width: int, height: int, symbol: str) -> str
        Draws a filled parallelogram that shifts one space to the right on each row.
    draw_triangle(width: int, height: int, symbol: str) -> str
        Draws a right-angled triangle (with the right angle at the top-left corner)
        where the number of symbols increases linearly from 1 to 'width' over 'height' rows.
    draw_pyramid(height: int, symbol: str) -> str
        Draws a symmetrical pyramid with the given number of rows.

    Input Validation
    ----------------
    All dimensions must be positive integers.
    The symbol must be a single non-whitespace character.
    """

    @staticmethod
    def _validate_dimension(value: int, name: str) -> None:
        """
        Validate that a dimension is a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer. Got {value}.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validate that the symbol is a single, non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError(f"Symbol must be a non-whitespace single character. Got: {symbol!r}.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a filled square with side length 'width'.

        Parameters
        ----------
        width : int
            The number of symbols per side.
        symbol : str
            The character used to draw the square.

        Returns
        -------
        str
            A multi-line string representing the square.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Create a list where each element is a string representing a row of the square.
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a filled rectangle with specified width and height.

        Parameters
        ----------
        width : int
            Number of symbols in each row.
        height : int
            Number of rows.
        symbol : str
            The character used to draw the rectangle.

        Returns
        -------
        str
            A multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a filled parallelogram. Each row is shifted by one extra space 
        starting from the top-left corner.

        Parameters
        ----------
        width : int
            The number of symbols in each row.
        height : int
            The number of rows.
        symbol : str
            The character used to draw the parallelogram.

        Returns
        -------
        str
            A multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Each subsequent row starts with one more leading space.
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a right-angled triangle with the right angle at the top-left corner.
        The number of symbols grows linearly from 1 in the first row to 'width'
        in the last row over exactly 'height' rows.

        Parameters
        ----------
        width : int
            The number of symbols in the final (base) row.
        height : int
            The total number of rows of the triangle.
        symbol : str
            The character used to draw the triangle.

        Returns
        -------
        str
            A multi-line string representing the triangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        if height == 1:
            # If there is only one row, output the full width.
            lines.append(symbol * width)
        else:
            for row in range(height):
                # Linear interpolation: first row gets 1 symbol, last row gets 'width' symbols.
                count = int(round(1 + row * (width - 1) / (height - 1)))
                lines.append(symbol * count)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid with a specified height. The pyramid is centered 
        such that the first row has one symbol and each row increases by 2 symbols.

        Parameters
        ----------
        height : int
            The number of rows (height of the pyramid).
        symbol : str
            The character used to draw the pyramid.

        Returns
        -------
        str
            A multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for row in range(height):
            num_symbols = 2 * row + 1
            spaces = height - row - 1
            # Center the row by adding leading spaces.
            line = " " * spaces + symbol * num_symbols
            lines.append(line)
        return "\n".join(lines)


if __name__ == "__main__":
    # Example usage and basic test cases.
    art = AsciiArt()

    try:
        print("Square (width = 4):")
        print(art.draw_square(4, "#"))
        print("\nRectangle (width = 6, height = 3):")
        print(art.draw_rectangle(6, 3, "*"))
        print("\nParallelogram (width = 6, height = 4):")
        print(art.draw_parallelogram(6, 4, "@"))
        print("\nTriangle (width = 7, height = 5):")
        print(art.draw_triangle(7, 5, "$"))
        print("\nPyramid (height = 5):")
        print(art.draw_pyramid(5, "+"))
    except ValueError as error:
        print(f"Input error: {error}")
```