Okay, let's break this down step-by-step and build the Python code for the console-based 2D ASCII art application, adhering to the ISO/IEC 25010 standards and your specific requirements.

**Step 1: Define the `AsciiArt` Class and Interface**

We'll start by creating the `AsciiArt` class and defining the interface methods as specified.  We'll include docstrings to explain each function's purpose, parameters, and return values.  We'll also add initial input validation.

```python
class AsciiArt:
    """
    A class for generating various ASCII art shapes.
    """

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of the specified width filled with the given symbol.

        Args:
            width: The width of the square.
            symbol: The character to use for drawing the square.

        Returns:
            A string representing the ASCII art square.

        Raises:
            ValueError: If width is not positive, or symbol is not a single
                        printable character.
        """
        self._validate_input(width, symbol)  # Call the validation method
        return '\n'.join([symbol * width for _ in range(width)])

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle of the specified width and height, filled with the given symbol.

        Args:
            width: The width of the rectangle.
            height: The height of the rectangle.
            symbol: The character to use for drawing.

        Returns:
            A string representing the ASCII art rectangle.

        Raises:
            ValueError: If width or height are not positive, or symbol is invalid.
        """
        self._validate_input(width, symbol, height) # Validate both dimensions
        return '\n'.join([symbol * width for _ in range(height)])

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram.

        Args:
            width: The width of the parallelogram.
            height: The height of the parallelogram.
            symbol: The symbol to use for drawing.

        Returns:
            A string representing the ASCII art parallelogram.

        Raises:
            ValueError: If width or height are not positive, or if the symbol is not valid.
        """

        self._validate_input(width, symbol, height)
        result = []
        for i in range(height):
            result.append(" " * i + symbol * width)
        return "\n".join(result)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.

        Args:
            width: The base width of the triangle.
            height: The height of the triangle.
            symbol: The symbol to use for drawing.

        Returns:
            A string representing the ASCII art triangle.

        Raises:
            ValueError:  If width or height are not positive, if width is greater than height
                        or if the symbol is invalid.
        """
        self._validate_input(width, symbol, height)
        if width > height:
            raise ValueError("Width cannot be greater than height for a right-angled triangle.")

        result = []
        for i in range(1, width + 1):
            result.append(symbol * i)
        return "\n".join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid.

        Args:
            height: The height of the pyramid.
            symbol: The symbol to use.

        Returns:
            A string representing the ASCII art pyramid.

        Raises:
            ValueError: If height is not positive or symbol is invalid.
        """
        self._validate_input(height, symbol) # We use a single-argument validation here.
        result = []
        for i in range(1, height + 1):
            spaces = " " * (height - i)
            symbols = symbol * (2 * i - 1)
            result.append(spaces + symbols)
        return "\n".join(result)

    def _validate_input(self, *args):
        """
        Validates the input parameters for the drawing functions.  Checks for
        positive dimensions and a single, printable symbol.

        Args:
            *args: A variable number of arguments.  The first n-1 arguments are
            treated as dimensions (width, height) and must be positive integers.
            The last argument is always the symbol and must be a single
            printable character.

        Raises:
            ValueError: If any dimension is not a positive integer, or if
                the symbol is not a single, printable character.
        """
        *dimensions, symbol = args

        for dim in dimensions:
            if not isinstance(dim, int) or dim <= 0:
                raise ValueError("Dimensions must be positive integers.")

        if not isinstance(symbol, str) or len(symbol) != 1 or not symbol.isprintable() or symbol.isspace():
            raise ValueError("Symbol must be a single printable character (and not whitespace).")

# --- End of Class Definition ---
```

**Step 2: Example Usage (and Implicit Testing)**

Let's add a simple example of how to use the class. This also acts as a basic, informal test of the functionality.

```python
# Example Usage (and basic testing)
if __name__ == "__main__":
    art_generator = AsciiArt()

    try:
        square = art_generator.draw_square(5, "#")
        print("Square:\n", square)

        rectangle = art_generator.draw_rectangle(7, 3, "*")
        print("\nRectangle:\n", rectangle)

        parallelogram = art_generator.draw_parallelogram(6, 4, "+")
        print("\nParallelogram:\n", parallelogram)
        
        triangle = art_generator.draw_triangle(4, 4, "X")
        print("\nTriangle:\n", triangle)

        pyramid = art_generator.draw_pyramid(5, "@")
        print("\nPyramid:\n", pyramid)

        # Demonstrating error handling:
        # invalid_square = art_generator.draw_square(-5, "#")  # Raises ValueError
        # invalid_symbol = art_generator.draw_rectangle(4, 2, "##")  # Raises ValueError
        # invalid_triangle = art_generator.draw_triangle(5, 3, "O") # Raises ValueError
        invalid_pyramid = art_generator.draw_pyramid(5, ' ') # Raises ValueError

    except ValueError as e:
        print(f"Error: {e}")
```

**Explanation and ISO/IEC 25010 Considerations:**

*   **Functionality (Completeness, Correctness):** The code implements all required functions (draw_square, draw_rectangle, draw_parallelogram, draw_triangle, draw_pyramid) and produces the correct ASCII art output based on the given inputs. The functions return multi-line strings as requested.
*   **Reliability (Error Handling):** The `_validate_input` method and specific checks within `draw_triangle` ensure that the code handles invalid inputs (negative dimensions, non-single characters, whitespace symbols) gracefully by raising `ValueError` exceptions.  This prevents unexpected crashes and provides informative error messages.
*   **Usability (Understandability, Operability):** The code is well-documented with docstrings explaining each function's purpose, parameters, return values, and potential exceptions.  Variable names are clear (e.g., `width`, `height`, `symbol`). The example usage demonstrates how to use the `AsciiArt` class.
*   **Efficiency (Time behavior):** The algorithms used are efficient for the task. We use list comprehensions and string multiplication, which are generally performant operations in Python for building strings.
*   **Maintainability (Modularity, Reusability, Analysability, Modifiability, Testability):**
    *   **Modularity:** The code is organized into a class (`AsciiArt`), separating the ASCII art generation logic from the example/testing code.  The validation logic is encapsulated in a separate `_validate_input` method.
    *   **Reusability:** The `AsciiArt` class can be easily reused in other programs or modules.
    *   **Analysability:**  The code is straightforward and easy to understand, reducing the time needed for analysis and debugging.
    *   **Modifiability:** If new shapes need to be added, new methods can be added to the `AsciiArt` class without affecting existing functionality.  Changes within a single shape's drawing function will not impact other shapes.
    *   **Testability:**  The clear separation of concerns and the use of a dedicated validation method make the code easily testable.  Unit tests could be written to verify the behavior of each drawing function with various valid and invalid inputs.
*   **Portability (Installability, Replaceability):**  The code is pure Python and does not have any external dependencies (beyond the standard library). This makes it highly portable and easy to install on any system with a Python interpreter.

**Further Improvements & Considerations for a Real-World Application:**

*   **Comprehensive Unit Tests:** Create a separate test suite (e.g., using `unittest` or `pytest`) to thoroughly test each function with a wide range of inputs, including edge cases and boundary conditions.
*   **More Shape Options:**  Expand the `AsciiArt` class with methods for drawing circles, ellipses, lines, and other geometric shapes.
*   **Customizable Shading:**  Allow users to specify different fill characters or shading patterns.
*   **Color Support:** Use ANSI escape codes to add color to the ASCII art (consider a separate class or module for color handling to maintain modularity).
*   **Command-Line Interface (CLI):**  Use a library like `argparse` to create a more user-friendly command-line interface, allowing users to specify shapes, sizes, and symbols as command-line arguments.
*   **File Input/Output:**  Add the ability to read shape definitions from a file or save the generated ASCII art to a file.
*   **More Sophisticated Error Handling:** Consider using custom exception classes for more specific error reporting.

This comprehensive, well-structured, and thoroughly documented solution addresses the prompt's requirements, adheres to good coding practices, and provides a strong foundation for a console-based ASCII art application. The code prioritizes readability, maintainability, and testability, aligning with the principles of ISO/IEC 25010.
