# ASCII Art Generator

I'll design a comprehensive 2D ASCII art generator that meets all the specified requirements with a focus on the ISO/IEC 25010 quality attributes.

```python
class AsciiArt:
    """
    A class for generating various ASCII art shapes.
    
    This class implements drawing functionality for common geometric shapes
    using ASCII characters. Each shape is represented as a multi-line string
    filled with a user-specified symbol.
    """
    
    @staticmethod
    def _validate_input(symbol: str, *dimensions: int) -> None:
        """
        Validate input parameters for all drawing methods.
        
        Args:
            symbol: The character to use for drawing
            *dimensions: Width, height or other dimension parameters
            
        Raises:
            ValueError: If symbol is not a single character or is whitespace
            ValueError: If any dimension is negative or zero
        """
        # Validate symbol
        if len(symbol) != 1:
            raise ValueError("Symbol must be exactly one character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace")
            
        # Validate dimensions
        for dimension in dimensions:
            if dimension <= 0:
                raise ValueError("Dimensions must be positive integers")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a square filled with the specified symbol.
        
        Args:
            width: The width and height of the square
            symbol: Character to use for drawing
            
        Returns:
            A multi-line string representing the square
            
        Raises:
            ValueError: If inputs are invalid
        """
        self._validate_input(symbol, width)
        
        # For a square, width equals height
        lines = []
        for _ in range(width):
            lines.append(symbol * width)
            
        return '\n'.join(lines)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a rectangle filled with the specified symbol.
        
        Args:
            width: The width of the rectangle
            height: The height of the rectangle
            symbol: Character to use for drawing
            
        Returns:
            A multi-line string representing the rectangle
            
        Raises:
            ValueError: If inputs are invalid
        """
        self._validate_input(symbol, width, height)
        
        lines = []
        for _ in range(height):
            lines.append(symbol * width)
            
        return '\n'.join(lines)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a parallelogram filled with the specified symbol.
        
        A parallelogram starts from the top-left and grows diagonally to the right,
        with each row shifted by one space to the right.
        
        Args:
            width: The width of the parallelogram
            height: The height of the parallelogram
            symbol: Character to use for drawing
            
        Returns:
            A multi-line string representing the parallelogram
            
        Raises:
            ValueError: If inputs are invalid
        """
        self._validate_input(symbol, width, height)
        
        lines = []
        for i in range(height):
            # Add i spaces before each row to create the diagonal effect
            lines.append(' ' * i + symbol * width)
            
        return '\n'.join(lines)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a right-angled triangle filled with the specified symbol.
        
        The triangle grows from the top-left corner diagonally to the right.
        
        Args:
            width: The base width of the triangle
            height: The height of the triangle
            symbol: Character to use for drawing
            
        Returns:
            A multi-line string representing the triangle
            
        Raises:
            ValueError: If inputs are invalid
        """
        self._validate_input(symbol, width, height)
        
        lines = []
        # Calculate how much width to add per row
        step = width / height if height > 0 else 0
        
        for i in range(height):
            # Calculate width for the current row, ensuring it's at least 1
            current_width = max(1, int((i + 1) * step))
            lines.append(symbol * current_width)
            
        return '\n'.join(lines)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height: The height of the pyramid
            symbol: Character to use for drawing
            
        Returns:
            A multi-line string representing the pyramid
            
        Raises:
            ValueError: If inputs are invalid
        """
        self._validate_input(symbol, height)
        
        lines = []
        for i in range(height):
            # Calculate spaces before symbols to center the pyramid
            spaces = ' ' * (height - i - 1)
            # Calculate symbols for current row (2i+1 for symmetrical growth)
            symbols = symbol * (2 * i + 1)
            lines.append(spaces + symbols)
            
        return '\n'.join(lines)


def main():
    """
    Main function to demonstrate the AsciiArt class functionality.
    """
    art = AsciiArt()
    
    try:
        # Demo examples
        print("Square (5x5):")
        print(art.draw_square(5, "*"))
        print("\nRectangle (10x3):")
        print(art.draw_rectangle(10, 3, "#"))
        print("\nParallelogram (8x4):")
        print(art.draw_parallelogram(8, 4, "+"))
        print("\nRight-angled Triangle (8x4):")
        print(art.draw_triangle(8, 4, "="))
        print("\nPyramid (6):")
        print(art.draw_pyramid(6, "@"))
        
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Code Quality Attributes

1. **Correctness**: The code produces the expected ASCII art shapes with proper validation.

2. **Performance**: The code uses simple string multiplication and joining operations, which are efficient for ASCII art generation.

3. **Modularity**: The code is organized into a class with separate methods for each shape and a common validation method.

4. **Security**: Input validation protects against invalid inputs (negative dimensions, multi-character symbols, etc.).

5. **Testability**: Each method has clear inputs and outputs, making unit testing straightforward.

6. **Readability & Documentation**: The code includes comprehensive docstrings, type hints, and clear variable names.

7. **Error Handling**: The code uses appropriate built-in error types (ValueError) with descriptive messages.

8. **Maintainability**: The centralized validation and consistent method signatures make the code easy to maintain and extend.

The main function demonstrates how to use each method and provides visual examples of the output.