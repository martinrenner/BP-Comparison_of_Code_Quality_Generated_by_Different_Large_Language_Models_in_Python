```python
"""
Console-based 2D ASCII Art Generator

This application provides a set of functions to draw various filled ASCII shapes:
  • Square
  • Rectangle
  • Parallelogram (with each row shifted one space to the right)
  • Right-angled triangle (grows from one symbol at the top to a given width at the bottom)
  • Pyramid (symmetrical, centered)

The core functionality is encapsulated in the AsciiArt class which implements the
required interface. Input validation is performed to ensure:
  - Dimensions (width/height) are positive integers.
  - The symbol is a single, non-whitespace printable character.

The code is structured to meet ISO/IEC 25010 quality requirements (functionality,
performance, modularity, security/testability, and readability).
"""

import math


class AsciiArt:
    """
    Class to generate various ASCII art shapes.
    """

    def _validate_dimension(self, value: int, name: str = "dimension"):
        """
        Validates that a dimension is a positive integer.
        :param value: The dimension value to check.
        :param name: Name of the dimension (for error messages).
        :raises ValueError: If the value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name.capitalize()} must be a positive integer.")

    def _validate_symbol(self, symbol: str):
        """
        Validates that the symbol is a single non-whitespace character.
        :param symbol: The symbol to validate.
        :raises ValueError: If the symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of size (width x width) filled with the given symbol.

        :param width: The width (and height) of the square.
        :param symbol: The symbol used to draw the square.
        :return: A multi-line string representing the square.
        :raises ValueError: If validation of inputs fails.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Build each row of the square
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle of size (width x height) filled with the given symbol.

        :param width: The width of the rectangle.
        :param height: The height of the rectangle.
        :param symbol: The symbol used to draw the rectangle.
        :return: A multi-line string representing the rectangle.
        :raises ValueError: If validation of inputs fails.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the top-left corner at the origin.
        Each row is shifted one additional space to the right from the previous row.

        :param width: The width of the parallelogram (number of symbols per row).
        :param height: The height (number of rows).
        :param symbol: The symbol used to draw the parallelogram.
        :return: A multi-line string representing the parallelogram.
        :raises ValueError: If validation of inputs fails.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Prepend i spaces to shift the row to the right
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled right-angled triangle that grows diagonally to the right.
        The triangle starts with 1 symbol at the top-left and ends with 'width'
        symbols at the bottom row. The number of symbols in intermediary rows is
        computed to scale linearly.

        The algorithm uses a linear interpolation:
          For height > 1:
            num_symbols = floor(i * (width - 1) / (height - 1)) + 1 for row i (0-indexed)
          For height == 1: a single row with 'width' symbols is returned.

        :param width: The number of symbols in the bottom row.
        :param height: The total number of rows in the triangle.
        :param symbol: The symbol used to draw the triangle.
        :return: A multi-line string representing the triangle.
        :raises ValueError: If validation of inputs fails.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        if height == 1:
            # Single row: simply return width symbols
            lines.append(symbol * width)
        else:
            for i in range(height):
                # Linear interpolation: Ensure first row has 1 symbol and last row has exactly 'width'
                num_symbols = math.floor(i * (width - 1) / (height - 1)) + 1
                # Safety check: do not exceed 'width'
                num_symbols = min(num_symbols, width)
                lines.append(symbol * num_symbols)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical (centered) pyramid using the given symbol.
        Each row contains an odd number of symbols, with the top row having 1 symbol and
        each subsequent row adding 2 more symbols. The pyramid is centered by preceding
        each row with an appropriate number of spaces.

        :param height: The number of rows in the pyramid.
        :param symbol: The symbol used to draw the pyramid.
        :return: A multi-line string representing the pyramid.
        :raises ValueError: If validation of inputs fails.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            num_symbols = 2 * i + 1
            # Calculate leading spaces to center the pyramid
            spaces = height - i - 1
            line = " " * spaces + symbol * num_symbols
            lines.append(line)
        return "\n".join(lines)


def main():
    """
    Main function for the console-based ASCII Art Generator.
    Provides an interactive menu for users to choose a shape and specify parameters.
    """
    art = AsciiArt()

    menu = (
        "\nASCII Art Generator\n"
        "---------------------\n"
        "Select a shape to draw:\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Right Triangle\n"
        "5. Pyramid\n"
        "6. Exit\n"
    )
    
    while True:
        print(menu)
        choice = input("Enter choice (1-6): ").strip()
        if choice not in {"1", "2", "3", "4", "5", "6"}:
            print("Invalid choice. Please try again.\n")
            continue

        if choice == "6":
            print("Goodbye!")
            break

        try:
            # For shapes that require width and height inputs
            if choice in {"1", "2", "3", "4"}:
                width_input = input("Enter width (positive integer): ").strip()
                width = int(width_input)
            if choice in {"2", "3", "4"}:
                height_input = input("Enter height (positive integer): ").strip()
                height = int(height_input)
            if choice == "5":
                # Pyramid uses only height
                height_input = input("Enter height (positive integer): ").strip()
                height = int(height_input)

            symbol = input("Enter a printable symbol (single non-whitespace character): ").strip()
            if len(symbol) != 1:
                raise ValueError("Please enter exactly one character for the symbol.")

            # Generate the ASCII art based on the selected shape
            if choice == "1":
                result = art.draw_square(width, symbol)
            elif choice == "2":
                result = art.draw_rectangle(width, height, symbol)
            elif choice == "3":
                result = art.draw_parallelogram(width, height, symbol)
            elif choice == "4":
                result = art.draw_triangle(width, height, symbol)
            elif choice == "5":
                result = art.draw_pyramid(height, symbol)
            else:
                result = ""

            print("\n" + result + "\n")
        except ValueError as ve:
            print("Error:", ve)
        except Exception as e:
            print("Unexpected error:", e)


if __name__ == "__main__":
    main()
```