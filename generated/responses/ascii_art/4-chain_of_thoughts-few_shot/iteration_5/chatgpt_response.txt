```python
class AsciiArt:
    """
    A class for generating filled ASCII art shapes.

    This class implements a set of methods for drawing various 2D shapes in ASCII.
    Each shape is completely filled with a chosen symbol. The methods validate all 
    inputs to ensure dimensions are positive integers and that the symbol is a single,
    printable, non-whitespace character.
    """

    @staticmethod
    def _validate_dimension(value: int, name: str) -> None:
        """
        Validates that a dimension (width or height) is a positive integer.

        Args:
            value (int): The dimension value to validate.
            name (str): The name of the dimension (e.g., "width" or "height").

        Raises:
            ValueError: If the dimension is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name.capitalize()} must be a positive integer. Got: {value}")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validates that the drawing symbol is a single printable, non-whitespace character.

        Args:
            symbol (str): The symbol to validate.

        Raises:
            ValueError: If the symbol is not exactly one printable, non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace() or not symbol.isprintable():
            raise ValueError("Symbol must be a single printable, non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a filled square of a given width using the specified symbol.

        Args:
            width (int): The size of each side of the square.
            symbol (str): A single printable, non-whitespace character for drawing.

        Returns:
            str: A multi-line string representing the square.

        Raises:
            ValueError: If the width or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Each row of the square consists of 'width' copies of the symbol.
        line = symbol * width
        return "\n".join(line for _ in range(width))

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled rectangle using the specified dimensions and symbol.

        Args:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): A single printable, non-whitespace character for drawing.

        Returns:
            str: A multi-line string representing the rectangle.

        Raises:
            ValueError: If the width, height, or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        line = symbol * width
        return "\n".join(line for _ in range(height))

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled parallelogram that grows diagonally to the right.
        Each subsequent row is indented by one additional space, starting at the top-left.

        Args:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): A single printable, non-whitespace character for drawing.

        Returns:
            str: A multi-line string representing the parallelogram.

        Raises:
            ValueError: If the width, height, or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            indent = " " * i
            row = indent + symbol * width
            rows.append(row)
        return "\n".join(rows)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a filled right-angled triangle that grows diagonally to the right.
        The triangle is constructed with a specified number of rows (height)
        and a base length (width). Each row is indented by its row number
        to create the diagonal effect, and the number of symbols in each row scales
        linearly so that the bottom row has exactly 'width' symbols.

        For example, calling draw_triangle(width=10, height=5, symbol="*") might produce:
            ** 
             ****
              ******
               ********
                **********
        (Note: actual symbol counts per row are determined by linear scaling and rounding.)

        Args:
            width (int): The number of symbols in the triangle's base (last row).
            height (int): The total number of rows in the triangle.
            symbol (str): A single printable, non-whitespace character for drawing.

        Returns:
            str: A multi-line string representing the right-angled triangle.

        Raises:
            ValueError: If the width, height, or symbol is invalid.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # Compute the number of symbols for this row. Linear interpolation ensures that
            # the last row has exactly 'width' symbols.
            if height == 1:
                num_symbols = width
            else:
                num_symbols = max(1, round((i + 1) * (width / height)))
            indent = " " * i
            row = indent + (symbol * num_symbols)
            rows.append(row)
        return "\n".join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a filled, symmetrical pyramid with the specified height.
        The pyramid is centered and the width of the base is (2 * height - 1).

        For example, calling draw_pyramid(height=4, symbol="$") produces:
               $
              $$$
             $$$$$
            $$$$$$$

        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): A single printable, non-whitespace character for drawing.

        Returns:
            str: A multi-line string representing the pyramid.

        Raises:
            ValueError: If the height or symbol is invalid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            num_symbols = 2 * i + 1
            num_spaces = height - i - 1
            row = " " * num_spaces + symbol * num_symbols
            rows.append(row)
        return "\n".join(rows)


# Example usage in a console-based application.
if __name__ == '__main__':
    # Create an instance of the AsciiArt class
    art = AsciiArt()

    # Demonstrate drawing each shape with example parameters.
    try:
        print("Square (width=5):")
        print(art.draw_square(5, '#'))
        print("\nRectangle (width=6, height=3):")
        print(art.draw_rectangle(6, 3, '*'))
        print("\nParallelogram (width=7, height=4):")
        print(art.draw_parallelogram(7, 4, '@'))
        print("\nTriangle (width=10, height=5):")
        print(art.draw_triangle(10, 5, '%'))
        print("\nPyramid (height=4):")
        print(art.draw_pyramid(4, '$'))
    except ValueError as ve:
        print(f"Input error: {ve}")
```