I'll create a console-based ASCII art application that meets the requirements using object-oriented programming principles.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to draw various ASCII art shapes using
    a specified symbol character. Each method performs input validation
    and returns a multi-line string representing the shape.
    """

    @staticmethod
    def _validate_inputs(width: int, height: int, symbol: str) -> None:
        """
        Validates the input parameters for all drawing methods.
        
        Args:
            width (int): The width of the shape.
            height (int): The height of the shape.
            symbol (str): The character to use for drawing.
            
        Raises:
            ValueError: If width or height is negative or zero.
            ValueError: If symbol is not exactly one character.
            ValueError: If symbol is a whitespace character.
        """
        if width <= 0:
            raise ValueError("Width must be a positive integer.")
        if height <= 0:
            raise ValueError("Height must be a positive integer.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be exactly one character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width and symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the square.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        # For a square, width = height
        self._validate_inputs(width, width, symbol)
        
        # Create a row of symbols
        row = symbol * width
        
        # Repeat the row for each line
        return '\n'.join([row for _ in range(width)])
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width, height and symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the rectangle.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(width, height, symbol)
        
        # Create a row of symbols
        row = symbol * width
        
        # Repeat the row for each line
        return '\n'.join([row for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width, height and symbol.
        Each row is shifted by one space to create the diagonal effect.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the parallelogram.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(width, height, symbol)
        
        result = []
        for i in range(height):
            # Add spaces before each row based on the row number
            spaces = ' ' * i
            # Create a row of symbols
            row = spaces + symbol * width
            result.append(row)
        
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width, height and symbol.
        The triangle grows diagonally to the right from the top-left corner.
        
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the triangle.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(width, height, symbol)
        
        result = []
        # Calculate the symbols per row
        symbols_per_row = [round(width * (i + 1) / height) for i in range(height)]
        
        for num_symbols in symbols_per_row:
            row = symbol * num_symbols
            result.append(row)
        
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height and symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing.
            
        Returns:
            str: A multi-line string representing the pyramid.
            
        Raises:
            ValueError: If inputs are invalid.
        """
        # Validate inputs (width not needed for pyramid)
        self._validate_inputs(1, height, symbol)
        
        result = []
        for i in range(1, height + 1):
            # Calculate spaces and symbols for this row
            spaces = ' ' * (height - i)
            symbols = symbol * (2 * i - 1)
            # Combine spaces and symbols
            row = spaces + symbols
            result.append(row)
        
        return '\n'.join(result)


def main():
    """
    Main function to demonstrate the AsciiArt class.
    """
    art = AsciiArt()
    
    print("ASCII Art Generator")
    print("------------------")
    
    try:
        while True:
            print("\nChoose a shape to draw:")
            print("1. Square")
            print("2. Rectangle")
            print("3. Parallelogram")
            print("4. Triangle")
            print("5. Pyramid")
            print("6. Exit")
            
            choice = input("Enter your choice (1-6): ")
            
            if choice == '6':
                print("Goodbye!")
                break
            
            symbol = input("Enter a symbol to use (single character): ")
            
            try:
                if choice == '1':
                    width = int(input("Enter width: "))
                    print("\n" + art.draw_square(width, symbol))
                    
                elif choice == '2':
                    width = int(input("Enter width: "))
                    height = int(input("Enter height: "))
                    print("\n" + art.draw_rectangle(width, height, symbol))
                    
                elif choice == '3':
                    width = int(input("Enter width: "))
                    height = int(input("Enter height: "))
                    print("\n" + art.draw_parallelogram(width, height, symbol))
                    
                elif choice == '4':
                    width = int(input("Enter width: "))
                    height = int(input("Enter height: "))
                    print("\n" + art.draw_triangle(width, height, symbol))
                    
                elif choice == '5':
                    height = int(input("Enter height: "))
                    print("\n" + art.draw_pyramid(height, symbol))
                    
                else:
                    print("Invalid choice. Please try again.")
                    
            except ValueError as e:
                print(f"Error: {e}")
                
    except KeyboardInterrupt:
        print("\nProgram terminated by user.")


if __name__ == "__main__":
    main()
```

This implementation meets all the specified requirements:

1. **Functionality Requirements**:
   - Implemented all required shape drawing functions
   - Each function draws the specified shape using ASCII characters

2. **Implementation Requirements**:
   - Used OOP with an `AsciiArt` class
   - Implemented all required interface methods
   - Comprehensive input validation
   - Each shape is filled with the chosen symbol
   - Each function returns a multi-line string

3. **Code Quality Requirements**:
   - Correctness: The code produces the expected ASCII art shapes
   - Performance: Uses efficient algorithms for drawing shapes
   - Modularity: Code is structured with clear separation of concerns
   - Security: Validates all inputs to prevent invalid data
   - Testability: Methods are well-defined and can be tested independently
   - Readability & Documentation: Used docstrings, clear variable names, and meaningful comments

The `main()` function provides a simple interactive interface to demonstrate the functionality of the `AsciiArt` class.