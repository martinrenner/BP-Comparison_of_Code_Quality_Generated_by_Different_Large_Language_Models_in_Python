```python
class AsciiArt:
    """
    A class for generating 2D ASCII art shapes.

    This class implements methods to draw various filled ASCII shapes:
     - Square
     - Rectangle
     - Parallelogram (with a diagonal shift)
     - Right-angled Triangle (growing diagonally from the top-left corner)
     - Symmetrical Pyramid
    """

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validates that the provided symbol is a single, non-whitespace character.

        Args:
            symbol (str): The symbol to be used for drawing.

        Raises:
            ValueError: If the symbol is not exactly one character or is whitespace.
        """
        if not isinstance(symbol, str):
            raise ValueError("Symbol must be a string.")
        if len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def _validate_dimensions(self, *dimensions: int) -> None:
        """
        Validates that all provided dimensions are positive integers.

        Args:
            *dimensions (int): One or more dimension values.

        Raises:
            ValueError: If any dimension is not a positive integer.
        """
        for dim in dimensions:
            if not isinstance(dim, int) or dim <= 0:
                raise ValueError("Dimensions must be positive integers.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square using the specified symbol.

        Each side of the square has the length 'width'.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the square.
        """
        self._validate_dimensions(width)
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle using the specified symbol.

        Args:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the rectangle.
        """
        self._validate_dimensions(width, height)
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram using the specified symbol.

        The parallelogram grows diagonally to the right, starting from the top-left corner.
        Each subsequent row is shifted by one space to the right relative to the previous row.

        Args:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the parallelogram.
        """
        self._validate_dimensions(width, height)
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle using the specified symbol.

        The triangle grows diagonally to the right from the top-left corner.
        The number of symbols in each row increases from 1 (in the first row)
        to 'width' in the last row, scaled over the total number of rows ('height').

        Args:
            width (int): The maximum number of symbols in the final row.
            height (int): The number of rows in the triangle.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the triangle.
        """
        self._validate_dimensions(width, height)
        self._validate_symbol(symbol)

        lines = []
        # Calculate the number of symbols per row in a linear progression.
        for i in range(height):
            # Calculate symbols count based on the current row index.
            count = max(1, round((i + 1) * width / height))
            # Ensure count does not exceed the specified maximum width.
            count = min(count, width)
            lines.append(symbol * count)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid using the specified symbol.

        The pyramid has 'height' rows and is centered.
        The base of the pyramid will have (2 * height - 1) symbols.

        Args:
            height (int): The number of rows for the pyramid.
            symbol (str): The symbol to use for drawing.

        Returns:
            str: A multi-line string representing the pyramid.
        """
        self._validate_dimensions(height)
        self._validate_symbol(symbol)

        lines = []
        base_width = 2 * height - 1  # Maximum width of the pyramid's base.
        for i in range(height):
            num_symbols = 2 * i + 1
            spaces = (base_width - num_symbols) // 2
            line = " " * spaces + symbol * num_symbols + " " * spaces
            lines.append(line)
        return "\n".join(lines)


def main():
    """
    Main function to run the console-based ASCII Art application.

    Provides a simple menu for the user to choose a shape and input parameters.
    If invalid inputs are provided, appropriate error messages are displayed.
    """
    art = AsciiArt()
    menu = (
        "\nChoose a shape to draw:\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Triangle (Right-Angled)\n"
        "5. Pyramid\n"
        "6. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice (1-6): ").strip()
        if choice == "6":
            print("Exiting the ASCII Art application. Goodbye!")
            break

        try:
            if choice == "1":
                width = int(input("Enter width of the square: "))
                symbol = input("Enter symbol (one character): ")
                print("\n" + art.draw_square(width, symbol))
            elif choice == "2":
                width = int(input("Enter width of the rectangle: "))
                height = int(input("Enter height of the rectangle: "))
                symbol = input("Enter symbol (one character): ")
                print("\n" + art.draw_rectangle(width, height, symbol))
            elif choice == "3":
                width = int(input("Enter width of the parallelogram: "))
                height = int(input("Enter height of the parallelogram: "))
                symbol = input("Enter symbol (one character): ")
                print("\n" + art.draw_parallelogram(width, height, symbol))
            elif choice == "4":
                width = int(input("Enter maximum width for the triangle: "))
                height = int(input("Enter height (number of rows) for the triangle: "))
                symbol = input("Enter symbol (one character): ")
                print("\n" + art.draw_triangle(width, height, symbol))
            elif choice == "5":
                height = int(input("Enter height of the pyramid: "))
                symbol = input("Enter symbol (one character): ")
                print("\n" + art.draw_pyramid(height, symbol))
            else:
                print("Invalid choice. Please select a number between 1 and 6.")
        except ValueError as error:
            print(f"Input error: {error}")
        except Exception as error:
            print(f"An unexpected error occurred: {error}")


if __name__ == "__main__":
    main()
```