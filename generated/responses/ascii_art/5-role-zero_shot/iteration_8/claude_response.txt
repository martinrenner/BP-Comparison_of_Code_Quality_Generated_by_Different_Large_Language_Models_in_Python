# ASCII Art Application

I'll develop a console-based 2D ASCII Art application that meets all the specified requirements using object-oriented programming principles and clean code practices.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to draw various ASCII art shapes such as squares,
    rectangles, parallelograms, triangles, and pyramids.
    """
    
    @staticmethod
    def _validate_input(symbol: str, *dimensions: int) -> None:
        """
        Validates the input parameters for all drawing methods.
        
        Args:
            symbol: The character to be used for drawing the shape.
            *dimensions: Variable number of integer dimensions (width, height, etc.)
            
        Raises:
            ValueError: If the symbol is not a single printable character or if any dimension is negative.
            TypeError: If dimensions are not integers.
        """
        # Check if symbol is a single non-whitespace character
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace")
            
        # Check if all dimensions are positive integers
        for i, dimension in enumerate(dimensions):
            if not isinstance(dimension, int):
                raise TypeError(f"Dimension must be an integer, got {type(dimension).__name__}")
            if dimension <= 0:
                raise ValueError(f"Dimension must be positive, got {dimension}")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width, filled with the given symbol.
        
        Args:
            width: The width and height of the square.
            symbol: The character to fill the square with.
            
        Returns:
            A multi-line string representing the ASCII square.
            
        Raises:
            ValueError: If width is not positive or symbol is invalid.
            TypeError: If width is not an integer.
        """
        self._validate_input(symbol, width)
        
        # A square is a rectangle with equal width and height
        return self.draw_rectangle(width, width, symbol)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width and height, filled with the given symbol.
        
        Args:
            width: The width of the rectangle.
            height: The height of the rectangle.
            symbol: The character to fill the rectangle with.
            
        Returns:
            A multi-line string representing the ASCII rectangle.
            
        Raises:
            ValueError: If width/height is not positive or symbol is invalid.
            TypeError: If width/height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Create a rectangle by repeating the symbol width times for each of the height rows
        return '\n'.join([symbol * width for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width and height, filled with the given symbol.
        Each row is shifted one position to the right from the row above it.
        
        Args:
            width: The width of the parallelogram.
            height: The height of the parallelogram.
            symbol: The character to fill the parallelogram with.
            
        Returns:
            A multi-line string representing the ASCII parallelogram.
            
        Raises:
            ValueError: If width/height is not positive or symbol is invalid.
            TypeError: If width/height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # For each row, add increasing number of spaces followed by the symbols
        result = []
        for i in range(height):
            result.append(' ' * i + symbol * width)
        
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width and height, filled with the given symbol.
        The triangle grows diagonally to the right.
        
        Args:
            width: The base width of the triangle.
            height: The height of the triangle.
            symbol: The character to fill the triangle with.
            
        Returns:
            A multi-line string representing the ASCII right-angled triangle.
            
        Raises:
            ValueError: If width/height is not positive or symbol is invalid.
            TypeError: If width/height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Calculate how many symbols to add in each row
        result = []
        for i in range(height):
            # Calculate the number of symbols for current row
            symbols_in_row = max(1, int((i + 1) * width / height))
            result.append(symbol * symbols_in_row)
        
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height, filled with the given symbol.
        
        Args:
            height: The height of the pyramid.
            symbol: The character to fill the pyramid with.
            
        Returns:
            A multi-line string representing the ASCII pyramid.
            
        Raises:
            ValueError: If height is not positive or symbol is invalid.
            TypeError: If height is not an integer.
        """
        self._validate_input(symbol, height)
        
        # Calculate base width of the pyramid
        width = 2 * height - 1
        
        result = []
        for i in range(height):
            # Calculate number of symbols in this row
            symbols_in_row = 2 * i + 1
            # Calculate padding to center the symbols
            padding = (width - symbols_in_row) // 2
            
            # Add the spaces and symbols for this row
            result.append(' ' * padding + symbol * symbols_in_row)
        
        return '\n'.join(result)
```

This implementation follows all the specified requirements:

1. It implements an `AsciiArt` class with all required methods: `draw_square`, `draw_rectangle`, `draw_parallelogram`, `draw_triangle`, and `draw_pyramid`.
2. Every method performs input validation through a helper method `_validate_input`.
3. Each shape is filled with the specified symbol.
4. Each method returns a multi-line string representation of the ASCII art.
5. The code follows best practices for:
   - Correctness: Each method produces the expected output
   - Performance: Uses efficient algorithms with appropriate time complexity
   - Modularity: The code is organized into a well-structured class with clear method boundaries
   - Security: All inputs are validated to protect against invalid input
   - Testability: Methods are clean and have clear inputs and outputs
   - Readability & Documentation: Comprehensive docstrings, clear variable names, and helpful comments

The application could be extended with a main function to create a user interface if needed, but the core functionality is fully implemented in this class.