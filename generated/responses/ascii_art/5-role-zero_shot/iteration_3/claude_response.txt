# ASCII Art Application

I'll develop a console-based 2D ASCII Art application that meets all the specified requirements. This implementation will focus on clean architecture, efficiency, and adherence to the ISO/IEC 25010 standard.

```python
class AsciiArt:
    """
    AsciiArt class for generating various ASCII art shapes.
    
    This class provides functionality to draw ASCII shapes like squares,
    rectangles, parallelograms, triangles, and pyramids.
    """
    
    @staticmethod
    def _validate_input(width=None, height=None, symbol=None):
        """
        Validate input parameters for the drawing functions.
        
        Args:
            width (int, optional): Width of the shape.
            height (int, optional): Height of the shape.
            symbol (str, optional): Character to use for drawing.
            
        Raises:
            ValueError: If any of the inputs are invalid.
            TypeError: If inputs are of incorrect type.
        """
        # Validate width
        if width is not None:
            if not isinstance(width, int):
                raise TypeError("Width must be an integer")
            if width <= 0:
                raise ValueError("Width must be a positive integer")
        
        # Validate height
        if height is not None:
            if not isinstance(height, int):
                raise TypeError("Height must be an integer")
            if height <= 0:
                raise ValueError("Height must be a positive integer")
        
        # Validate symbol
        if symbol is not None:
            if not isinstance(symbol, str):
                raise TypeError("Symbol must be a string")
            if len(symbol) != 1:
                raise ValueError("Symbol must be a single character")
            if symbol.isspace():
                raise ValueError("Symbol cannot be a whitespace character")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a square with the given width and symbol.
        
        Args:
            width (int): Width and height of the square.
            symbol (str): Character to use for drawing the square.
            
        Returns:
            str: A multi-line string representing the ASCII art square.
            
        Raises:
            ValueError: If inputs are invalid.
            TypeError: If inputs are of incorrect type.
        """
        self._validate_input(width=width, symbol=symbol)
        
        # Create a square by filling each row with the symbol
        square_rows = [symbol * width for _ in range(width)]
        return '\n'.join(square_rows)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a rectangle with the given width, height, and symbol.
        
        Args:
            width (int): Width of the rectangle.
            height (int): Height of the rectangle.
            symbol (str): Character to use for drawing the rectangle.
            
        Returns:
            str: A multi-line string representing the ASCII art rectangle.
            
        Raises:
            ValueError: If inputs are invalid.
            TypeError: If inputs are of incorrect type.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Create a rectangle by filling each row with the symbol
        rectangle_rows = [symbol * width for _ in range(height)]
        return '\n'.join(rectangle_rows)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a parallelogram with the given width, height, and symbol.
        The parallelogram grows diagonally to the right, starting from
        the top-left corner, with each row shifted by one space.
        
        Args:
            width (int): Width of the parallelogram.
            height (int): Height of the parallelogram.
            symbol (str): Character to use for drawing the parallelogram.
            
        Returns:
            str: A multi-line string representing the ASCII art parallelogram.
            
        Raises:
            ValueError: If inputs are invalid.
            TypeError: If inputs are of incorrect type.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Create a parallelogram by shifting each row to the right
        parallelogram_rows = [' ' * i + symbol * width for i in range(height)]
        return '\n'.join(parallelogram_rows)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a right-angled triangle with the given width, height, and symbol.
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): Width of the triangle base.
            height (int): Height of the triangle.
            symbol (str): Character to use for drawing the triangle.
            
        Returns:
            str: A multi-line string representing the ASCII art triangle.
            
        Raises:
            ValueError: If inputs are invalid.
            TypeError: If inputs are of incorrect type.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Calculate the increment in width for each row
        # to ensure the triangle reaches the specified width at the specified height
        if height <= 1:
            increment = 0
        else:
            increment = (width - 1) / (height - 1)
        
        # Create a right-angled triangle
        triangle_rows = []
        current_width = 1
        
        for i in range(height):
            # Ensure the width is always at least 1 and at most the specified width
            row_width = min(max(1, round(current_width)), width)
            triangle_rows.append(symbol * row_width)
            current_width += increment
        
        return '\n'.join(triangle_rows)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid with the given height and symbol.
        
        Args:
            height (int): Height of the pyramid.
            symbol (str): Character to use for drawing the pyramid.
            
        Returns:
            str: A multi-line string representing the ASCII art pyramid.
            
        Raises:
            ValueError: If inputs are invalid.
            TypeError: If inputs are of incorrect type.
        """
        self._validate_input(height=height, symbol=symbol)
        
        # Calculate the width of the pyramid base
        width = 2 * height - 1
        
        # Create a symmetrical pyramid
        pyramid_rows = []
        for i in range(height):
            # Calculate the number of symbols for the current row
            symbols_count = 2 * i + 1
            # Calculate the number of spaces needed before the symbols
            spaces_count = (width - symbols_count) // 2
            # Create the current row
            pyramid_rows.append(' ' * spaces_count + symbol * symbols_count)
        
        return '\n'.join(pyramid_rows)
```

This implementation provides all the required functionality while adhering to the code quality requirements. The class uses static methods for input validation to ensure robustness and security against invalid inputs. Each method is thoroughly documented with docstrings that explain the purpose, parameters, return values, and potential exceptions.

The code is modular, with clear separation of concerns between validation and drawing functions. It's also efficient, using simple mathematical calculations to determine how to draw each shape properly. The implementation focuses on readability with clear variable names and logical structure.