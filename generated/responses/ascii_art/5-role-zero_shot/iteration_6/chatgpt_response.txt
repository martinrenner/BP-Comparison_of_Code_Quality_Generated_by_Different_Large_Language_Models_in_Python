```python
import math


class AsciiArt:
    """
    A utility class for drawing various ASCII shapes.
    
    Available methods:
      - draw_square(width, symbol)
      - draw_rectangle(width, height, symbol)
      - draw_parallelogram(width, height, symbol)
      - draw_triangle(width, height, symbol)
      - draw_pyramid(height, symbol)
      
    Each method returns a string with a multi-line ASCII art representation
    of the desired shape. Input parameters are validated to ensure that dimensions
    are positive integers and the symbol is a single non-whitespace character.
    """

    def __init__(self) -> None:
        pass

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validates that a dimension (width or height) is a positive integer.
        
        Args:
            value (int): The dimension value to check.
            name (str): Name of the parameter for error messages.
            
        Raises:
            ValueError: If value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validates that the symbol is a single, non-whitespace character.
        
        Args:
            symbol (str): The symbol to check.
            
        Raises:
            ValueError: If symbol is not exactly one non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a non-whitespace single character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square of the given width using the specified symbol.
        
        Args:
            width (int): The width (and height) of the square.
            symbol (str): The symbol to fill the square.
        
        Returns:
            str: A multi-line string representing the square.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)
        # Construct each row by repeating the symbol 'width' times.
        rows = [symbol * width for _ in range(width)]
        return "\n".join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle of the given width and height using the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to fill the rectangle.
        
        Returns:
            str: A multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        rows = [symbol * width for _ in range(height)]
        return "\n".join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram of the given width and height using the specified symbol.
        Each row is shifted by one space relative to the row above, giving a diagonal effect.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height (number of rows) of the parallelogram.
            symbol (str): The symbol to fill the parallelogram.
        
        Returns:
            str: A multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            # Each subsequent row is indented by an additional space.
            line = (" " * i) + (symbol * width)
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled (filled) triangle that grows diagonally.
        The triangle is drawn over a number of rows equal to 'height'. The number of symbols
        in the first row is scaled to 1 (or more if width is large relative to height) and 
        grows linearly until the last row has 'width' symbols.
        
        Args:
            width (int): The number of symbols in the base (last row) of the triangle.
            height (int): The number of rows for the triangle.
            symbol (str): The symbol to fill the triangle.
        
        Returns:
            str: A multi-line string representing the right-angled triangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = []
        # For a smooth growth, compute the number of symbols per row such that:
        #   row 0 has ceil((1/height) * width) symbols and the last row has width symbols.
        for i in range(height):
            num_symbols = math.ceil((i + 1) * width / height)
            lines.append(symbol * num_symbols)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid of the given height using the specified symbol.
        The pyramid is centered horizontally.
        
        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): The symbol to fill the pyramid.
        
        Returns:
            str: A multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)
        lines = []
        total_width = 2 * height - 1  # The width of the base of the pyramid.
        for i in range(height):
            num_symbols = 2 * i + 1
            # Center the symbols by adding the appropriate number of spaces on each side.
            num_spaces = (total_width - num_symbols) // 2
            # Trailing spaces are not necessary for display.
            line = (" " * num_spaces) + (symbol * num_symbols)
            lines.append(line)
        return "\n".join(lines)


def main():
    """
    The main function provides a console-based user interface for drawing ASCII shapes.
    Users can select an option, input the necessary parameters, and view the result.
    """
    ascii_art = AsciiArt()

    menu = (
        "\nASCII Art Drawing Application\n"
        "--------------------------------\n"
        "1. Draw Square\n"
        "2. Draw Rectangle\n"
        "3. Draw Parallelogram\n"
        "4. Draw Right-Angled Triangle\n"
        "5. Draw Pyramid\n"
        "6. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Select an option (1-6): ").strip()

        try:
            if choice == '1':
                width = int(input("Enter square width: ").strip())
                symbol = input("Enter drawing symbol (one non-whitespace character): ").strip()
                print("\n" + ascii_art.draw_square(width, symbol))
            elif choice == '2':
                width = int(input("Enter rectangle width: ").strip())
                height = int(input("Enter rectangle height: ").strip())
                symbol = input("Enter drawing symbol (one non-whitespace character): ").strip()
                print("\n" + ascii_art.draw_rectangle(width, height, symbol))
            elif choice == '3':
                width = int(input("Enter parallelogram width: ").strip())
                height = int(input("Enter parallelogram height: ").strip())
                symbol = input("Enter drawing symbol (one non-whitespace character): ").strip()
                print("\n" + ascii_art.draw_parallelogram(width, height, symbol))
            elif choice == '4':
                width = int(input("Enter triangle base width (number of symbols in the last row): ").strip())
                height = int(input("Enter triangle height (number of rows): ").strip())
                symbol = input("Enter drawing symbol (one non-whitespace character): ").strip()
                print("\n" + ascii_art.draw_triangle(width, height, symbol))
            elif choice == '5':
                height = int(input("Enter pyramid height: ").strip())
                symbol = input("Enter drawing symbol (one non-whitespace character): ").strip()
                print("\n" + ascii_art.draw_pyramid(height, symbol))
            elif choice == '6':
                print("Exiting the application. Goodbye!")
                break
            else:
                print("Invalid option. Please try again.")

        except ValueError as error:
            print(f"Error: {error}")

        input("\nPress Enter to continue...")


if __name__ == "__main__":
    main()
```