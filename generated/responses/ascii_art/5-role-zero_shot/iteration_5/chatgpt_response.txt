```python
class AsciiArt:
    """
    Class for generating ASCII art shapes.
    Provides methods to draw a square, rectangle, parallelogram,
    right-angled triangle, and symmetrical pyramid.
    """

    def __init__(self):
        pass

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validate that a dimension is a positive integer.

        Args:
            value (int): The dimension value to validate.
            name (str): The name of the dimension (for error messages).

        Raises:
            ValueError: If value is not a positive integer.
        """
        if not isinstance(value, int) or value < 1:
            raise ValueError(f"{name} must be a positive integer. Received: {value}")

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validate that the symbol is a single non-whitespace character.

        Args:
            symbol (str): The symbol to validate.

        Raises:
            ValueError: If symbol is not exactly one printable character or is whitespace.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a square of given width using the symbol.
        The square will have equal width and height.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): The symbol to fill the square.

        Returns:
            str: A multi-line string representing the square.
        """
        self._validate_dimension(width, "Width")
        self._validate_symbol(symbol)
        row = symbol * width
        return "\n".join([row for _ in range(width)])

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a rectangle of given width and height using the symbol.

        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to fill the rectangle.

        Returns:
            str: A multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        row = symbol * width
        return "\n".join([row for _ in range(height)])

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a parallelogram that grows diagonally to the right,
        starting from the top-left corner. Each row is shifted by one space.

        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The symbol to fill the parallelogram.

        Returns:
            str: A multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            # Each new row is indented by one additional space.
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a right-angled triangle that grows diagonally to the right,
        starting at the top-left corner. The triangle's base width will
        be reached exactly on the bottom row.

        The number of symbols in each row is calculated using linear interpolation,
        ensuring that the first row has 1 symbol and the last row exactly 'width' symbols.

        Args:
            width (int): The number of symbols in the base (last row) of the triangle.
            height (int): The height of the triangle (number of rows).
            symbol (str): The symbol to fill the triangle.

        Returns:
            str: A multi-line string representing the triangle.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = []

        # Special case: if there is only one row, it's simply the base.
        if height == 1:
            lines.append(symbol * width)
        else:
            # Use linear interpolation so that row 0 has 1 symbol and the last row has 'width' symbols.
            for i in range(height):
                # Calculate count: When i == 0 -> 1, when i == height-1 -> width.
                count = 1 + int(i * (width - 1) / (height - 1))
                lines.append(symbol * count)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid of a given height using the symbol.
        The pyramid will be centered relative to its base width.

        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to fill the pyramid.

        Returns:
            str: A multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            num_symbols = 2 * i + 1  # Each level increases the count by 2.
            padding = " " * (height - i - 1)  # Center the pyramid.
            line = padding + (symbol * num_symbols)
            lines.append(line)
        return "\n".join(lines)


def main():
    """
    Main function to run the console-based ASCII Art application.
    Provides a menu for the user to select different shapes and input dimensions.
    """
    art = AsciiArt()
    menu = """
Please select a shape to draw:
1. Square
2. Rectangle
3. Parallelogram
4. Triangle (Right-angled)
5. Pyramid
6. Exit
"""
    while True:
        print(menu)
        choice = input("Enter your choice (1-6): ").strip()
        if choice == "6":
            print("Exiting. Goodbye!")
            break

        try:
            if choice == "1":
                width = int(input("Enter the width of the square: "))
                symbol = input("Enter a single non-whitespace character as symbol: ").strip()
                result = art.draw_square(width, symbol)
            elif choice == "2":
                width = int(input("Enter the width of the rectangle: "))
                height = int(input("Enter the height of the rectangle: "))
                symbol = input("Enter a single non-whitespace character as symbol: ").strip()
                result = art.draw_rectangle(width, height, symbol)
            elif choice == "3":
                width = int(input("Enter the width of the parallelogram: "))
                height = int(input("Enter the height of the parallelogram: "))
                symbol = input("Enter a single non-whitespace character as symbol: ").strip()
                result = art.draw_parallelogram(width, height, symbol)
            elif choice == "4":
                width = int(input("Enter the base width of the triangle: "))
                height = int(input("Enter the height of the triangle: "))
                symbol = input("Enter a single non-whitespace character as symbol: ").strip()
                result = art.draw_triangle(width, height, symbol)
            elif choice == "5":
                height = int(input("Enter the height of the pyramid: "))
                symbol = input("Enter a single non-whitespace character as symbol: ").strip()
                result = art.draw_pyramid(height, symbol)
            else:
                print("Invalid choice. Please enter a number between 1 and 6.\n")
                continue

            print("\n" + result + "\n")
        except ValueError as ve:
            print(f"Input error: {ve}\n")
        except Exception as e:
            print(f"An unexpected error occurred: {e}\n")


if __name__ == "__main__":
    main()
```