# ASCII Art Application

I'll create a console-based 2D ASCII Art application that meets all the specifications. This implementation will use object-oriented programming and include proper validation, documentation, and error handling.

```python
class AsciiArt:
    """A class for drawing various ASCII art shapes.
    
    This class provides methods to generate ASCII art shapes including squares,
    rectangles, parallelograms, triangles, and pyramids using custom symbols.
    """
    
    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """Validate that the provided symbol is a single non-whitespace character.
        
        Args:
            symbol: The character to use for drawing the shape.
            
        Raises:
            ValueError: If symbol is not a single character or is whitespace.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace")
    
    @staticmethod
    def _validate_dimensions(*dimensions: int) -> None:
        """Validate that all dimensions are positive integers.
        
        Args:
            *dimensions: Variable number of dimensions to validate.
            
        Raises:
            ValueError: If any dimension is non-positive.
        """
        for dimension in dimensions:
            if not isinstance(dimension, int):
                raise TypeError(f"Dimension must be an integer, got {type(dimension).__name__}")
            if dimension <= 0:
                raise ValueError("All dimensions must be positive integers")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """Draw a square filled with the specified symbol.
        
        Args:
            width: The width and height of the square.
            symbol: The character to use for drawing the square.
            
        Returns:
            A string representing the ASCII art square.
            
        Raises:
            ValueError: If width is non-positive or symbol is invalid.
        """
        self._validate_symbol(symbol)
        self._validate_dimensions(width)
        
        # Create a row of symbols with the specified width
        row = symbol * width
        
        # Repeat the row for 'width' times to create a square
        return "\n".join([row for _ in range(width)])
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """Draw a rectangle filled with the specified symbol.
        
        Args:
            width: The width of the rectangle.
            height: The height of the rectangle.
            symbol: The character to use for drawing the rectangle.
            
        Returns:
            A string representing the ASCII art rectangle.
            
        Raises:
            ValueError: If width or height is non-positive or symbol is invalid.
        """
        self._validate_symbol(symbol)
        self._validate_dimensions(width, height)
        
        # Create a row of symbols with the specified width
        row = symbol * width
        
        # Repeat the row for 'height' times to create a rectangle
        return "\n".join([row for _ in range(height)])
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """Draw a parallelogram filled with the specified symbol.
        
        The parallelogram grows diagonally to the right, with each row
        shifted one space to the right.
        
        Args:
            width: The width of the parallelogram.
            height: The height of the parallelogram.
            symbol: The character to use for drawing the parallelogram.
            
        Returns:
            A string representing the ASCII art parallelogram.
            
        Raises:
            ValueError: If width or height is non-positive or symbol is invalid.
        """
        self._validate_symbol(symbol)
        self._validate_dimensions(width, height)
        
        # Create the parallelogram by shifting each row to the right
        rows = []
        for i in range(height):
            # Add spaces for the diagonal shift based on the current row
            spaces = " " * i
            # Add symbols for the remaining width
            row = spaces + symbol * width
            rows.append(row)
        
        return "\n".join(rows)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """Draw a right-angled triangle filled with the specified symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width: The maximum width of the triangle.
            height: The height of the triangle.
            symbol: The character to use for drawing the triangle.
            
        Returns:
            A string representing the ASCII art triangle.
            Let's make sure we don't draw more than width characters on any row.
            
        Raises:
            ValueError: If width or height is non-positive or symbol is invalid.
        """
        self._validate_symbol(symbol)
        self._validate_dimensions(width, height)
        
        # Calculate how many symbols to add per row
        symbols_per_row = max(1, width // height)
        
        rows = []
        for i in range(1, height + 1):
            # Calculate symbols for this row, but not exceeding width
            num_symbols = min(i * symbols_per_row, width)
            row = symbol * num_symbols
            rows.append(row)
        
        return "\n".join(rows)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """Draw a symmetrical pyramid filled with the specified symbol.
        
        The pyramid is centered, with its apex at the top.
        
        Args:
            height: The height of the pyramid.
            symbol: The character to use for drawing the pyramid.
            
        Returns:
            A string representing the ASCII art pyramid.
            
        Raises:
            ValueError: If height is non-positive or symbol is invalid.
        """
        self._validate_symbol(symbol)
        self._validate_dimensions(height)
        
        rows = []
        for i in range(height):
            # Calculate the number of symbols and spaces for each row
            # The width of the pyramid at the bottom is 2*height-1
            num_symbols = 2 * i + 1
            # Pad with spaces to center the pyramid
            padding = height - i - 1
            row = " " * padding + symbol * num_symbols
            rows.append(row)
        
        return "\n".join(rows)
```

## Example Usage

Here's how you would use the `AsciiArt` class:

```python
def main():
    """Simple interactive demo of the AsciiArt class."""
    ascii_art = AsciiArt()

    try:
        # Example usage of each method
        print("\nSquare (3x3 using '#'):")
        print(ascii_art.draw_square(3, "#"))
        
        print("\nRectangle (5x3 using '*'):")
        print(ascii_art.draw_rectangle(5, 3, "*"))
        
        print("\nParallelogram (5x3 using '@'):")
        print(ascii_art.draw_parallelogram(5, 3, "@"))
        
        print("\nTriangle (5x3 using '+'):")
        print(ascii_art.draw_triangle(5, 3, "+"))
        
        print("\nPyramid (4 height using '^'):")
        print(ascii_art.draw_pyramid(4, "^"))
        
    except (ValueError, TypeError) as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
```

This implementation meets all the specified requirements:
- Uses OOP with a clear `AsciiArt` class
- Implements all required functions with proper signatures
- Includes thorough validation with appropriate error types
- Supports single-character symbols with validation
- Returns multi-line strings as requested
- Follows code quality requirements with proper documentation and error handling
- Uses efficient algorithms for drawing the shapes

The code is organized, well-documented, and follows Python best practices.