```python
import math


class AsciiArt:
    """
    A class for generating various ASCII art shapes.

    Available methods:
      - draw_square(width: int, symbol: str) -> str
      - draw_rectangle(width: int, height: int, symbol: str) -> str
      - draw_parallelogram(width: int, height: int, symbol: str) -> str
      - draw_triangle(width: int, height: int, symbol: str) -> str
      - draw_pyramid(height: int, symbol: str) -> str
    """

    @staticmethod
    def _validate_dimension(value: int, name: str):
        """
        Validate that a dimension (width or height) is an integer greater than zero.
        """
        if not isinstance(value, int):
            raise TypeError(f"{name} must be an integer.")
        if value <= 0:
            raise ValueError(f"{name} must be a positive integer.")

    @staticmethod
    def _validate_symbol(symbol: str):
        """
        Validate that the symbol is a non-whitespace string of exactly one character.
        """
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must consist of exactly one character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be a whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a completely filled square using the chosen symbol.

        Parameters:
            width (int): The number of symbols per side.
            symbol (str): The single printable character to use.
        
        Returns:
            str: A string with the ASCII art square.
        """
        self._validate_dimension(width, "Width")
        self._validate_symbol(symbol)
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled rectangle using the chosen symbol.

        Parameters:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): The single printable character to use.
        
        Returns:
            str: A string with the ASCII art rectangle.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled parallelogram.
        The parallelogram grows diagonally to the right: each row is shifted by one space.

        Parameters:
            width (int): The number of symbols per row.
            height (int): The total number of rows.
            symbol (str): The single printable character to use.
        
        Returns:
            str: A string with the ASCII art parallelogram.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            # Each subsequent row is indented by one additional space.
            line = " " * i + symbol * width
            lines.append(line)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a completely filled right-angled triangle.
        The triangle has a total of 'height' rows and its base (last row) has 'width' symbols.
        The number of symbols in each row grows proportionally from 1 (top) to width (bottom).

        Parameters:
            width (int): The number of symbols in the base (last row) of the triangle.
            height (int): The total number of rows.
            symbol (str): The single printable character to use.

        Returns:
            str: A string with the ASCII art triangle.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(1, height + 1):
            # Proportionally compute the number of symbols for the current row.
            # Using math.ceil ensures that the row gets at least one symbol and
            # that the bottom row exactly equals 'width' symbols.
            row_symbols = math.ceil((i * width) / height)
            lines.append(symbol * row_symbols)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a completely filled symmetrical pyramid.
        The pyramid's base will have (2 * height - 1) symbols.

        Parameters:
            height (int): The number of rows in the pyramid.
            symbol (str): The single printable character to use.

        Returns:
            str: A string with the ASCII art pyramid.
        """
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)
        lines = []
        for i in range(height):
            # Determine the number of leading spaces (to center the pyramid)
            spaces = " " * (height - i - 1)
            # The number of symbols in the row follows (2 * i + 1)
            stars = symbol * (2 * i + 1)
            lines.append(spaces + stars)
        return "\n".join(lines)


def main():
    """
    Runs a console-based interactive ASCII Art Generator.
    Users can select a shape type, provide dimensions and a symbol,
    and the corresponding ASCII art will be printed.
    """
    art = AsciiArt()

    menu = (
        "\nASCII Art Generator\n"
        "--------------------\n"
        "1. Draw Square\n"
        "2. Draw Rectangle\n"
        "3. Draw Parallelogram\n"
        "4. Draw Right-Angled Triangle\n"
        "5. Draw Pyramid\n"
        "0. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice: ").strip()

        if choice == "0":
            print("Exiting ASCII Art Generator. Goodbye!")
            break

        try:
            if choice == "1":
                width = int(input("Enter the width of the square: ").strip())
                symbol = input("Enter the symbol to use: ").strip()
                result = art.draw_square(width, symbol)
            elif choice == "2":
                width = int(input("Enter the width of the rectangle: ").strip())
                height = int(input("Enter the height of the rectangle: ").strip())
                symbol = input("Enter the symbol to use: ").strip()
                result = art.draw_rectangle(width, height, symbol)
            elif choice == "3":
                width = int(input("Enter the width of the parallelogram: ").strip())
                height = int(input("Enter the height of the parallelogram: ").strip())
                symbol = input("Enter the symbol to use: ").strip()
                result = art.draw_parallelogram(width, height, symbol)
            elif choice == "4":
                width = int(input("Enter the base width of the triangle: ").strip())
                height = int(input("Enter the height of the triangle: ").strip())
                symbol = input("Enter the symbol to use: ").strip()
                result = art.draw_triangle(width, height, symbol)
            elif choice == "5":
                height = int(input("Enter the height of the pyramid: ").strip())
                symbol = input("Enter the symbol to use: ").strip()
                result = art.draw_pyramid(height, symbol)
            else:
                print("Invalid choice. Please select a valid option.")
                continue

            print("\n" + result + "\n")
        except (ValueError, TypeError) as err:
            print(f"Input error: {err}")
        except Exception as exc:
            print(f"An unexpected error occurred: {exc}")


if __name__ == "__main__":
    main()
```