# ASCII Art Generator

I'll create a console-based ASCII art application that follows object-oriented principles and meets the ISO/IEC 25010 requirements. This implementation will include proper validation, error handling, and well-documented code.

```python
class AsciiArt:
    """
    A class for generating various ASCII art shapes.
    
    This class provides methods to create common geometric shapes using
    ASCII characters, with configurable dimensions and symbols.
    """
    
    @staticmethod
    def _validate_input(symbol: str, *dimensions: int) -> None:
        """
        Validates input parameters for all drawing methods.
        
        Args:
            symbol: The character to use for drawing the shape.
            *dimensions: Variable number of dimension parameters (width, height).
            
        Raises:
            ValueError: If symbol is not a single character or is whitespace,
                       or if any dimension is negative.
            TypeError: If dimensions are not integers.
        """
        # Validate symbol
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace")
            
        # Validate dimensions
        for i, dim in enumerate(dimensions):
            if not isinstance(dim, int):
                raise TypeError(f"Dimension at position {i} must be an integer")
            if dim <= 0:
                raise ValueError(f"Dimension at position {i} must be positive")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square using the specified symbol.
        
        Args:
            width: The width and height of the square.
            symbol: The character to use for drawing the square.
            
        Returns:
            A multi-line string representing the square.
            
        Raises:
            ValueError: If width is non-positive or symbol is invalid.
            TypeError: If width is not an integer.
        """
        self._validate_input(symbol, width)
        
        # Create a square by drawing a rectangle with equal width and height
        return self.draw_rectangle(width, width, symbol)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle using the specified symbol.
        
        Args:
            width: The width of the rectangle.
            height: The height of the rectangle.
            symbol: The character to use for drawing the rectangle.
            
        Returns:
            A multi-line string representing the rectangle.
            
        Raises:
            ValueError: If width or height is non-positive or symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Create a rectangle by repeating the symbol width times for height rows
        row = symbol * width
        return '\n'.join(row for _ in range(height))
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram using the specified symbol.
        
        The parallelogram grows diagonally to the right, starting from
        the top-left corner. Each row is shifted by one space to the right.
        
        Args:
            width: The width of the parallelogram.
            height: The height of the parallelogram.
            symbol: The character to use for drawing the parallelogram.
            
        Returns:
            A multi-line string representing the parallelogram.
            
        Raises:
            ValueError: If width or height is non-positive or symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        rows = []
        for i in range(height):
            # Add i spaces before the row, then add width symbols
            rows.append(' ' * i + symbol * width)
            
        return '\n'.join(rows)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle using the specified symbol.
        
        The triangle grows diagonally to the right, starting from
        the top-left corner.
        
        Args:
            width: The base width of the triangle.
            height: The height of the triangle.
            symbol: The character to use for drawing the triangle.
            
        Returns:
            A multi-line string representing the triangle.
            
        Raises:
            ValueError: If width or height is non-positive or symbol is invalid.
            TypeError: If width or height is not an integer.
        """
        self._validate_input(symbol, width, height)
        
        # Calculate the number of symbols per row based on the width, height ratio
        rows = []
        for i in range(height):
            # Calculate how many symbols to print in each row
            # This ensures the triangle reaches exactly width symbols at the final row
            symbols_count = max(1, round((i + 1) * width / height))
            rows.append(symbol * symbols_count)
            
        return '\n'.join(rows)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid using the specified symbol.
        
        Args:
            height: The height of the pyramid.
            symbol: The character to use for drawing the pyramid.
            
        Returns:
            A multi-line string representing the pyramid.
            
        Raises:
            ValueError: If height is non-positive or symbol is invalid.
            TypeError: If height is not an integer.
        """
        self._validate_input(symbol, height)
        
        rows = []
        for i in range(height):
            # Calculate spaces and symbols for each row
            spaces = height - i - 1
            symbols = 2 * i + 1
            rows.append(' ' * spaces + symbol * symbols)
            
        return '\n'.join(rows)


def main():
    """
    Main function to demonstrate the AsciiArt class functionality.
    """
    ascii_art = AsciiArt()
    
    print("ASCII Art Generator")
    print("------------------")
    
    while True:
        print("\nAvailable shapes:")
        print("1. Square")
        print("2. Rectangle")
        print("3. Parallelogram")
        print("4. Triangle (right-angled)")
        print("5. Pyramid")
        print("0. Exit")
        
        choice = input("\nEnter your choice (0-5): ")
        
        if choice == '0':
            print("Exiting program. Goodbye!")
            break
            
        try:
            symbol = input("Enter a symbol to use (single character): ")
            
            if choice == '1':
                width = int(input("Enter width: "))
                print("\nResult:")
                print(ascii_art.draw_square(width, symbol))
                
            elif choice == '2':
                width = int(input("Enter width: "))
                height = int(input("Enter height: "))
                print("\nResult:")
                print(ascii_art.draw_rectangle(width, height, symbol))
                
            elif choice == '3':
                width = int(input("Enter width: "))
                height = int(input("Enter height: "))
                print("\nResult:")
                print(ascii_art.draw_parallelogram(width, height, symbol))
                
            elif choice == '4':
                width = int(input("Enter width: "))
                height = int(input("Enter height: "))
                print("\nResult:")
                print(ascii_art.draw_triangle(width, height, symbol))
                
            elif choice == '5':
                height = int(input("Enter height: "))
                print("\nResult:")
                print(ascii_art.draw_pyramid(height, symbol))
                
            else:
                print("Invalid choice. Please enter a number between 0 and 5.")
                
        except ValueError as e:
            print(f"Error: {e}")
        except TypeError as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Implementation Summary

This ASCII art generator implements all the required functionality with a focus on:

1. **Object-Oriented Design**:
   - Encapsulates all drawing functionality in the `AsciiArt` class
   - Uses static validation method to ensure DRY principle

2. **Input Validation**:
   - Validates that symbols are single non-whitespace characters
   - Confirms dimensions are positive integers
   - Uses appropriate error types for different validation issues

3. **Quality Attributes**:
   - **Correctness**: Each method produces expected outputs for valid inputs
   - **Performance**: Uses efficient string operations and list joining
   - **Modularity**: Separates validation, shape logic, and user interface
   - **Security**: Validates all inputs to prevent unexpected behavior
   - **Testability**: Clear interfaces with well-defined inputs and outputs
   - **Readability**: Comprehensive docstrings and meaningful variable names

4. **User Interface**:
   - Simple console-based menu for selecting shapes
   - Clear error messages for invalid inputs

The implementation satisfies all requirements and follows best practices for Python code organization and style.