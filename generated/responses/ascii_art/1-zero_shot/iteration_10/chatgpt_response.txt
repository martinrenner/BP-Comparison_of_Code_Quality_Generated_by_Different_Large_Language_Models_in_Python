```python
"""
Console-based 2D ASCII Art Application

This module provides an AsciiArt class to generate various filled ASCII shapes:
    - Square
    - Rectangle
    - Parallelogram (each row shifted one space to the right)
    - Right-angled Triangle (grows diagonally to the right)
    - Pyramid (symmetrical)

Each drawing method validates its inputs by ensuring that width and height are positive
integers and that the chosen symbol is a single non-whitespace character.

The design follows ISO/IEC 25010 quality requirements with an emphasis on correctness,
performance, modularity, security, testability, and readability.
"""


class AsciiArt:
    """
    A utility class for drawing 2D ASCII art shapes.
    """

    def _validate_symbol(self, symbol: str) -> None:
        """
        Validate that 'symbol' is exactly one non-whitespace character.

        Args:
            symbol (str): The symbol to validate.

        Raises:
            ValueError: If 'symbol' is not a single, printable non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def _validate_dimension(self, value: int, name: str) -> None:
        """
        Validate that a given dimension is a positive integer.

        Args:
            value (int): The dimension value to validate.
            name (str): The name of the dimension (for error messages).

        Raises:
            ValueError: If the dimension is not a positive integer.
        """
        if not isinstance(value, int) or value < 1:
            raise ValueError(f"{name} must be a positive integer.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Generate a filled square using the specified symbol.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): A single character used to fill the square.

        Returns:
            str: A multi-line string representing the square.
        """
        self._validate_dimension(width, "Width")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Generate a filled rectangle.

        Args:
            width (int): The rectangle's width.
            height (int): The rectangle's height.
            symbol (str): A single character used to fill the rectangle.

        Returns:
            str: A multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Generate a filled parallelogram.
        Each new row is indented one additional space, creating a diagonal shift.

        Args:
            width (int): The width of each row.
            height (int): Number of rows.
            symbol (str): A single character used to fill the parallelogram.

        Returns:
            str: A multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            indent = " " * i
            lines.append(indent + symbol * width)
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Generate a filled right-angled triangle.
        The triangle is drawn over 'height' rows and its base width equals 'width'.
        Each row is indented by an increasing number of spaces (growing diagonally),
        and the number of symbols in each row is scaled so that the last row
        prints exactly 'width' symbols.

        Args:
            width (int): The number of symbols in the bottom row.
            height (int): The number of rows in the triangle.
            symbol (str): A single character used to fill the triangle.

        Returns:
            str: A multi-line string representing the triangle.
        """
        self._validate_dimension(width, "Width")
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        for i in range(height):
            # Scale the symbol count linearly:
            num_symbols = (i + 1) * width // height
            num_symbols = max(1, num_symbols)
            # Ensure the base row has exactly 'width' symbols.
            if i == height - 1:
                num_symbols = width
            indent = " " * i
            lines.append(indent + symbol * num_symbols)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Generate a symmetrical filled pyramid.
        The base width is calculated as (2 * height - 1) to ensure symmetry.

        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): A single character used to fill the pyramid.

        Returns:
            str: A multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        base_width = 2 * height - 1
        for i in range(height):
            num_symbols = 2 * i + 1
            # Center the row by adding appropriate leading spaces.
            indent = " " * ((base_width - num_symbols) // 2)
            lines.append(indent + symbol * num_symbols)
        return "\n".join(lines)


def main():
    """
    The main function for the console-based ASCII Art application.
    Offers a simple menu for the user to select a shape and input parameters.
    """
    art = AsciiArt()
    menu = (
        "ASCII Art Generator\n"
        "Choose a shape to draw:\n"
        "1. Square\n"
        "2. Rectangle\n"
        "3. Parallelogram\n"
        "4. Right-angled Triangle\n"
        "5. Pyramid\n"
    )
    print(menu)
    shape_choice = input("Enter your choice (1-5): ").strip()

    try:
        if shape_choice == "1":
            width = int(input("Enter width for square: ").strip())
            symbol = input("Enter symbol (single character): ").strip()
            result = art.draw_square(width, symbol)
        elif shape_choice == "2":
            width = int(input("Enter width for rectangle: ").strip())
            height = int(input("Enter height for rectangle: ").strip())
            symbol = input("Enter symbol (single character): ").strip()
            result = art.draw_rectangle(width, height, symbol)
        elif shape_choice == "3":
            width = int(input("Enter width for parallelogram: ").strip())
            height = int(input("Enter height for parallelogram: ").strip())
            symbol = input("Enter symbol (single character): ").strip()
            result = art.draw_parallelogram(width, height, symbol)
        elif shape_choice == "4":
            width = int(input("Enter base width for triangle: ").strip())
            height = int(input("Enter height for triangle: ").strip())
            symbol = input("Enter symbol (single character): ").strip()
            result = art.draw_triangle(width, height, symbol)
        elif shape_choice == "5":
            height = int(input("Enter height for pyramid: ").strip())
            symbol = input("Enter symbol (single character): ").strip()
            result = art.draw_pyramid(height, symbol)
        else:
            print("Invalid shape choice!")
            return

        print("\nGenerated ASCII Art:\n")
        print(result)

    except ValueError as err:
        print(f"Error: {err}")


if __name__ == '__main__':
    main()
```