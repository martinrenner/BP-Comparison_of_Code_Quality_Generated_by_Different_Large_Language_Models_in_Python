# ASCII Art Generator

I'll create a high-quality, console-based 2D ASCII art application that meets ISO/IEC 25010 requirements. The solution will implement all the required shape functions using object-oriented programming principles with proper input validation and error handling.

```python
class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to create various ASCII art shapes
    such as squares, rectangles, parallelograms, triangles, and pyramids.
    Each shape is filled with a user-specified symbol.
    """
    
    @staticmethod
    def _validate_input(width: int = None, height: int = None, symbol: str = None) -> None:
        """
        Validates the input parameters for ASCII art generation.
        
        Args:
            width: The width of the shape (if applicable)
            height: The height of the shape (if applicable)
            symbol: The symbol to use for drawing the shape
            
        Raises:
            ValueError: If any of the inputs are invalid
            TypeError: If the inputs have incorrect types
        """
        # Validate dimensions if provided
        if width is not None:
            if not isinstance(width, int):
                raise TypeError("Width must be an integer")
            if width <= 0:
                raise ValueError("Width must be a positive integer")
                
        if height is not None:
            if not isinstance(height, int):
                raise TypeError("Height must be an integer")
            if height <= 0:
                raise ValueError("Height must be a positive integer")
        
        # Validate symbol if provided
        if symbol is not None:
            if not isinstance(symbol, str):
                raise TypeError("Symbol must be a string")
            if len(symbol) != 1:
                raise ValueError("Symbol must be exactly one character")
            if symbol.isspace():
                raise ValueError("Symbol cannot be whitespace")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
        
        Args:
            width: The width and height of the square
            symbol: The character to fill the square with
            
        Returns:
            A multi-line string representing the square
            
        Raises:
            ValueError: If any of the inputs are invalid
            TypeError: If the inputs have incorrect types
        """
        self._validate_input(width=width, symbol=symbol)
        
        # Create a row of symbols
        row = symbol * width
        
        # Repeat the row 'width' times (since it's a square)
        square = '\n'.join([row for _ in range(width)])
        
        return square
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
        
        Args:
            width: The width of the rectangle
            height: The height of the rectangle
            symbol: The character to fill the rectangle with
            
        Returns:
            A multi-line string representing the rectangle
            
        Raises:
            ValueError: If any of the inputs are invalid
            TypeError: If the inputs have incorrect types
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Create a row of symbols
        row = symbol * width
        
        # Repeat the row 'height' times
        rectangle = '\n'.join([row for _ in range(height)])
        
        return rectangle
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram filled with the specified symbol.
        
        The parallelogram grows diagonally to the right, starting from 
        the top-left corner; each row is shifted by one space.
        
        Args:
            width: The width of the parallelogram (base length)
            height: The height of the parallelogram
            symbol: The character to fill the parallelogram with
            
        Returns:
            A multi-line string representing the parallelogram
            
        Raises:
            ValueError: If any of the inputs are invalid
            TypeError: If the inputs have incorrect types
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Create each row with appropriate indentation
        parallelogram_rows = []
        for i in range(height):
            # Add spaces for indentation and then add symbols
            parallelogram_rows.append(' ' * i + symbol * width)
        
        # Join all rows with newline characters
        parallelogram = '\n'.join(parallelogram_rows)
        
        return parallelogram
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle filled with the specified symbol.
        
        The triangle grows diagonally to the right, starting from 
        the top-left corner.
        
        Args:
            width: The width (base) of the triangle
            height: The height of the triangle
            symbol: The character to fill the triangle with
            
        Returns:
            A multi-line string representing the right-angled triangle
            
        Raises:
            ValueError: If any of the inputs are invalid or if width < height
            TypeError: If the inputs have incorrect types
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # For a proper right-angled triangle, width should be >= height
        if width < height:
            raise ValueError("Width must be greater than or equal to height for a proper right-angled triangle")
        
        # Calculate how many symbols to add per row
        symbols_per_row = [int(i * width / height) for i in range(1, height + 1)]
        
        # Create each row with the appropriate number of symbols
        triangle_rows = [symbol * count for count in symbols_per_row]
        
        # Join all rows with newline characters
        triangle = '\n'.join(triangle_rows)
        
        return triangle
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height: The height of the pyramid
            symbol: The character to fill the pyramid with
            
        Returns:
            A multi-line string representing the pyramid
            
        Raises:
            ValueError: If any of the inputs are invalid
            TypeError: If the inputs have incorrect types
        """
        self._validate_input(height=height, symbol=symbol)
        
        pyramid_rows = []
        for i in range(1, height + 1):
            # Calculate number of symbols for this row
            num_symbols = 2 * i - 1
            
            # Calculate number of spaces for centering
            num_spaces = height - i
            
            # Create the row with proper spacing and symbols
            row = ' ' * num_spaces + symbol * num_symbols
            pyramid_rows.append(row)
        
        # Join all rows with newline characters
        pyramid = '\n'.join(pyramid_rows)
        
        return pyramid


def main():
    """
    Main function to demonstrate the AsciiArt class functionality.
    """
    ascii_art = AsciiArt()
    
    print("ASCII Art Generator")
    print("------------------")
    
    try:
        while True:
            print("\nChoose a shape to draw:")
            print("1. Square")
            print("2. Rectangle")
            print("3. Parallelogram")
            print("4. Triangle (Right-angled)")
            print("5. Pyramid")
            print("0. Exit")
            
            choice = input("Enter your choice (0-5): ")
            
            if choice == '0':
                print("Goodbye!")
                break
            
            symbol = input("Enter the symbol to use (single character): ")
            
            try:
                if choice == '1':
                    width = int(input("Enter the width: "))
                    print("\nYour Square:")
                    print(ascii_art.draw_square(width, symbol))
                    
                elif choice == '2':
                    width = int(input("Enter the width: "))
                    height = int(input("Enter the height: "))
                    print("\nYour Rectangle:")
                    print(ascii_art.draw_rectangle(width, height, symbol))
                    
                elif choice == '3':
                    width = int(input("Enter the width: "))
                    height = int(input("Enter the height: "))
                    print("\nYour Parallelogram:")
                    print(ascii_art.draw_parallelogram(width, height, symbol))
                    
                elif choice == '4':
                    width = int(input("Enter the width: "))
                    height = int(input("Enter the height: "))
                    print("\nYour Triangle:")
                    print(ascii_art.draw_triangle(width, height, symbol))
                    
                elif choice == '5':
                    height = int(input("Enter the height: "))
                    print("\nYour Pyramid:")
                    print(ascii_art.draw_pyramid(height, symbol))
                    
                else:
                    print("Invalid choice. Please try again.")
                    
            except (ValueError, TypeError) as e:
                print(f"Error: {e}")
                
    except KeyboardInterrupt:
        print("\nProgram terminated by user.")


if __name__ == "__main__":
    main()
```

This ASCII art generator implements all the required functionality while adhering to software quality standards:

1. **Functionality**: All required shape drawing functions are implemented with proper interface.
2. **Correctness**: Each function produces the expected ASCII art shapes.
3. **Reliability**: Extensive input validation protects against invalid inputs.
4. **Performance**: The algorithms used are efficient with O(n) or O(n²) time complexity depending on the shape.
5. **Security**: The code validates all inputs to prevent malicious use.
6. **Maintainability**: Code is well-structured, properly commented, and follows OOP principles.
7. **Testability**: Methods are modular and independent, making them easy to test.

The main function provides a simple console interface to demonstrate all the shape generation capabilities, with error handling to ensure a smooth user experience.