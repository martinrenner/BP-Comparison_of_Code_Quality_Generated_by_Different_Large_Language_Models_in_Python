# ASCII Art Generator

I'll create a console-based 2D ASCII art generator that allows users to draw various shapes. Let's implement it with a focus on the ISO/IEC 25010 quality requirements.

```python
class AsciiArt:
    """
    A class for creating ASCII art shapes.
    
    This class provides methods to generate various ASCII art shapes
    such as squares, rectangles, parallelograms, triangles, and pyramids.
    Each shape is filled with a user-specified symbol.
    """
    
    @staticmethod
    def _validate_input(width, height, symbol):
        """
        Validates the input parameters for ASCII art functions.
        
        Args:
            width (int): The width of the shape.
            height (int, optional): The height of the shape.
            symbol (str): The symbol to use for drawing.
            
        Raises:
            ValueError: If the width or height is negative or zero.
            ValueError: If the symbol is not a single character or is whitespace.
            TypeError: If the input types are not what was expected.
        """
        # Type validation
        if not isinstance(width, int):
            raise TypeError("Width must be an integer")
        if height is not None and not isinstance(height, int):
            raise TypeError("Height must be an integer")
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string")
            
        # Value validation
        if width <= 0:
            raise ValueError("Width must be a positive integer")
        if height is not None and height <= 0:
            raise ValueError("Height must be a positive integer")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width, filled with the given symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): A single character to fill the square with.
            
        Returns:
            str: A multi-line string representing a square ASCII art.
            
        Raises:
            ValueError: If the width is not positive or symbol is invalid.
            TypeError: If the input types are not what was expected.
        """
        self._validate_input(width, width, symbol)
        
        # Create a square by repeating the symbol width times for each row
        # and then joining width number of rows
        row = symbol * width
        return '\n'.join([row] * width)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width and height, filled with the given symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): A single character to fill the rectangle with.
            
        Returns:
            str: A multi-line string representing a rectangle ASCII art.
            
        Raises:
            ValueError: If the width or height is not positive or symbol is invalid.
            TypeError: If the input types are not what was expected.
        """
        self._validate_input(width, height, symbol)
        
        # Create a rectangle by repeating the symbol width times for each row
        # and then joining height number of rows
        row = symbol * width
        return '\n'.join([row] * height)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram with the specified width and height, filled with the given symbol.
        The parallelogram grows diagonally to the right, with each row shifted by one space.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): A single character to fill the parallelogram with.
            
        Returns:
            str: A multi-line string representing a parallelogram ASCII art.
            
        Raises:
            ValueError: If the width or height is not positive or symbol is invalid.
            TypeError: If the input types are not what was expected.
        """
        self._validate_input(width, height, symbol)
        
        # Create a parallelogram by:
        # - Creating a row of symbols with width length
        # - Adding increasing spaces at the beginning of each row
        result = []
        row = symbol * width
        for i in range(height):
            result.append(' ' * i + row)
        
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width and height,
        filled with the given symbol. The triangle grows diagonally to the right.
        
        Args:
            width (int): The maximum width of the triangle.
            height (int): The height of the triangle.
            symbol (str): A single character to fill the triangle with.
            
        Returns:
            str: A multi-line string representing a right-angled triangle ASCII art.
            
        Raises:
            ValueError: If the width or height is not positive or symbol is invalid.
            TypeError: If the input types are not what was expected.
        """
        self._validate_input(width, height, symbol)
        
        # Calculate the width increment for each row
        if height <= 1:
            width_increment = width
        else:
            width_increment = width / height
            
        result = []
        for i in range(height):
            # Calculate how many symbols to use for this row
            # Use max(1, int(...)) to ensure at least 1 symbol per row
            symbols_count = max(1, int((i + 1) * width_increment))
            result.append(symbol * symbols_count)
        
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height, filled with the given symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): A single character to fill the pyramid with.
            
        Returns:
            str: A multi-line string representing a pyramid ASCII art.
            
        Raises:
            ValueError: If the height is not positive or symbol is invalid.
            TypeError: If the input types are not what was expected.
        """
        self._validate_input(height, height, symbol)
        
        result = []
        for i in range(height):
            # For each row, calculate:
            # - number of symbols: 2*i + 1 (1, 3, 5, ...)
            # - number of spaces before symbols: height - i - 1
            spaces = ' ' * (height - i - 1)
            symbols = symbol * (2 * i + 1)
            result.append(spaces + symbols)
        
        return '\n'.join(result)


def main():
    """
    Main function to demonstrate the ASCII Art generator capabilities.
    """
    ascii_art = AsciiArt()
    
    print("Welcome to ASCII Art Generator!")
    print("==============================")
    
    try:
        while True:
            print("\nChoose a shape to draw:")
            print("1. Square")
            print("2. Rectangle")
            print("3. Parallelogram")
            print("4. Right-angled Triangle")
            print("5. Pyramid")
            print("0. Exit")
            
            choice = input("\nEnter your choice (0-5): ")
            
            if choice == '0':
                print("Thank you for using ASCII Art Generator!")
                break
                
            symbol = input("Enter a single character symbol to use: ")
            
            try:
                if choice == '1':
                    width = int(input("Enter the width: "))
                    result = ascii_art.draw_square(width, symbol)
                elif choice == '2':
                    width = int(input("Enter the width: "))
                    height = int(input("Enter the height: "))
                    result = ascii_art.draw_rectangle(width, height, symbol)
                elif choice == '3':
                    width = int(input("Enter the width: "))
                    height = int(input("Enter the height: "))
                    result = ascii_art.draw_parallelogram(width, height, symbol)
                elif choice == '4':
                    width = int(input("Enter the width: "))
                    height = int(input("Enter the height: "))
                    result = ascii_art.draw_triangle(width, height, symbol)
                elif choice == '5':
                    height = int(input("Enter the height: "))
                    result = ascii_art.draw_pyramid(height, symbol)
                else:
                    print("Invalid choice. Please try again.")
                    continue
                
                print("\nYour ASCII Art:")
                print(result)
                
            except (ValueError, TypeError) as e:
                print(f"Error: {e}")
                
    except KeyboardInterrupt:
        print("\nProgram interrupted. Exiting...")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")
        
    print("Goodbye!")


if __name__ == "__main__":
    main()
```

## Key Features

1. **Object-Oriented Design**: Implements the `AsciiArt` class with methods for drawing different shapes

2. **Input Validation**: Thorough validation for all inputs, including:
   - Type checking
   - Value range checking
   - Symbol validation (single character, not whitespace)

3. **Error Handling**: Uses appropriate error types:
   - `TypeError` for incorrect input types
   - `ValueError` for invalid values

4. **Documentation**: Comprehensive docstrings for each method explaining:
   - Purpose
   - Parameters
   - Return values
   - Possible exceptions

5. **User Interface**: Simple interactive console interface in the `main()` function

6. **Security**: Protected against invalid inputs with robust validation

7. **Testability**: Each method is independent and returns a string, making testing straightforward

The implementation provides correct shape rendering with customizable symbols while maintaining code modularity, readability, and security.