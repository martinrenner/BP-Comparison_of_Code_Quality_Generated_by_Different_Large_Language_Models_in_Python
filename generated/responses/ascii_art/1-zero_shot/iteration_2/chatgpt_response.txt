```python
#!/usr/bin/env python3
"""
Console-based 2D ASCII ART application.

This module defines the AsciiArt class which implements methods for drawing common ASCII shapes:
  - Square
  - Rectangle
  - Parallelogram
  - Right-angled Triangle
  - Symmetrical Pyramid

Each method returns a multi‐line string representing the desired shape.
Input parameters (dimensions and symbol) are validated to ensure they are positive, secure,
and conform to the required format (a single, non‐whitespace printable character for symbol).
"""

class AsciiArt:
    """
    A class to generate various ASCII art shapes.
    """

    def __init__(self):
        """Initialize the AsciiArt instance."""
        pass

    @staticmethod
    def _validate_dimension(value: int, name: str) -> None:
        """
        Validate that a dimension (width or height) is a positive integer.
        
        Args:
            value (int): The dimension value.
            name (str): The name of the dimension (for error messages).
            
        Raises:
            ValueError: If value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{name} must be a positive integer. Got {value}.")

    @staticmethod
    def _validate_symbol(symbol: str) -> None:
        """
        Validate that symbol is a single, non-whitespace character.
        
        Args:
            symbol (str): The symbol to use.
            
        Raises:
            ValueError: If symbol is not a single, non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("symbol must be a single, non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draw a square with the given width using the provided symbol.

        Args:
            width (int): The width (and height) of the square.
            symbol (str): A single printable (non-whitespace) character.
            
        Returns:
            str: Multi-line string representing the square.
        """
        self._validate_dimension(width, "width")
        self._validate_symbol(symbol)

        # Build each row of the square
        rows = [symbol * width for _ in range(width)]
        return "\n".join(rows)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a rectangle with the given width and height using the provided symbol.

        Args:
            width (int): The number of symbols in each row.
            height (int): The number of rows.
            symbol (str): A single printable (non-whitespace) character.
            
        Returns:
            str: Multi-line string representing the rectangle.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = [symbol * width for _ in range(height)]
        return "\n".join(rows)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a parallelogram that grows diagonally to the right.
        Each row is shifted to the right by one space relative to the previous row.

        Args:
            width (int): The number of symbols per row.
            height (int): The number of rows.
            symbol (str): A single printable (non-whitespace) character.
            
        Returns:
            str: Multi-line string representing the parallelogram.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = [(" " * i) + (symbol * width) for i in range(height)]
        return "\n".join(rows)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draw a filled right-angled triangle.
        The triangle is constructed so that the horizontal side is at the top
        and the vertical side is along the right. Each subsequent row is indented by
        one additional space, and the number of symbols decreases by one per row.
        
        Note:
            For a visually valid right triangle in this design, the width must be
            greater than or equal to the height; otherwise the last row may have zero symbols.
        
        Args:
            width (int): The number of symbols in the first (top) row.
            height (int): The number of rows (vertical size).
            symbol (str): A single printable (non-whitespace) character.
            
        Returns:
            str: Multi-line string representing the right-angled triangle.
            
        Raises:
            ValueError: If width < height.
        """
        self._validate_dimension(width, "width")
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        if width < height:
            raise ValueError("For draw_triangle, width must be greater than or equal to height.")

        # The triangle will have its right angle at the top-right corner.
        # Row 0: no indent and width symbols.
        # Each subsequent row increases indent by 1 and decreases symbols by 1.
        rows = []
        for i in range(height):
            num_symbols = width - i
            # Ensure at least one symbol is drawn
            if num_symbols <= 0:
                num_symbols = 1
            line = (" " * i) + (symbol * num_symbols)
            rows.append(line)
        return "\n".join(rows)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draw a symmetrical pyramid with the given height.
        Each row is centered so that the pyramid is symmetrical horizontally.

        Args:
            height (int): The number of rows in the pyramid.
            symbol (str): A single printable (non-whitespace) character.
            
        Returns:
            str: Multi-line string representing the pyramid.
        """
        self._validate_dimension(height, "height")
        self._validate_symbol(symbol)

        rows = []
        for i in range(height):
            # The number of symbols increases by 2 each row (1, 3, 5, ...)
            num_symbols = 2 * i + 1
            # Spaces to center the pyramid
            num_spaces = height - i - 1
            line = (" " * num_spaces) + (symbol * num_symbols)
            rows.append(line)
        return "\n".join(rows)

# Example usage and simple self-test
if __name__ == "__main__":
    art = AsciiArt()
    
    print("Square (width=5):")
    print(art.draw_square(5, "#"))
    print("\nRectangle (width=8, height=3):")
    print(art.draw_rectangle(8, 3, "*"))
    print("\nParallelogram (width=6, height=4):")
    print(art.draw_parallelogram(6, 4, "@"))
    print("\nRight-angled Triangle (width=7, height=5):")
    print(art.draw_triangle(7, 5, "$"))
    print("\nPyramid (height=5):")
    print(art.draw_pyramid(5, "+"))
```