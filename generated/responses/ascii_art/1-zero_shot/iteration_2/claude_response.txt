# ASCII Art Generator

I'll create a high-quality Python console application for generating ASCII art shapes that meets the ISO/IEC 25010 quality standards. This implementation will follow object-oriented principles and include comprehensive input validation.

```python
"""
ASCII Art Generator

This module provides functionality for creating various ASCII art shapes
using a specified symbol. Shapes include squares, rectangles, parallelograms,
right-angled triangles, and symmetrical pyramids.

The implementation follows object-oriented programming principles and includes
thorough input validation for enhanced security and reliability.
"""


class AsciiArt:
    """
    A class for generating ASCII art shapes.
    
    This class provides methods to create different geometric shapes using
    ASCII characters. Each shape is represented as a multi-line string.
    """
    
    @staticmethod
    def _validate_input(width=None, height=None, symbol=None):
        """
        Validates the input parameters for all drawing methods.
        
        Args:
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
            symbol (str, optional): The character to use for drawing.
            
        Raises:
            TypeError: If width or height is not an integer.
            ValueError: If width or height is negative or zero.
            TypeError: If symbol is not a string.
            ValueError: If symbol is not a single character or is whitespace.
        """
        # Validate width
        if width is not None:
            if not isinstance(width, int):
                raise TypeError("Width must be an integer")
            if width <= 0:
                raise ValueError("Width must be a positive integer")
        
        # Validate height
        if height is not None:
            if not isinstance(height, int):
                raise TypeError("Height must be an integer")
            if height <= 0:
                raise ValueError("Height must be a positive integer")
        
        # Validate symbol
        if symbol is not None:
            if not isinstance(symbol, str):
                raise TypeError("Symbol must be a string")
            if len(symbol) != 1:
                raise ValueError("Symbol must be a single character")
            if symbol.isspace():
                raise ValueError("Symbol cannot be a whitespace character")
    
    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
        
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to fill the square with.
            
        Returns:
            str: A multi-line string representation of the square.
            
        Raises:
            TypeError: If width is not an integer or symbol is not a string.
            ValueError: If width is not positive or symbol is not a single character.
        """
        self._validate_input(width=width, symbol=symbol)
        
        # Create a row of symbols with the specified width
        row = symbol * width
        
        # Join multiple identical rows to form the square
        return '\n'.join([row] * width)
    
    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
        
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to fill the rectangle with.
            
        Returns:
            str: A multi-line string representation of the rectangle.
            
        Raises:
            TypeError: If width or height is not an integer or symbol is not a string.
            ValueError: If width or height is not positive or symbol is not a single character.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        # Create a row of symbols with the specified width
        row = symbol * width
        
        # Join multiple identical rows to form the rectangle
        return '\n'.join([row] * height)
    
    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram filled with the specified symbol.
        
        The parallelogram grows diagonally to the right, with each row
        shifted by one space from the previous row.
        
        Args:
            width (int): The width of the parallelogram.
            height (int): The height of the parallelogram.
            symbol (str): The character to fill the parallelogram with.
            
        Returns:
            str: A multi-line string representation of the parallelogram.
            
        Raises:
            TypeError: If width or height is not an integer or symbol is not a string.
            ValueError: If width or height is not positive or symbol is not a single character.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        result = []
        row = symbol * width
        
        for i in range(height):
            # Add appropriate spacing for each row and the row content
            result.append(' ' * i + row)
        
        return '\n'.join(result)
    
    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle filled with the specified symbol.
        
        The triangle grows diagonally to the right, starting from the top-left corner.
        
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to fill the triangle with.
            
        Returns:
            str: A multi-line string representation of the triangle.
            
        Raises:
            TypeError: If width or height is not an integer or symbol is not a string.
            ValueError: If width or height is not positive or symbol is not a single character.
        """
        self._validate_input(width=width, height=height, symbol=symbol)
        
        result = []
        
        # Calculate the number of symbols to add in each row
        symbols_per_row = [int(round((i + 1) * width / height)) for i in range(height)]
        
        for num_symbols in symbols_per_row:
            result.append(symbol * num_symbols)
        
        return '\n'.join(result)
    
    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
        
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to fill the pyramid with.
            
        Returns:
            str: A multi-line string representation of the pyramid.
            
        Raises:
            TypeError: If height is not an integer or symbol is not a string.
            ValueError: If height is not positive or symbol is not a single character.
        """
        self._validate_input(height=height, symbol=symbol)
        
        result = []
        width = 2 * height - 1  # Maximum width of the pyramid base
        
        for i in range(height):
            # Calculate the number of symbols in current row
            num_symbols = 2 * i + 1
            
            # Calculate the number of spaces needed before the symbols
            num_spaces = (width - num_symbols) // 2
            
            # Construct the row with proper spacing and symbols
            row = ' ' * num_spaces + symbol * num_symbols
            result.append(row)
        
        return '\n'.join(result)


def main():
    """
    Main function to demonstrate the ASCII art generator.
    
    Provides a simple console interface for the user to generate different
    ASCII art shapes.
    """
    ascii_art = AsciiArt()
    
    print("Welcome to the ASCII Art Generator!")
    print("-----------------------------------")
    
    try:
        while True:
            print("\nChoose a shape to draw:")
            print("1. Square")
            print("2. Rectangle")
            print("3. Parallelogram")
            print("4. Right-angled Triangle")
            print("5. Pyramid")
            print("6. Quit")
            
            choice = input("\nEnter your choice (1-6): ")
            
            if choice == '6':
                print("Goodbye!")
                break
            
            symbol = input("Enter a symbol to use (a single character): ")
            
            try:
                if choice == '1':
                    width = int(input("Enter width: "))
                    print("\nHere's your square:\n")
                    print(ascii_art.draw_square(width, symbol))
                    
                elif choice == '2':
                    width = int(input("Enter width: "))
                    height = int(input("Enter height: "))
                    print("\nHere's your rectangle:\n")
                    print(ascii_art.draw_rectangle(width, height, symbol))
                    
                elif choice == '3':
                    width = int(input("Enter width: "))
                    height = int(input("Enter height: "))
                    print("\nHere's your parallelogram:\n")
                    print(ascii_art.draw_parallelogram(width, height, symbol))
                    
                elif choice == '4':
                    width = int(input("Enter width: "))
                    height = int(input("Enter height: "))
                    print("\nHere's your right-angled triangle:\n")
                    print(ascii_art.draw_triangle(width, height, symbol))
                    
                elif choice == '5':
                    height = int(input("Enter height: "))
                    print("\nHere's your pyramid:\n")
                    print(ascii_art.draw_pyramid(height, symbol))
                    
                else:
                    print("Invalid choice. Please enter a number between 1 and 6.")
                    
            except (TypeError, ValueError) as e:
                print(f"Error: {e}")
                
    except KeyboardInterrupt:
        print("\nProgram interrupted. Goodbye!")


if __name__ == "__main__":
    main()
```

## Key Features of the Implementation

1. **Object-Oriented Design**: The code is structured around the `AsciiArt` class with well-defined methods for each shape.

2. **Robust Input Validation**: The `_validate_input` method ensures that all inputs are valid before processing, protecting against malicious or incorrect inputs.

3. **Comprehensive Documentation**: Detailed docstrings explain the purpose of each class, method, parameters, return values, and potential exceptions.

4. **Error Handling**: The code raises specific exceptions with informative messages when invalid inputs are provided.

5. **Modularity**: Each drawing function is implemented as a separate method with a single responsibility.

6. **User-Friendly Interface**: The main function provides a simple console-based interface for users to interact with the program.

7. **Performance Efficiency**: The code uses efficient algorithms for generating the shapes, avoiding unnecessary computations.

8. **Security**: Input validation prevents potential security issues from malicious inputs.

9. **Testability**: Each method can be easily tested in isolation with well-defined inputs and expected outputs.

This implementation fully complies with the ISO/IEC 25010 quality standards and meets all the requirements specified in the task.