```python
import math

class AsciiArt:
    """
    A console-based 2D ASCII Art application that supports drawing various shapes.
    
    Supported Shapes:
      - Square
      - Rectangle
      - Parallelogram
      - Right-angled Triangle
      - Pyramid
    """

    def __init__(self):
        # No initialization parameters needed at the moment.
        pass

    @staticmethod
    def _validate_positive_integer(value: int, parameter_name: str):
        """
        Validates that the provided value is a positive integer.
        
        Args:
            value (int): The value to validate.
            parameter_name (str): The name of the parameter, used in the error message.
        
        Raises:
            ValueError: If value is not a positive integer.
        """
        if not isinstance(value, int) or value <= 0:
            raise ValueError(f"{parameter_name} must be a positive integer, got {value}.")

    @staticmethod
    def _validate_symbol(symbol: str):
        """
        Validates that the provided symbol is a single non-whitespace character.
        
        Args:
            symbol (str): The symbol to validate.
        
        Raises:
            ValueError: If symbol is not a single non-whitespace character.
        """
        if not isinstance(symbol, str) or len(symbol) != 1 or symbol.isspace():
            raise ValueError("Symbol must be a single non-whitespace character.")

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the provided symbol.
        
        Args:
            width (int): The width (and height) of the square.
            symbol (str): The single character used to draw the square.
        
        Returns:
            str: A multi-line string representing the square.
        """
        self._validate_positive_integer(width, "Width")
        self._validate_symbol(symbol)

        # Build the square: every line has exactly 'width' symbols
        lines = [symbol * width for _ in range(width)]
        return "\n".join(lines)

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the provided symbol.
        
        Args:
            width (int): The number of characters in each row.
            height (int): The number of rows.
            symbol (str): The single character used to draw the rectangle.
        
        Returns:
            str: A multi-line string representing the rectangle.
        """
        self._validate_positive_integer(width, "Width")
        self._validate_positive_integer(height, "Height")
        self._validate_symbol(symbol)

        lines = [symbol * width for _ in range(height)]
        return "\n".join(lines)

    def draw_parallelogram(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a parallelogram that shifts diagonally to the right.
        Each subsequent row is indented by one additional space.
        
        Args:
            width (int): The width (number of symbols per row) of the parallelogram.
            height (int): The number of rows.
            symbol (str): The single character used to draw the parallelogram.
        
        Returns:
            str: A multi-line string representing the parallelogram.
        """
        self._validate_positive_integer(width, "Width")
        self._validate_positive_integer(height, "Height")
        self._validate_symbol(symbol)

        lines = [(" " * i) + (symbol * width) for i in range(height)]
        return "\n".join(lines)

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle that grows diagonally to the right.
        The triangle is constructed so that the first row contains a minimal number
        of symbols and the last row contains exactly 'width' symbols. The number of symbols
        in each row is calculated proportionally based on the total height.
        
        Args:
            width (int): The maximum number of symbols on the triangle's base.
            height (int): The vertical number of rows in the triangle.
            symbol (str): The single character used to draw the triangle.
        
        Returns:
            str: A multi-line string representing the triangle.
        """
        self._validate_positive_integer(width, "Width")
        self._validate_positive_integer(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        # Each row will have a number of symbols proportional to its row index.
        for row in range(height):
            # Ensure that at least one symbol is drawn on the first row and that the
            # last row prints exactly 'width' symbols.
            num_symbols = math.ceil((row + 1) * width / height)
            lines.append(symbol * num_symbols)
        return "\n".join(lines)

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid.
        The pyramid's base will have (2 * height - 1) symbols, and each row is centered.
        
        Args:
            height (int): The height of the pyramid (also the number of rows).
            symbol (str): The single character used to draw the pyramid.
        
        Returns:
            str: A multi-line string representing the pyramid.
        """
        self._validate_positive_integer(height, "Height")
        self._validate_symbol(symbol)

        lines = []
        base_width = 2 * height - 1
        for row in range(height):
            num_symbols = 2 * row + 1  # Increasing odd numbers: 1, 3, 5, ...
            # Center the row of symbols within the base width by padding with spaces.
            line = (symbol * num_symbols).center(base_width)
            lines.append(line)
        return "\n".join(lines)


# Example usage and simple tests.
if __name__ == "__main__":
    art = AsciiArt()
    try:
        print("Square (width=5):")
        print(art.draw_square(5, "#"))
        print("\nRectangle (width=6, height=3):")
        print(art.draw_rectangle(6, 3, "*"))
        print("\nParallelogram (width=5, height=4):")
        print(art.draw_parallelogram(5, 4, "@"))
        print("\nTriangle (width=10, height=5):")
        print(art.draw_triangle(10, 5, "$"))
        print("\nPyramid (height=4):")
        print(art.draw_pyramid(4, "%"))
    except ValueError as e:
        print("Input Error:", e)
```