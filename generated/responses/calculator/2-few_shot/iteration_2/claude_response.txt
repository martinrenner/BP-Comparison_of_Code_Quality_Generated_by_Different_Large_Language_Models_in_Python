# Console-Based Arithmetic Calculator

I'll now generate a high-quality Python calculator that meets ISO/IEC 25010 standards using object-oriented programming principles. This implementation will handle arithmetic expressions with proper operator precedence, parentheses support, and thorough error handling without using eval().

```python
class Calculator:
    """
    A console-based arithmetic calculator that evaluates mathematical expressions.
    
    This calculator supports:
    - Basic operations: addition (+), subtraction (-), multiplication (*), division (/)
    - Parentheses for grouping expressions
    - Proper operator precedence
    - Both integers and floating-point numbers including negative values
    
    The implementation follows a two-step process:
    1. Parse the expression into tokens
    2. Evaluate the expression using the Shunting Yard algorithm
    """
    
    def __init__(self):
        """Initialize the calculator."""
        # Define the operators and their precedence
        self.operators = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2
        }
    
    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.
        
        Args:
            expression (str): The mathematical expression to evaluate.
            
        Returns:
            float: The result of the evaluated expression.
            
        Raises:
            ValueError: If the expression contains invalid syntax or unbalanced parentheses.
            ZeroDivisionError: If the expression involves division by zero.
            TypeError: If the expression contains invalid operators or operands.
        """
        # Validate and normalize the expression
        normalized_expr = self._normalize_expression(expression)
        
        # Convert infix notation to postfix (RPN) using the Shunting Yard algorithm
        postfix = self._infix_to_postfix(normalized_expr)
        
        # Evaluate the postfix expression
        return self._evaluate_postfix(postfix)
    
    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes a mathematical expression by removing spaces and validating characters.
        
        Args:
            expression (str): The mathematical expression as a string.
            
        Returns:
            str: The normalized expression.
            
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        if not expression:
            raise ValueError("Expression cannot be empty.")
            
        # Check for valid characters
        allowed_chars = set("0123456789+-*/(). ")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")
        
        # Check for balanced parentheses
        if not self._is_balanced_parentheses(expression):
            raise ValueError("Expression contains unbalanced parentheses.")
            
        # Remove whitespace
        return expression.replace(" ", "")
    
    def _is_balanced_parentheses(self, expression: str) -> bool:
        """
        Checks if parentheses in the expression are properly balanced.
        
        Args:
            expression (str): The mathematical expression to check.
            
        Returns:
            bool: True if parentheses are balanced, False otherwise.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return len(stack) == 0
    
    def _infix_to_postfix(self, expression: str) -> list:
        """
        Converts an infix expression to postfix notation using the Shunting Yard algorithm.
        
        Args:
            expression (str): The normalized infix expression.
            
        Returns:
            list: The expression in postfix notation (tokens).
            
        Raises:
            ValueError: If the expression has invalid syntax.
        """
        output_queue = []
        operator_stack = []
        
        i = 0
        while i < len(expression):
            char = expression[i]
            
            # Handle numbers (including multi-digit and decimals)
            if char.isdigit() or (char == '.' and i + 1 < len(expression) and expression[i + 1].isdigit()):
                j = i
                decimal_point = False
                
                # Handle negative numbers
                if j > 0 and expression[j-1] == '-':
                    # Check if the minus is a negative sign rather than subtraction
                    if j == 1 or expression[j-2] in '(+-*/':
                        j -= 1
                        char = expression[j]
                
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        if decimal_point:  # Multiple decimal points are invalid
                            raise ValueError(f"Invalid syntax: multiple decimal points in number at position {j}")
                        decimal_point = True
                    j += 1
                
                number_str = expression[i:j]
                try:
                    number = float(number_str)
                    # Convert to int if it's a whole number
                    if number.is_integer():
                        number = int(number)
                    output_queue.append(number)
                except ValueError:
                    raise ValueError(f"Invalid number format: {number_str}")
                
                i = j
                continue
            
            # Handle operators
            if char in self.operators:
                # Handle unary minus
                if char == '-' and (i == 0 or expression[i-1] in '(+-*/'):
                    # Skip the minus sign as it will be handled with the number
                    i += 1
                    continue
                
                while (operator_stack and operator_stack[-1] != '(' and 
                       (self.operators.get(operator_stack[-1], 0) >= self.operators.get(char, 0))):
                    output_queue.append(operator_stack.pop())
                
                operator_stack.append(char)
            
            # Handle left parenthesis
            elif char == '(':
                operator_stack.append(char)
            
            # Handle right parenthesis
            elif char == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the left parenthesis
                else:
                    raise ValueError("Mismatched parentheses")
            
            else:
                raise ValueError(f"Invalid character: {char}")
            
            i += 1
        
        # Pop any remaining operators from the stack to the output queue
        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Mismatched parentheses")
            output_queue.append(operator_stack.pop())
        
        return output_queue
    
    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression.
        
        Args:
            postfix (list): The expression in postfix notation.
            
        Returns:
            float: The result of the evaluated expression.
            
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            ValueError: If the expression has invalid syntax or insufficient operands.
        """
        if not postfix:
            raise ValueError("Empty expression")
            
        stack = []
        
        for token in postfix:
            if isinstance(token, (int, float)):
                stack.append(token)
            elif token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                
                # Pop operands (the order matters for subtraction and division)
                b = stack.pop()
                a = stack.pop()
                
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero is not allowed")
                    stack.append(a / b)
            else:
                raise ValueError(f"Unknown token: {token}")
        
        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands")
            
        result = stack[0]
        return result


# Example usage
def main():
    """
    Example usage of the Calculator class.
    """
    calc = Calculator()
    
    try:
        # Test cases
        examples = [
            "3 + 4",
            "10 - 5",
            "2 * 3",
            "8 / 4",
            "2 * (3 + 4)",
            "10 / (2 + 3)",
            "3.5 + 4.2",
            "-5 + 10",
            "-(3 + 4) * 2",
            "(2.5 + 1.5) * (3.5 - 1.5)"
        ]
        
        for example in examples:
            result = calc.calculate(example)
            print(f"{example} = {result}")
        
        # Interactive mode
        print("\nEnter 'exit' to quit")
        while True:
            expr = input("Enter an expression: ")
            if expr.lower() == 'exit':
                break
                
            try:
                result = calc.calculate(expr)
                print(f"Result: {result}")
            except (ValueError, ZeroDivisionError, TypeError) as e:
                print(f"Error: {e}")
                
    except Exception as e:
        print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
```

## Key Features

1. **Object-Oriented Design**: The calculator is implemented as a class with a clear interface.
2. **Algorithm**: Uses the Shunting Yard algorithm to convert infix expressions to postfix (RPN) and then evaluates them.
3. **Error Handling**: Robust error handling for invalid inputs, unbalanced parentheses, division by zero, etc.
4. **Support for Complex Expressions**: Handles parentheses, operator precedence, negative numbers, and decimal values.
5. **Input Validation**: Comprehensive validation protecting against invalid or malicious inputs.
6. **Documentation**: Complete docstrings and comments explaining the code's functionality.
7. **Modularity**: Code is logically structured into separate method components.
8. **No eval()**: Implementation avoids using eval() for security reasons.

The calculator can handle various arithmetic expressions, including those with complex nesting and operator combinations, while maintaining good performance and readability.