```python
class Calculator:
    """
    A console-based arithmetic calculator that supports addition, subtraction,
    multiplication, division, and parentheses with correct operator precedence.
    It accepts both integer and floating-point numbers, including negative values.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result as a float.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: If the expression contains invalid characters or unbalanced parentheses.
            ZeroDivisionError: If division by zero is attempted.
        """
        # Normalize the expression (remove whitespace and validate allowed characters)
        normalized_expr = self._normalize_expression(expression)

        # Check for balanced parentheses
        if not self._is_balanced(normalized_expr):
            raise ValueError("The expression has unbalanced parentheses.")

        # Tokenize the expression into numbers and operators
        tokens = self._tokenize(normalized_expr)
        # Convert the infix tokens to postfix notation using the Shunting Yard algorithm
        postfix_tokens = self._infix_to_postfix(tokens)
        # Evaluate the postfix expression and return the result
        result = self._evaluate_postfix(postfix_tokens)
        return result

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes a mathematical expression by removing spaces and ensuring only allowed characters exist.

        Args:
            expression (str): The input mathematical expression.

        Returns:
            str: A normalized expression without spaces.

        Raises:
            ValueError: If the expression contains invalid characters.
        """
        allowed_chars = set("0123456789+-*/(). ")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("The expression contains invalid characters.")
        return expression.replace(" ", "")

    def _is_balanced(self, expression: str) -> bool:
        """
        Checks if the parentheses in the expression are balanced.

        Args:
            expression (str): The mathematical expression.

        Returns:
            bool: True if parentheses are properly paired, False otherwise.
        """
        stack = []
        for char in expression:
            if char == "(":
                stack.append(char)
            elif char == ")":
                if not stack:
                    return False
                stack.pop()
        return not stack

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the input expression into a list of numbers (as floats) and operator strings.

        This method handles unary minus for negative numbers by checking the context.

        Args:
            expression (str): A normalized mathematical expression.

        Returns:
            list: A list containing number tokens (floats) and operator tokens (str).

        Raises:
            ValueError: If an invalid number format is encountered.
        """
        tokens = []
        i = 0
        length = len(expression)
        while i < length:
            char = expression[i]

            # Determine if '-' is a unary minus indicating a negative number.
            if (char == '-' and
                (i == 0 or expression[i - 1] in "(+-*/") and 
                (i + 1 < length and (expression[i + 1].isdigit() or expression[i + 1] == '.'))):
                # Build the negative number token.
                num_str = char
                i += 1
                while i < length and (expression[i].isdigit() or expression[i] == '.'):
                    num_str += expression[i]
                    i += 1
                try:
                    tokens.append(float(num_str))
                except ValueError:
                    raise ValueError(f"Invalid number format: {num_str}")
            elif char.isdigit() or char == '.':
                # Build a positive number token.
                num_str = ""
                while i < length and (expression[i].isdigit() or expression[i] == '.'):
                    num_str += expression[i]
                    i += 1
                try:
                    tokens.append(float(num_str))
                except ValueError:
                    raise ValueError(f"Invalid number format: {num_str}")
            elif char in "+-*/()":
                tokens.append(char)
                i += 1
            else:
                # This should not happen due to prior normalization, but is here as a safeguard.
                raise ValueError(f"Unexpected character encountered: {char}")
        return tokens

    def _infix_to_postfix(self, tokens: list) -> list:
        """
        Converts a list of tokens in infix notation to postfix (Reverse Polish) notation
        using the Shunting Yard algorithm.

        Args:
            tokens (list): A list of tokens (floats and operator strings).

        Returns:
            list: A list of tokens in postfix order.

        Raises:
            ValueError: If there is a mismatched parenthesis in the expression.
        """
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output_queue = []
        operator_stack = []

        for token in tokens:
            if isinstance(token, float):
                output_queue.append(token)
            elif token in precedence:
                while (operator_stack and operator_stack[-1] in precedence and
                       precedence[operator_stack[-1]] >= precedence[token]):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == "(":
                operator_stack.append(token)
            elif token == ")":
                # Pop operators until the matching '(' is found.
                while operator_stack and operator_stack[-1] != "(":
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Mismatched parentheses in the expression.")
                operator_stack.pop()  # Remove the '(' from the stack.
            else:
                raise ValueError(f"Invalid token encountered: {token}")

        # Pop any remaining operators from the stack.
        while operator_stack:
            top_token = operator_stack.pop()
            if top_token in "()":
                raise ValueError("Mismatched parentheses in the expression.")
            output_queue.append(top_token)
        return output_queue

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (Reverse Polish Notation) expression.

        Args:
            tokens (list): A list of tokens in postfix order.

        Returns:
            float: The computed result of the expression.

        Raises:
            ZeroDivisionError: If division by zero is encountered.
            ValueError: If the expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
                    raise ValueError("Malformed expression.")
                right = stack.pop()
                left = stack.pop()
                result = None

                if token == '+':
                    result = left + right
                elif token == '-':
                    result = left - right
                elif token == '*':
                    result = left * right
                elif token == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero is undefined.")
                    result = left / right
                stack.append(result)
            else:
                raise ValueError(f"Invalid token in postfix expression: {token}")

        if len(stack) != 1:
            raise ValueError("Malformed expression.")
        return stack[0]


def main():
    """
    Main entry point for the console-based arithmetic calculator.
    Continuously prompts the user for an expression, evaluates it, and prints the result.
    """
    calc = Calculator()
    print("Welcome to the Console-based Arithmetic Calculator!")
    print("Enter a mathematical expression or type 'quit' to exit.\n")

    while True:
        user_input = input("Enter expression: ").strip()
        if user_input.lower() in {"quit", "exit"}:
            print("Exiting the calculator. Goodbye!")
            break
        try:
            result = calc.calculate(user_input)
            print("Result:", result, "\n")
        except Exception as error:
            print("Error:", error, "\n")


if __name__ == "__main__":
    main()
```