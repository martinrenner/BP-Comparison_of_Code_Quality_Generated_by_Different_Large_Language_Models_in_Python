```python
class Calculator:
    """
    A console-based arithmetic calculator that supports addition (+), subtraction (-),
    multiplication (*), division (/), and parentheses. It supports both integer and 
    floating-point numbers (including negative values) with correct operator precedence.
    
    Usage:
        calc = Calculator()
        result = calc.calculate("3 + 4 * (2 - 1) / 5")
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression string and returns the result as a float.
        
        Args:
            expression (str): The arithmetic expression to evaluate.
        
        Returns:
            float: The result of the evaluated expression.
        
        Raises:
            ValueError: If the expression contains invalid characters, unbalanced parentheses,
                        or syntax errors.
            ZeroDivisionError: If a division by zero is encountered.
        """
        normalized_expr = self._normalize_expression(expression)
        if not self._is_balanced(normalized_expr):
            raise ValueError("Unbalanced parentheses in expression.")
        
        self.tokens = self._tokenize(normalized_expr)
        self.pos = 0  # Initialize the current token position
        result = self._parse_expression()

        if self.pos != len(self.tokens):
            raise ValueError("Invalid expression: unexpected tokens remain.")
        return result

    @staticmethod
    def _normalize_expression(expression: str) -> str:
        """
        Normalizes the arithmetic expression by removing spaces and validating allowed characters.
        
        Args:
            expression (str): The original expression.
        
        Returns:
            str: The normalized expression.
        
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        allowed_chars = set("0123456789+-*/(). ")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")
        
        return expression.replace(" ", "")

    @staticmethod
    def _is_balanced(expression: str) -> bool:
        """
        Checks whether the expression has properly paired parentheses.
        
        Args:
            expression (str): The mathematical expression.
        
        Returns:
            bool: True if parentheses are correctly paired; otherwise, False.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return not stack

    @staticmethod
    def _tokenize(expression: str) -> list:
        """
        Converts the normalized arithmetic expression into a list of tokens.
        Tokens include float numbers and operator symbols.
        
        Args:
            expression (str): The normalized expression string.
        
        Returns:
            list: A list of tokens (floats for numbers and str for operators/parentheses).
        
        Raises:
            ValueError: If an invalid number format or unknown character is encountered.
        """
        tokens = []
        index = 0
        length = len(expression)
        while index < length:
            char = expression[index]
            if char.isdigit() or char == '.':
                number_str = ""
                dot_count = 0
                # Read the full number (supporting floats)
                while index < length and (expression[index].isdigit() or expression[index] == '.'):
                    if expression[index] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimal points.")
                    number_str += expression[index]
                    index += 1
                try:
                    number_value = float(number_str)
                except ValueError as e:
                    raise ValueError(f"Invalid number format: {number_str}") from e
                tokens.append(number_value)
            elif char in "+-*/()":
                tokens.append(char)
                index += 1
            else:
                raise ValueError(f"Invalid character encountered: {char}")
        return tokens

    def _parse_expression(self) -> float:
        """
        Parses and evaluates an expression containing terms separated by + or -.
        
        Returns:
            float: The result of evaluating the expression.
        """
        value = self._parse_term()
        while self.pos < len(self.tokens) and self.tokens[self.pos] in ('+', '-'):
            op = self.tokens[self.pos]
            self.pos += 1
            right = self._parse_term()
            if op == '+':
                value += right
            else:
                value -= right
        return value

    def _parse_term(self) -> float:
        """
        Parses and evaluates a term containing factors separated by * or /.
        
        Returns:
            float: The result of evaluating the term.
        
        Raises:
            ZeroDivisionError: If division by zero is detected.
        """
        value = self._parse_factor()
        while self.pos < len(self.tokens) and self.tokens[self.pos] in ('*', '/'):
            op = self.tokens[self.pos]
            self.pos += 1
            right = self._parse_factor()
            if op == '*':
                value *= right
            else:
                if right == 0:
                    raise ZeroDivisionError("Division by zero encountered in expression.")
                value /= right
        return value

    def _parse_factor(self) -> float:
        """
        Parses and evaluates a factor which can be a number, a parenthesized expression,
        or a unary +/- operation.
        
        Returns:
            float: The numerical value of the factor.
        
        Raises:
            ValueError: If an unexpected token is encountered or the expression ends prematurely.
        """
        if self.pos >= len(self.tokens):
            raise ValueError("Unexpected end of expression.")
        
        token = self.tokens[self.pos]

        # Handle unary plus and minus
        if token == '+':
            self.pos += 1
            return self._parse_factor()
        elif token == '-':
            self.pos += 1
            return -self._parse_factor()
        elif token == '(':
            self.pos += 1  # Skip '('
            value = self._parse_expression()
            if self.pos >= len(self.tokens) or self.tokens[self.pos] != ')':
                raise ValueError("Mismatched parentheses: expected ')'.")
            self.pos += 1  # Skip ')'
            return value
        elif isinstance(token, float):
            self.pos += 1
            return token
        else:
            raise ValueError(f"Unexpected token encountered: {token}")


def main():
    """
    Main function to run the console-based arithmetic calculator.
    Users can input an expression and see the evaluated result.
    Type 'exit' to quit the calculator.
    """
    calc = Calculator()
    print("Arithmetic Calculator")
    print("Enter an arithmetic expression or type 'exit' to quit.")
    while True:
        try:
            expression = input(">> ")
            if expression.lower() == "exit":
                print("Goodbye!")
                break
            result = calc.calculate(expression)
            print(f"Result: {result}")
        except Exception as err:
            print(f"Error: {err}")


if __name__ == "__main__":
    main()
```