```python
class Calculator:
    """
    A console-based arithmetic calculator supporting addition (+), subtraction (-),
    multiplication (*), division (/), and parentheses. It evaluates arithmetic expressions
    with correct operator precedence and supports both integers and floating-point numbers,
    including negative values.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates an arithmetic expression and returns the computed result as a float.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the expression evaluation.

        Raises:
            ValueError: If the expression contains invalid characters or unbalanced parentheses.
            ZeroDivisionError: If a division by zero is encountered during evaluation.
        """
        normalized_expr = self._normalize_expression(expression)
        if not self._is_balanced(normalized_expr):
            raise ValueError("Unbalanced parentheses in expression.")

        tokens = self._tokenize(normalized_expr)
        postfix_tokens = self._to_postfix(tokens)
        result = self._evaluate_postfix(postfix_tokens)
        return result

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes the input expression by removing whitespace and validating allowed characters.

        Args:
            expression (str): A mathematical expression as a string.

        Returns:
            str: The normalized expression without any spaces.

        Raises:
            ValueError: If the expression contains invalid characters.
        """
        allowed_chars = set("0123456789+-*/(). ")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")
        return expression.replace(" ", "")

    def _is_balanced(self, expression: str) -> bool:
        """
        Checks if the parentheses in the expression are properly balanced.

        Args:
            expression (str): The mathematical expression.

        Returns:
            bool: True if parentheses are balanced, False otherwise.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return not stack

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the arithmetic expression into numbers, operators, and parentheses.
        It properly handles negative numbers when they appear as unary operators.

        Args:
            expression (str): A normalized arithmetic expression.

        Returns:
            list: A list of tokens extracted from the expression.
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]

            # Check if the current character starts a number (could be integer or float)
            if char.isdigit() or char == '.':
                number = []
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    number.append(expression[i])
                    i += 1
                tokens.append(''.join(number))
                continue  # Skip incrementing i, already advanced in the while loop.

            # Handle '+' and '-' operators, considering unary minus/plus.
            elif char in "+-":
                # If at the beginning or following an operator/parenthesis, this is a unary sign.
                if i == 0 or expression[i - 1] in "(+-*/":
                    # Check if the sign is followed by a digit or a decimal point.
                    if i + 1 < len(expression) and (expression[i + 1].isdigit() or expression[i + 1] == '.'):
                        sign = char
                        i += 1
                        number = [sign]
                        while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                            number.append(expression[i])
                            i += 1
                        tokens.append(''.join(number))
                        continue
                    else:
                        # If no valid number follows, treat it as a regular operator.
                        tokens.append(char)
                else:
                    tokens.append(char)

            # Handle other operators and parentheses.
            elif char in "*/()":
                tokens.append(char)
            else:
                # This should not occur because of the normalization.
                raise ValueError(f"Invalid character encountered: {char}")
            i += 1
        return tokens

    def _to_postfix(self, tokens: list) -> list:
        """
        Converts a tokenized infix expression into postfix (Reverse Polish Notation)
        using the Shunting Yard algorithm.

        Args:
            tokens (list): The list of tokens from the infix expression.

        Returns:
            list: A list representing the expression in postfix notation.

        Raises:
            ValueError: If mismatched parentheses are encountered.
        """
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        op_stack = []

        for token in tokens:
            if self._is_number(token):
                output.append(token)
            elif token in precedence:
                while op_stack and op_stack[-1] in precedence and precedence[token] <= precedence[op_stack[-1]]:
                    output.append(op_stack.pop())
                op_stack.append(token)
            elif token == '(':
                op_stack.append(token)
            elif token == ')':
                while op_stack and op_stack[-1] != '(':
                    output.append(op_stack.pop())
                if not op_stack:
                    raise ValueError("Unbalanced parentheses encountered.")
                op_stack.pop()  # Remove the '(' from the stack.
            else:
                raise ValueError(f"Invalid token encountered: {token}")

        # Append any remaining operators.
        while op_stack:
            top = op_stack.pop()
            if top in "()":
                raise ValueError("Unbalanced parentheses encountered.")
            output.append(top)
        return output

    def _is_number(self, token: str) -> bool:
        """
        Determines if a token represents a valid number.

        Args:
            token (str): The token to check.

        Returns:
            bool: True if the token is numeric, False otherwise.
        """
        try:
            float(token)
            return True
        except ValueError:
            return False

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression and returns the final result.

        Args:
            tokens (list): The postfix expression tokens.

        Returns:
            float: The result of evaluating the expression.

        Raises:
            ValueError: If the postfix expression is malformed.
            ZeroDivisionError: If division by zero occurs.
        """
        stack = []
        for token in tokens:
            if self._is_number(token):
                stack.append(float(token))
            else:
                if len(stack) < 2:
                    raise ValueError("Invalid expression")
                b = stack.pop()
                a = stack.pop()
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero.")
                    stack.append(a / b)
                else:
                    raise ValueError(f"Unsupported operator encountered: {token}")
        if len(stack) != 1:
            raise ValueError("Invalid expression")
        return stack[0]


if __name__ == "__main__":
    calc = Calculator()
    print("Console-based Arithmetic Calculator")
    print("Supported operations: +, -, *, /, and parentheses ()")
    print("Type 'exit' or 'quit' to close the calculator.")

    while True:
        try:
            user_input = input("\nEnter expression: ")
            if user_input.lower() in ("exit", "quit"):
                print("Exiting calculator. Goodbye!")
                break

            result = calc.calculate(user_input)
            print("Result:", result)
        except Exception as error:
            print("Error:", error)
```