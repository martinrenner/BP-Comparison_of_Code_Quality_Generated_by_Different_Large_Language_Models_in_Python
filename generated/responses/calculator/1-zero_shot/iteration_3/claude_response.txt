# Python Arithmetic Calculator

I'll create a console-based arithmetic calculator that meets the ISO/IEC 25010 requirements. The implementation will use object-oriented programming with proper error handling and follow best practices for code quality.

```python
"""
A calculator module that evaluates arithmetic expressions.

This module provides a Calculator class that can evaluate arithmetic expressions
containing addition, subtraction, multiplication, division, and parentheses
while maintaining proper operator precedence.
"""


class Calculator:
    """
    A class to evaluate arithmetic expressions.

    This calculator supports the following operations:
    - Addition (+)
    - Subtraction (-)
    - Multiplication (*)
    - Division (/)
    - Parentheses for expression grouping

    The calculator handles both integers and floating-point numbers,
    including negative values.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate the given arithmetic expression and return the result.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: If the expression is invalid or contains syntax errors.
            ZeroDivisionError: If the expression attempts division by zero.
        """
        # Remove all whitespace from the expression
        expression = expression.replace(" ", "")

        if not expression:
            raise ValueError("Empty expression")

        # Check for invalid characters
        valid_chars = set("0123456789.+-*/()") 
        if any(char not in valid_chars for char in expression):
            raise ValueError("Expression contains invalid characters")

        # Check for balanced parentheses
        if not self._is_balanced_parentheses(expression):
            raise ValueError("Unbalanced parentheses in expression")

        # Parse and evaluate the expression
        result, _ = self._parse_addition_subtraction(expression, 0)
        return result

    def _is_balanced_parentheses(self, expression: str) -> bool:
        """
        Check if the parentheses in the expression are balanced.

        Args:
            expression (str): The expression to check.

        Returns:
            bool: True if parentheses are balanced, False otherwise.
        """
        count = 0
        for char in expression:
            if char == '(':
                count += 1
            elif char == ')':
                count -= 1
                if count < 0:
                    return False
        return count == 0

    def _parse_addition_subtraction(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parse and evaluate addition and subtraction operations.

        Args:
            expression (str): The expression to evaluate.
            index (int): The current position in the expression.

        Returns:
            tuple[float, int]: A tuple containing the result and the new index.
        """
        left_value, index = self._parse_multiplication_division(expression, index)

        while index < len(expression):
            if expression[index] == '+':
                right_value, index = self._parse_multiplication_division(expression, index + 1)
                left_value += right_value
            elif expression[index] == '-':
                right_value, index = self._parse_multiplication_division(expression, index + 1)
                left_value -= right_value
            elif expression[index] == ')':
                break
            else:
                break

        return left_value, index

    def _parse_multiplication_division(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parse and evaluate multiplication and division operations.

        Args:
            expression (str): The expression to evaluate.
            index (int): The current position in the expression.

        Returns:
            tuple[float, int]: A tuple containing the result and the new index.

        Raises:
            ZeroDivisionError: If division by zero is attempted.
        """
        left_value, index = self._parse_number_or_parenthesis(expression, index)

        while index < len(expression):
            if expression[index] == '*':
                right_value, index = self._parse_number_or_parenthesis(expression, index + 1)
                left_value *= right_value
            elif expression[index] == '/':
                right_value, index = self._parse_number_or_parenthesis(expression, index + 1)
                if right_value == 0:
                    raise ZeroDivisionError("Division by zero")
                left_value /= right_value
            else:
                break

        return left_value, index

    def _parse_number_or_parenthesis(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parse a number or an expression in parentheses.

        Args:
            expression (str): The expression to evaluate.
            index (int): The current position in the expression.

        Returns:
            tuple[float, int]: A tuple containing the parsed value and the new index.

        Raises:
            ValueError: If invalid number format or syntax error is detected.
        """
        # Skip any leading whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1

        # Check if we have a negative sign
        is_negative = False
        if index < len(expression) and expression[index] == '-':
            is_negative = True
            index += 1

        # Check if we're parsing a parenthesized expression
        if index < len(expression) and expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
            
            # We should have a closing parenthesis next
            if index < len(expression) and expression[index] == ')':
                index += 1
            else:
                raise ValueError("Expecting closing parenthesis")
            
            if is_negative:
                value = -value
            
            return value, index

        # Parse a number
        start_index = index
        # Handle the case where the first character after a negative sign is an opening parenthesis
        if is_negative and index < len(expression) and expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
            
            if index < len(expression) and expression[index] == ')':
                index += 1
            else:
                raise ValueError("Expecting closing parenthesis")
            
            return -value, index

        # Parse digits before decimal point
        while index < len(expression) and (expression[index].isdigit()):
            index += 1

        # Parse decimal point and digits after it
        if index < len(expression) and expression[index] == '.':
            index += 1
            if index >= len(expression) or not expression[index].isdigit():
                raise ValueError("Invalid number format")
            while index < len(expression) and expression[index].isdigit():
                index += 1

        if start_index == index:
            raise ValueError(f"Invalid syntax at position {index}")

        try:
            value = float(expression[start_index:index])
            if is_negative:
                value = -value
            return value, index
        except ValueError:
            raise ValueError(f"Invalid number format at position {start_index}")


def main():
    """
    Main function to run the calculator in interactive mode.
    """
    calculator = Calculator()
    print("Arithmetic Calculator")
    print("Enter 'exit' or 'quit' to end the program")
    
    while True:
        try:
            expression = input("\nEnter an expression: ")
            if expression.lower() in ['exit', 'quit']:
                break
                
            result = calculator.calculate(expression)
            
            # Display integers without decimal point
            if result == int(result):
                print(f"Result: {int(result)}")
            else:
                print(f"Result: {result}")
                
        except Exception as e:
            print(f"Error: {str(e)}")


if __name__ == "__main__":
    main()
```

## Implementation Notes

1. **Object-Oriented Design**:
   - Implemented a `Calculator` class with the required `calculate(expression)` interface
   - Used private helper methods for parsing different parts of the expression

2. **Functionality**:
   - Supports all required operations: +, -, *, /
   - Handles parentheses correctly
   - Maintains proper operator precedence (multiplication/division before addition/subtraction)
   - Supports integers, floating-point numbers, and negative values

3. **Error Handling**:
   - Validates balanced parentheses
   - Checks for invalid characters
   - Properly handles division by zero
   - Provides specific error messages for different types of errors

4. **Architecture**:
   - Uses a recursive descent parser to handle expressions
   - Follows operator precedence rules naturally through the parsing hierarchy
   - Avoids using `eval()` for security reasons

5. **Code Quality**:
   - Extensive documentation with docstrings
   - Clear variable naming
   - Modular design with single-responsibility methods
   - Comprehensive error handling
   - Input validation for security

The calculator can be used in interactive mode by running the script directly, or the `Calculator` class can be imported and used in other Python code.