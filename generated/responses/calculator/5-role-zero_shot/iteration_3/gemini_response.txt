```python
import re


class Calculator:
    """
    A console-based arithmetic calculator that supports addition, subtraction,
    multiplication, division, parentheses, and operator precedence.  It handles
    both integer and floating-point numbers.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression and returns the result.

        Args:
            expression: The arithmetic expression to evaluate (e.g., "2 + 3 * (4 - 1)").

        Returns:
            The result of the evaluation as a float.

        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
            TypeError: If the input is not a string
        """

        if not isinstance(expression, str):
            raise TypeError("Input expression must be a string.")

        expression = expression.replace(" ", "")  # Remove whitespace
        self._validate_expression(expression)  # added validation before tokenizing
        tokens = self._tokenize(expression)
        postfix_tokens = self._infix_to_postfix(tokens)
        result = self._evaluate_postfix(postfix_tokens)
        return result

    def _validate_expression(self, expression: str):
        """
        Validates parentheses balancing, division by zero and invalid characters.

        Args:
            expression: string
        """

        # Check for invalid characters
        if not re.match(r"^[0-9+\-*/().-]+$", expression):
            raise ValueError("Invalid characters in expression.")

        # Check for unbalanced parentheses
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")

        # Check for division by zero (basic check, more robust check during evaluation)
        if "/0" in expression:
            # Check if it is /0 followed by operator, or end of line, dot, or parenthesis
            if re.search(r"/0(?=[+\-*/()]|$|\.)", expression):
                raise ValueError("Division by zero detected.")

    def _tokenize(self, expression: str) -> list[str]:
        """
        Tokenizes the arithmetic expression into a list of tokens.

        Args:
            expression: The expression string.

        Returns:
            A list of tokens (e.g., ["2", "+", "3", "*", "(", "4", "-", "1", ")"]).
        """
        # Use regular expression to handle multiple-digit numbers, floats, and negative numbers correctly.
        return re.findall(r"-?\d+\.?\d*|[-+*/()]", expression)

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts an infix expression (represented as a list of tokens) to
        postfix notation (Reverse Polish Notation) using the Shunting Yard algorithm.

        Args:
            tokens: The list of tokens in infix notation.

        Returns:
            A list of tokens in postfix notation.
        """
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []

        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # Check for numbers (including negative)
                output.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Mismatched parentheses.")
                operator_stack.pop()  # Remove the '('
            elif token in precedence:
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)

        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Mismatched parentheses.")
            output.append(operator_stack.pop())

        return output

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).

        Args:
            tokens: The list of tokens in postfix notation.

        Returns:
            The result of the evaluation as a float.

        Raises:
            ValueError: If the expression contains division by zero.
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):
                stack.append(float(token))  # Convert to float to handle decimal numbers
            else:
                if len(stack) < 2:
                    raise ValueError("Invalid postfix expression.")
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()

                    if token == '+':
                        stack.append(operand1 + operand2)
                    elif token == '-':
                        stack.append(operand1 - operand2)
                    elif token == '*':
                        stack.append(operand1 * operand2)
                    elif token == '/':
                        if operand2 == 0:
                            raise ValueError("Division by zero.")
                        stack.append(operand1 / operand2)
                except ValueError:
                    # Re-raise the ValueError with additional info
                    raise ValueError(f"Invalid operation '{token}' in expression")


        if len(stack) != 1:
             raise ValueError("Invalid postfix expression.")
        return stack[0]


if __name__ == '__main__':
    calculator = Calculator()

    while True:
        try:
            expression = input("Enter an arithmetic expression (or 'quit' to exit): ")
            if expression.lower() == 'quit':
                break
            result = calculator.calculate(expression)
            print("Result:", result)
        except (ValueError, TypeError) as e:
            print("Error:", e)
```
