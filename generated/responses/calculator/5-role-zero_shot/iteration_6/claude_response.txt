# Arithmetic Calculator Implementation

I'll develop a console-based arithmetic calculator that handles basic operations with proper operator precedence, parentheses support, and robust error handling.

```python
from typing import List, Union, Dict, Callable
import re


class Calculator:
    """
    A calculator class that evaluates arithmetic expressions as strings.
    Supports addition, subtraction, multiplication, division and parentheses.
    """

    def __init__(self) -> None:
        """Initialize the calculator with operators and their precedence."""
        self.operators: Dict[str, Dict[str, Union[int, Callable]]] = {
            '+': {'precedence': 1, 'operation': lambda a, b: a + b},
            '-': {'precedence': 1, 'operation': lambda a, b: a - b},
            '*': {'precedence': 2, 'operation': lambda a, b: a * b},
            '/': {'precedence': 2, 'operation': lambda a, b: a / b}
        }

    def calculate(self, expression: str) -> float:
        """
        Evaluate the given arithmetic expression and return the result.

        Args:
            expression: A string containing an arithmetic expression with
                        numbers, operators (+, -, *, /) and parentheses.

        Returns:
            The calculated result as a float.

        Raises:
            ValueError: If the expression contains invalid characters or syntax.
            ZeroDivisionError: If division by zero is attempted.
            SyntaxError: If the expression has unbalanced parentheses.
        """
        # Remove all whitespace
        expression = expression.replace(" ", "")

        if not expression:
            raise ValueError("Expression cannot be empty")

        # Validate expression for allowed characters
        if not self._validate_expression(expression):
            raise ValueError("Expression contains invalid characters")

        # Check for balanced parentheses
        if not self._check_balanced_parentheses(expression):
            raise SyntaxError("Unbalanced parentheses in expression")

        # Evaluate the expression
        return self._evaluate_expression(expression)

    def _validate_expression(self, expression: str) -> bool:
        """
        Validate that the expression contains only allowed characters.

        Args:
            expression: The expression to validate.

        Returns:
            True if the expression is valid, False otherwise.
        """
        # Valid characters are digits, decimal points, operators, and parentheses
        valid_pattern = r'^[0-9\+\-\*\/\(\)\.\s]+$'
        return bool(re.match(valid_pattern, expression))

    def _check_balanced_parentheses(self, expression: str) -> bool:
        """
        Check if the expression has balanced parentheses.

        Args:
            expression: The expression to check.

        Returns:
            True if parentheses are balanced, False otherwise.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack or stack.pop() != '(':
                    return False
        return len(stack) == 0

    def _evaluate_expression(self, expression: str) -> float:
        """
        Recursively evaluate the expression by handling parentheses and operator precedence.

        Args:
            expression: The expression to evaluate.

        Returns:
            The calculated result as a float.

        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is malformed.
        """
        # Handle empty expression
        if not expression:
            return 0.0

        # Find the innermost parentheses and evaluate them first
        opening_pos = expression.rfind('(')
        if opening_pos != -1:
            # Find the matching closing parenthesis
            nesting_level = 1
            closing_pos = opening_pos + 1
            
            while nesting_level > 0 and closing_pos < len(expression):
                if expression[closing_pos] == '(':
                    nesting_level += 1
                elif expression[closing_pos] == ')':
                    nesting_level -= 1
                closing_pos += 1
            
            if nesting_level != 0:
                raise SyntaxError("Unbalanced parentheses in expression")
            
            closing_pos -= 1  # Adjust to the actual position
            
            # Evaluate the expression inside parentheses
            inner_result = self._evaluate_expression(
                expression[opening_pos + 1:closing_pos]
            )
            
            # Substitute the result back into the expression
            new_expression = (
                expression[:opening_pos] + 
                str(inner_result) + 
                expression[closing_pos + 1:]
            )
            
            # Continue evaluating the new expression
            return self._evaluate_expression(new_expression)

        # Apply shunting-yard algorithm to handle operator precedence
        return self._evaluate_simple_expression(expression)

    def _evaluate_simple_expression(self, expression: str) -> float:
        """
        Evaluate an expression without parentheses, respecting operator precedence.

        Args:
            expression: The expression to evaluate without parentheses.

        Returns:
            The calculated result as a float.
        """
        # Tokenize the expression
        tokens = self._tokenize(expression)
        
        # Convert to postfix notation (Reverse Polish Notation)
        postfix = self._infix_to_postfix(tokens)
        
        # Evaluate the postfix expression
        return self._evaluate_postfix(postfix)

    def _tokenize(self, expression: str) -> List[str]:
        """
        Split the expression into tokens (numbers and operators).

        Args:
            expression: The expression to tokenize.

        Returns:
            A list of tokens.
        """
        tokens = []
        i = 0
        
        while i < len(expression):
            char = expression[i]
            
            # Handle operators
            if char in self.operators:
                # Handle unary plus and minus
                if (char == '+' or char == '-') and (i == 0 or expression[i-1] in self.operators):
                    # Unary operator - attach to the next number
                    start = i
                    i += 1
                    # Skip the number
                    while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                        i += 1
                    tokens.append(expression[start:i])
                else:
                    # Binary operator
                    tokens.append(char)
                    i += 1
            # Handle numbers
            elif char.isdigit() or char == '.':
                start = i
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    i += 1
                tokens.append(expression[start:i])
            else:
                i += 1
                
        return tokens

    def _infix_to_postfix(self, tokens: List[str]) -> List[str]:
        """
        Convert infix notation to postfix notation using the shunting-yard algorithm.

        Args:
            tokens: The tokenized expression in infix notation.

        Returns:
            The expression in postfix notation.
        """
        output = []
        operator_stack = []
        
        for token in tokens:
            # If token is a number, add to output
            if token not in self.operators:
                output.append(token)
            # If token is an operator
            else:
                # While there are operators on the stack with higher precedence, pop them to output
                while (operator_stack and 
                       operator_stack[-1] in self.operators and
                       self.operators[operator_stack[-1]]['precedence'] >= 
                       self.operators[token]['precedence']):
                    output.append(operator_stack.pop())
                # Push the current operator onto the stack
                operator_stack.append(token)
        
        # Pop any remaining operators to the output
        while operator_stack:
            output.append(operator_stack.pop())
            
        return output

    def _evaluate_postfix(self, postfix: List[str]) -> float:
        """
        Evaluate an expression in postfix notation.

        Args:
            postfix: The expression in postfix notation.

        Returns:
            The calculated result as a float.

        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is malformed.
        """
        stack = []
        
        for token in postfix:
            # If token is a number, push it onto the stack
            if token not in self.operators:
                stack.append(float(token))
            # If token is an operator, pop operands, apply the operator, and push the result
            else:
                # Need at least two operands for a binary operation
                if len(stack) < 2:
                    raise ValueError(f"Invalid expression syntax near '{token}'")
                
                # Pop operands in reverse order
                b = stack.pop()
                a = stack.pop()
                
                # Apply the operation
                operation = self.operators[token]['operation']
                
                # Handle division by zero
                if token == '/' and b == 0:
                    raise ZeroDivisionError("Division by zero")
                
                # Push result back to stack
                stack.append(operation(a, b))
        
        # The final result should be the only item left on the stack
        if len(stack) != 1:
            raise ValueError("Invalid expression")
        
        return stack[0]


def main():
    """Main function to run the calculator interactively."""
    calculator = Calculator()
    
    print("Calculator Application - Enter 'exit' to quit")
    
    while True:
        expression = input("Enter expression: ")
        
        if expression.lower() == 'exit':
            break
            
        try:
            result = calculator.calculate(expression)
            print(f"Result: {result}")
        except Exception as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Implementation Details

This calculator implementation has the following features:

1. **Object-Oriented Design**: Encapsulates calculator functionality in a class with well-defined methods.

2. **Algorithm**: Uses the Shunting-Yard algorithm to handle operator precedence without using `eval()`.

3. **Robust Error Handling**:
   - Validates input for allowed characters
   - Checks for balanced parentheses
   - Handles division by zero
   - Detects malformed expressions

4. **Modularity**: Implementation is broken down into logical components:
   - Input validation
   - Tokenization
   - Conversion to postfix notation
   - Expression evaluation

5. **Security**: Thoroughly validates input to prevent execution of malicious code.

6. **Documentation**: Includes comprehensive docstrings and comments.

The calculator supports:
- Addition, subtraction, multiplication, and division
- Proper operator precedence
- Parentheses for grouping operations
- Both integers and floating-point numbers
- Negative numbers

To use this calculator, create an instance of the `Calculator` class and call its `calculate()` method with an arithmetic expression as a string. The main function provides a simple REPL interface for interactive use.