```python
class Calculator:
    """
    A console-based arithmetic calculator that evaluates arithmetic expressions.

    Supported Operations:
      - Addition (+)
      - Subtraction (-)
      - Multiplication (*)
      - Division (/)
    Also supports:
      - Parentheses for grouping: ()
      - Both integers and floating-point numbers (including negative values)

    Example:
        calc = Calculator()
        result = calc.calculate("3 + 4 * (2 - 1)")
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates the arithmetic expression provided as a string.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the expression.

        Raises:
            ValueError: If the expression contains invalid characters,
                        unbalanced parentheses, or syntax errors.
            ZeroDivisionError: If a division by zero is encountered.
        """
        self.tokens = self._tokenize(expression)
        self.index = 0
        result = self._parse_expression()

        # After parsing, there should be no extraneous tokens.
        if self.index < len(self.tokens):
            raise ValueError("Invalid syntax: extraneous tokens remain.")
        return result

    def _tokenize(self, expression: str):
        """
        Converts the input expression string into a list of tokens.

        Tokens include:
            - Numbers (as strings representing integers or floats)
            - Operators: +, -, *, /
            - Parentheses: ( and )

        Args:
            expression (str): The arithmetic expression.

        Returns:
            list: A list of tokens.

        Raises:
            ValueError: If the expression contains invalid characters.
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]
            # Skip whitespace.
            if char.isspace():
                i += 1
                continue

            # If the character is one of the recognized operators or parentheses.
            if char in '+-*/()':
                tokens.append(char)
                i += 1
            # If the character is a digit or a decimal point, parse a full number.
            elif char.isdigit() or char == '.':
                num_chars = []
                dot_count = 0
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals encountered.")
                    num_chars.append(expression[i])
                    i += 1
                token_str = ''.join(num_chars)
                if token_str == '.':
                    raise ValueError("Invalid number format: standalone decimal point.")
                tokens.append(token_str)
            else:
                raise ValueError(f"Invalid character encountered: '{char}'")
        return tokens

    def _parse_expression(self) -> float:
        """
        Parses the expression based on the following grammar:
            expression ::= term (( '+' | '-' ) term)*
        Returns:
            float: The evaluated result of the expression.
        """
        result = self._parse_term()
        while self._current_token() in ('+', '-'):
            op = self._current_token()
            self.index += 1  # Consume the operator.
            right = self._parse_term()
            if op == '+':
                result += right
            else:  # op == '-'
                result -= right
        return result

    def _parse_term(self) -> float:
        """
        Parses a term based on the following grammar:
            term ::= factor (( '*' | '/' ) factor)*
        Returns:
            float: The evaluated result of the term.

        Raises:
            ZeroDivisionError: If a division by zero is attempted.
        """
        result = self._parse_factor()
        while self._current_token() in ('*', '/'):
            op = self._current_token()
            self.index += 1  # Consume the operator.
            right = self._parse_factor()
            if op == '*':
                result *= right
            else:  # op == '/'
                if right == 0:
                    raise ZeroDivisionError("Division by zero is not allowed.")
                result /= right
        return result

    def _parse_factor(self) -> float:
        """
        Parses a factor based on the following grammar:
            factor ::= ( '+' | '-' )* primary
        Supports unary plus and minus operators.
        
        Returns:
            float: The evaluated result of the factor.
        """
        sign = 1
        # Process potential unary operators.
        while self._current_token() in ('+', '-'):
            if self._current_token() == '-':
                sign *= -1
            # For a unary '+' no change is needed.
            self.index += 1  # Consume the unary operator.
        result = self._parse_primary()
        return sign * result

    def _parse_primary(self) -> float:
        """
        Parses the primary element which can be either a number or a parenthesized expression.
        Grammar:
            primary ::= number | '(' expression ')'

        Returns:
            float: The numerical value of the primary element.

        Raises:
            ValueError: If parentheses are mismatched or if the token is invalid.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression.")

        # If the token is an open parenthesis, parse an enclosed expression.
        if token == '(':
            self.index += 1  # Consume '('.
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unbalanced parentheses: missing ')'.")
            self.index += 1  # Consume ')'.
            return result
        else:
            # The token should represent a number.
            try:
                value = float(token)
                self.index += 1  # Consume the number token.
                return value
            except ValueError:
                raise ValueError(f"Invalid number: {token}")

    def _current_token(self):
        """
        Returns the current token based on the index, or None if no tokens remain.
        """
        if self.index < len(self.tokens):
            return self.tokens[self.index]
        return None


if __name__ == "__main__":
    # Console interface for the arithmetic calculator.
    calc = Calculator()
    print("Console-Based Arithmetic Calculator")
    print("Supported operations: +, -, *, /, parentheses")
    print("Enter 'exit' to quit.")

    while True:
        try:
            expression = input("Enter expression: ").strip()
            if expression.lower() == "exit":
                break
            result = calc.calculate(expression)
            print("Result:", result)
        except Exception as error:
            print("Error:", error)
```