```python
class Calculator:
    """
    A console-based arithmetic calculator that supports addition (+), subtraction (-),
    multiplication (*), division (/), and parentheses. It evaluates expressions containing
    integers and floating-point numbers (including negative values). Operator precedence
    and associativity are correctly handled.

    Usage:
        calc = Calculator()
        result = calc.calculate("3 + 4 * (2 - 1) / 5")
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates the arithmetic expression and returns the result.
        
        :param expression: The arithmetic expression as a string.
        :return: The evaluated result as a float.
        :raises ValueError: If the expression contains invalid tokens or is malformed.
        :raises ZeroDivisionError: If a division by zero is attempted.
        """
        # Validate that the expression only contains allowed characters.
        allowed_chars = "0123456789.+-*/() "
        for char in expression:
            if char not in allowed_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
        
        # Initialize parsing state.
        self._expression = expression
        self._index = 0

        result = self._parse_expression()

        # After parsing, ensure no unexpected characters remain.
        self._skip_whitespace()
        if self._index != len(self._expression):
            raise ValueError("Unexpected characters at end of expression.")

        return result

    def _skip_whitespace(self) -> None:
        """Advances the parsing pointer past any whitespace."""
        while self._index < len(self._expression) and self._expression[self._index].isspace():
            self._index += 1

    def _peek(self) -> str:
        """
        Returns the next non-whitespace character without consuming it.
        
        :return: The current character or None if end of expression is reached.
        """
        self._skip_whitespace()
        if self._index < len(self._expression):
            return self._expression[self._index]
        return None

    def _consume(self, expected_char: str) -> None:
        """
        Consumes the next character if it matches the expected character.
        
        :param expected_char: The character expected next in the expression.
        :raises ValueError: If the next character does not match the expected one.
        """
        self._skip_whitespace()
        if self._index < len(self._expression) and self._expression[self._index] == expected_char:
            self._index += 1
        else:
            raise ValueError(f"Expected '{expected_char}' at position {self._index}")

    def _parse_expression(self) -> float:
        """
        Parses an expression following the grammar:
            expression -> term { ('+' | '-') term }
        
        :return: The computed value of the expression.
        """
        value = self._parse_term()
        while True:
            self._skip_whitespace()
            if self._index < len(self._expression):
                operator = self._expression[self._index]
                if operator == '+' or operator == '-':
                    self._index += 1  # Consume the operator.
                    right_value = self._parse_term()
                    if operator == '+':
                        value += right_value
                    else:
                        value -= right_value
                else:
                    break
            else:
                break
        return value

    def _parse_term(self) -> float:
        """
        Parses a term following the grammar:
            term -> factor { ('*' | '/') factor }
        
        :return: The computed value of the term.
        :raises ZeroDivisionError: If a division by zero is detected.
        """
        value = self._parse_factor()
        while True:
            self._skip_whitespace()
            if self._index < len(self._expression):
                operator = self._expression[self._index]
                if operator == '*' or operator == '/':
                    self._index += 1  # Consume the operator.
                    right_value = self._parse_factor()
                    if operator == '*':
                        value *= right_value
                    else:
                        if right_value == 0:
                            raise ZeroDivisionError("Division by zero.")
                        value /= right_value
                else:
                    break
            else:
                break
        return value

    def _parse_factor(self) -> float:
        """
        Parses a factor, which can be one of the following:
            - A number (integer or floating-point)
            - A parenthesized expression: '(' expression ')'
            - A unary operation: '-' factor or '+' factor
        
        :return: The computed value of the factor.
        :raises ValueError: If the factor is malformed.
        """
        self._skip_whitespace()
        current_char = self._peek()

        if current_char is None:
            raise ValueError("Unexpected end of expression.")

        if current_char == '(':
            # Parse a parenthesized expression.
            self._consume('(')
            value = self._parse_expression()
            self._skip_whitespace()
            if self._peek() != ')':
                raise ValueError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return value
        elif current_char == '-':
            # Handle unary minus.
            self._index += 1
            return -self._parse_factor()
        elif current_char == '+':
            # Handle unary plus (effectively a no-op).
            self._index += 1
            return self._parse_factor()
        else:
            # Parse a number.
            return self._parse_number()

    def _parse_number(self) -> float:
        """
        Parses a number from the expression. Supports integer and floating-point values.
        
        :return: The parsed number as a float.
        :raises ValueError: If the number format is invalid.
        """
        self._skip_whitespace()
        start_index = self._index
        dot_count = 0

        while (self._index < len(self._expression) and
               (self._expression[self._index].isdigit() or self._expression[self._index] == '.')):
            if self._expression[self._index] == '.':
                dot_count += 1
                if dot_count > 1:
                    raise ValueError("Invalid number format with multiple decimals.")
            self._index += 1

        if start_index == self._index:
            raise ValueError(f"Expected a number at position {self._index}.")

        number_str = self._expression[start_index:self._index]
        try:
            return float(number_str)
        except ValueError:
            raise ValueError(f"Invalid number: '{number_str}'.")


def main():
    """
    Entry point for the console-based arithmetic calculator.
    Accepts user input, evaluates the expression, and prints the result.
    """
    calc = Calculator()
    print("Welcome to the Arithmetic Calculator.")
    print("Enter an arithmetic expression (or type 'exit' to quit).")
    
    while True:
        try:
            expression = input(">> ").strip()
            if expression.lower() in ("exit", "quit"):
                print("Goodbye!")
                break
            if not expression:
                continue  # Skip empty input.
            result = calc.calculate(expression)
            print(f"Result: {result}")
        except Exception as e:
            print(f"Error: {e}")


if __name__ == '__main__':
    main()
```