# Arithmetic Calculator Implementation

Let me create a console-based arithmetic calculator implementing the requested functionality:

```python
import re
from decimal import Decimal, InvalidOperation, DivisionByZero
from typing import List, Tuple, Union, Optional


class Calculator:
    """
    A calculator class that evaluates arithmetic expressions with support for:
    - Basic operations: addition, subtraction, multiplication, division
    - Parentheses for grouping expressions
    - Proper operator precedence
    - Both integers and floating-point numbers, including negative values
    """

    def __init__(self):
        # Define supported operators and their precedence
        self.operators = {
            '+': {'precedence': 1, 'associativity': 'left'},
            '-': {'precedence': 1, 'associativity': 'left'},
            '*': {'precedence': 2, 'associativity': 'left'},
            '/': {'precedence': 2, 'associativity': 'left'},
        }

    def calculate(self, expression: str) -> float:
        """
        Evaluate the given arithmetic expression and return the result.

        Args:
            expression: A string containing the arithmetic expression to evaluate

        Returns:
            The computed result as a float

        Raises:
            ValueError: If the expression contains invalid tokens or has unbalanced parentheses
            ZeroDivisionError: If the expression includes division by zero
            TypeError: If the expression is not a string
        """
        if not isinstance(expression, str):
            raise TypeError("Expression must be a string")

        # Preprocess and validate the expression
        cleaned_expression = self._preprocess_expression(expression)
        
        # Tokenize the expression
        tokens = self._tokenize(cleaned_expression)
        
        # Convert infix to postfix notation (Shunting Yard algorithm)
        postfix = self._infix_to_postfix(tokens)
        
        # Evaluate the postfix expression
        result = self._evaluate_postfix(postfix)
        
        return float(result)

    def _preprocess_expression(self, expression: str) -> str:
        """
        Preprocess the expression to handle negative numbers and validate characters.
        
        Args:
            expression: The original expression string
            
        Returns:
            A cleaned expression string
            
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses
        """
        # Remove all whitespace
        expression = expression.replace(" ", "")
        
        # Check for empty expression
        if not expression:
            raise ValueError("Expression cannot be empty")
        
        # Check for invalid characters
        valid_chars = set('0123456789+-*/().e')
        if not all(char in valid_chars for char in expression):
            raise ValueError("Expression contains invalid characters")
        
        # Check for balanced parentheses
        if not self._are_parentheses_balanced(expression):
            raise ValueError("Expression has unbalanced parentheses")
        
        # Handle negative numbers at the beginning of expression or after an open parenthesis
        expression = re.sub(r'(^|[\\(])-', r'\g<1>0-', expression)
        
        return expression

    def _are_parentheses_balanced(self, expression: str) -> bool:
        """
        Checks if parentheses in the expression are balanced.
        
        Args:
            expression: The expression string to check
            
        Returns:
            True if parentheses are balanced, False otherwise
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return len(stack) == 0

    def _tokenize(self, expression: str) -> List[str]:
        """
        Convert the expression string into a list of tokens.
        
        Args:
            expression: The preprocessed expression string
            
        Returns:
            A list of tokens (numbers and operators)
        """
        tokens = []
        i = 0
        
        while i < len(expression):
            char = expression[i]
            
            # Process numbers (including decimals and scientific notation)
            if char.isdigit() or (char == '.' and i + 1 < len(expression) and expression[i+1].isdigit()):
                j = i
                # Handle scientific notation and decimals
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.' or 
                                            expression[j].lower() == 'e' or 
                                            (expression[j] in '+-' and j > 0 and expression[j-1].lower() == 'e')):
                    j += 1
                
                num_str = expression[i:j]
                try:
                    # Validate the number string
                    Decimal(num_str)
                    tokens.append(num_str)
                except InvalidOperation:
                    raise ValueError(f"Invalid number format: {num_str}")
                i = j
            # Process operators and parentheses
            elif char in self.operators or char in '()':
                tokens.append(char)
                i += 1
            else:
                i += 1
                
        return tokens

    def _infix_to_postfix(self, tokens: List[str]) -> List[str]:
        """
        Convert infix notation to postfix notation using the Shunting Yard algorithm.
        
        Args:
            tokens: A list of tokens in infix notation
            
        Returns:
            A list of tokens in postfix notation
        """
        output = []
        operator_stack = []
        
        for token in tokens:
            # If token is a number, add to output
            if token not in self.operators and token not in '()':
                output.append(token)
            # If token is an opening parenthesis, push to stack
            elif token == '(':
                operator_stack.append(token)
            # If token is a closing parenthesis, process operators until matching opening parenthesis
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Remove the opening parenthesis
            # If token is an operator, manage precedence
            else:
                while (operator_stack and operator_stack[-1] != '(' and 
                      (self.operators[token]['precedence'] < self.operators.get(operator_stack[-1], {}).get('precedence', 0) or
                       (self.operators[token]['precedence'] == self.operators.get(operator_stack[-1], {}).get('precedence', 0) and
                        self.operators[token]['associativity'] == 'left'))):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
        
        # Add remaining operators to the output
        while operator_stack:
            output.append(operator_stack.pop())
            
        return output

    def _evaluate_postfix(self, tokens: List[str]) -> Decimal:
        """
        Evaluate a postfix expression.
        
        Args:
            tokens: A list of tokens in postfix notation
            
        Returns:
            The result of the expression as a Decimal
            
        Raises:
            ZeroDivisionError: If a division by zero is attempted
        """
        stack = []
        
        for token in tokens:
            if token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient operands")
                
                b = Decimal(stack.pop())
                a = Decimal(stack.pop())
                
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero is not allowed")
                    stack.append(a / b)
            else:
                stack.append(token)
                
        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands")
            
        return stack[0]


def main():
    """
    Main function that demonstrates the calculator usage.
    """
    calc = Calculator()
    
    print("Console-based Arithmetic Calculator")
    print("Enter 'exit' to quit")
    print("Supported operations: +, -, *, / and parentheses ()")
    
    while True:
        try:
            expression = input("\nEnter expression: ")
            if expression.lower() == 'exit':
                break
                
            result = calc.calculate(expression)
            # Format the result to remove trailing zeros for clean output
            result_str = str(result)
            if result_str.endswith('.0'):
                result_str = result_str[:-2]
                
            print(f"Result: {result_str}")
            
        except (ValueError, ZeroDivisionError, TypeError) as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Implementation Details

This calculator implements all the requirements with the following components:

1. **Calculator Class**: The main class implementing the `calculate(expression: str) -> float` interface.
   
2. **Expression Handling**:
   - Preprocessing to handle negative numbers and validate input
   - Tokenization to convert the string to a token list
   - Shunting Yard algorithm to convert infix to postfix notation (respecting operator precedence)
   - Postfix evaluation to compute the final result

3. **Error Handling**:
   - Validation for unbalanced parentheses
   - Checking for invalid characters
   - Division by zero protection
   - Proper error messages for different error types

4. **Numeric Precision**:
   - Using `Decimal` for accurate calculations, avoiding floating-point issues
   - Results are converted to float as required by the interface

5. **Main Function**:
   - Console-based interface for demonstration
   - Clear error reporting

The implementation follows OOP principles with modular design, clear documentation, and adherence to code quality requirements.