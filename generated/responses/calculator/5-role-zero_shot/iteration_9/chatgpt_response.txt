```python
class Calculator:
    """
    A simple arithmetic calculator supporting +, -, *, / operations and parentheses.

    This calculator evaluates arithmetic expressions represented as strings.
    It supports both integers and floating-point numbers (including negatives),
    and enforces proper operator precedence.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate the arithmetic expression provided as a string.

        Supports addition, subtraction, multiplication, division, and parentheses,
        following standard operator precedence. It accepts integers, floating-point
        numbers, and negative values.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: For malformed expressions, unbalanced parentheses, or unexpected tokens.
            ZeroDivisionError: If a division by zero occurs.
        """
        tokens = self._tokenize(expression)
        # Initialize parser state: token list and current token index.
        self.tokens = tokens
        self.current_token_index = 0
        result = self._parse_expression()
        # Check if there are any tokens left unparsed.
        if self.current_token_index != len(self.tokens):
            raise ValueError("Invalid expression: unexpected tokens remaining")
        return result

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.

        Numbers (integers and decimals) are converted to floats.
        Allowed tokens include: numbers, '+', '-', '*', '/', and parentheses '(', ')'.

        Args:
            expression (str): The arithmetic expression.

        Returns:
            list: A list of tokens (floats for numbers and str for operators).

        Raises:
            ValueError: If the expression contains invalid characters or malformed numbers.
        """
        tokens = []
        i = 0
        while i < len(expression):
            ch = expression[i]
            if ch.isspace():
                i += 1
            elif ch in '+-*/()':
                tokens.append(ch)
                i += 1
            elif ch.isdigit() or ch == '.':
                num_str = ''
                dot_count = 0
                # Accumulate number characters (digits and at most one dot)
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimal points")
                    num_str += expression[i]
                    i += 1
                try:
                    num = float(num_str)
                except ValueError:
                    raise ValueError(f"Invalid number: {num_str}")
                tokens.append(num)
            else:
                raise ValueError(f"Invalid character: {ch}")
        return tokens

    def _parse_expression(self) -> float:
        """
        Parse and evaluate an expression, handling '+' and '-' operators.

        Returns:
            float: The result of the expression.
        """
        result = self._parse_term()
        # Process additive operators.
        while (self.current_token_index < len(self.tokens) and
               self.tokens[self.current_token_index] in ('+', '-')):
            op = self.tokens[self.current_token_index]
            self.current_token_index += 1
            right = self._parse_term()
            if op == '+':
                result += right
            else:
                result -= right
        return result

    def _parse_term(self) -> float:
        """
        Parse and evaluate a term, handling '*' and '/' operators.

        Returns:
            float: The result of the term.
        """
        result = self._parse_factor()
        # Process multiplicative operators.
        while (self.current_token_index < len(self.tokens) and
               self.tokens[self.current_token_index] in ('*', '/')):
            op = self.tokens[self.current_token_index]
            self.current_token_index += 1
            right = self._parse_factor()
            if op == '*':
                result *= right
            else:
                if right == 0:
                    raise ZeroDivisionError("Division by zero")
                result /= right
        return result

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor which can be:
          - A number (float)
          - A parenthesized expression
          - An expression preceded by a unary plus or minus

        Returns:
            float: The result of the factor.
        """
        if self.current_token_index >= len(self.tokens):
            raise ValueError("Invalid expression: unexpected end of input")
        
        token = self.tokens[self.current_token_index]

        # Handle unary operators: '+' and '-'
        if token == '+':
            self.current_token_index += 1
            return self._parse_factor()
        elif token == '-':
            self.current_token_index += 1
            return -self._parse_factor()
        elif token == '(':
            # Consume '(' and evaluate the subexpression.
            self.current_token_index += 1
            result = self._parse_expression()
            # Ensure the corresponding ')' exists.
            if (self.current_token_index >= len(self.tokens) or
                    self.tokens[self.current_token_index] != ')'):
                raise ValueError("Unbalanced parentheses: missing ')'")
            self.current_token_index += 1  # Consume ')'
            return result
        elif isinstance(token, float):
            # Valid number token.
            self.current_token_index += 1
            return token
        else:
            raise ValueError(f"Unexpected token: {token}")


if __name__ == "__main__":
    # Console-based arithmetic calculator interface.
    calc = Calculator()
    print("Console-based Arithmetic Calculator")
    print("Enter an arithmetic expression (or type 'exit' to quit):")
    
    while True:
        try:
            expr = input("> ").strip()
            if expr.lower() in ("exit", "quit"):
                print("Exiting calculator.")
                break
            result = calc.calculate(expr)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```