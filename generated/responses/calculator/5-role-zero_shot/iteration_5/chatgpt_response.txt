```python
class Calculator:
    """
    A simple arithmetic calculator that supports addition, subtraction,
    multiplication, division, and the use of parentheses with proper operator
    precedence. It accepts integers and floating-point numbers (including negatives)
    via unary operators.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates an arithmetic expression provided as a string.

        Args:
            expression (str): The expression to evaluate.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: If the expression is malformed (e.g., unbalanced parentheses,
                        invalid characters, or incorrect format).
            ZeroDivisionError: If division by zero is attempted.
        """
        # Tokenize the input expression.
        self.tokens = self._tokenize(expression)
        self.pos = 0
        # Parse and evaluate the expression from the token list.
        result = self._parse_expression()
        # Ensure all tokens have been consumed.
        if self.pos < len(self.tokens):
            raise ValueError("Unexpected token found in expression.")
        return result

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens (numbers and operators).

        Args:
            expression (str): The arithmetic expression.

        Returns:
            list: List of tokens (numbers as floats and operators/parentheses as strings).

        Raises:
            ValueError: If any invalid characters are found.
        """
        tokens = []
        i = 0
        # Allowed characters include digits, the period for decimals, operators, 
        # parentheses, and whitespace.
        allowed_characters = "0123456789.+-*/() \t"
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character '{ch}' in expression.")

        while i < len(expression):
            char = expression[i]
            # Skip whitespace
            if char.isspace():
                i += 1
                continue

            # If the character is a digit or a dot, parse a number.
            if char.isdigit() or char == '.':
                num_str = ""
                dot_seen = False
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        if dot_seen: 
                            raise ValueError("Invalid numeric format: multiple decimals.")
                        dot_seen = True
                    num_str += expression[i]
                    i += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError(f"Invalid numeric format: {num_str}")
                tokens.append(number)
            # Recognize valid operators and parentheses.
            elif char in "+-*/()":
                tokens.append(char)
                i += 1
            else:
                # This branch should never be reached because of the allowed character check above.
                raise ValueError(f"Encountered invalid character: {char}")
        return tokens

    def _parse_expression(self) -> float:
        """
        Parses an expression handling addition (+) and subtraction (-).

        Returns:
            float: The result of the parsed sub-expression.
        """
        value = self._parse_term()
        while self.pos < len(self.tokens) and self.tokens[self.pos] in ('+', '-'):
            op = self.tokens[self.pos]
            self.pos += 1
            next_term = self._parse_term()
            if op == '+':
                value += next_term
            else:
                value -= next_term
        return value

    def _parse_term(self) -> float:
        """
        Parses a term handling multiplication (*) and division (/).

        Returns:
            float: The result of the parsed term.
        """
        value = self._parse_factor()
        while self.pos < len(self.tokens) and self.tokens[self.pos] in ('*', '/'):
            op = self.tokens[self.pos]
            self.pos += 1
            next_factor = self._parse_factor()
            if op == '*':
                value *= next_factor
            else:
                if next_factor == 0:
                    raise ZeroDivisionError("Division by zero is undefined.")
                value /= next_factor
        return value

    def _parse_factor(self) -> float:
        """
        Parses a factor which may be a number, a parenthesized expression,
        or a unary operator expression.

        Returns:
            float: The result of the parsed factor.
        """
        if self.pos >= len(self.tokens):
            raise ValueError("Unexpected end of expression.")

        token = self.tokens[self.pos]

        # Handle unary operators (+ or -)
        if token == '+' or token == '-':
            self.pos += 1
            factor = self._parse_factor()
            return factor if token == '+' else -factor

        # Handle parenthesized expressions.
        if token == '(':
            self.pos += 1
            value = self._parse_expression()
            if self.pos >= len(self.tokens) or self.tokens[self.pos] != ')':
                raise ValueError("Unbalanced parentheses: missing ')'.")
            self.pos += 1  # Skip the closing parenthesis.
            return value

        # The token should be a number here.
        if isinstance(token, float):
            self.pos += 1
            return token

        raise ValueError(f"Unexpected token: {token}")


if __name__ == "__main__":
    import sys

    def main():
        """
        Entry point for the console-based arithmetic calculator.
        """
        calc = Calculator()
        print("Simple Arithmetic Calculator")
        print("Enter a mathematical expression to evaluate or type 'exit' to quit.")
        while True:
            try:
                expression = input(">> ").strip()
                if expression.lower() in ("exit", "quit"):
                    print("Exiting the calculator.")
                    break
                result = calc.calculate(expression)
                print("Result:", result)
            except Exception as e:
                print("Error:", e)

    try:
        main()
    except KeyboardInterrupt:
        print("\nCalculator terminated by user.")
        sys.exit(0)
```