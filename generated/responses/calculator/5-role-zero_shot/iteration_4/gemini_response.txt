```python
import re


class Calculator:
    """
    A console-based arithmetic calculator that supports addition, subtraction,
    multiplication, division, and parentheses.  It handles operator precedence
    and both integer and floating-point numbers.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression and returns the result.

        Args:
            expression: The arithmetic expression as a string.

        Returns:
            The result of the evaluation as a float.

        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced
                parentheses, invalid characters, division by zero).
        """
        try:
            # Tokenize and parse, then evaluate.
            tokens = self._tokenize(expression)
            parsed_expression = self._parse(tokens)
            result = self._evaluate(parsed_expression)
            return result
        except ZeroDivisionError:
            raise ValueError("Division by zero encountered.")
        except (IndexError, AttributeError):
            # Catch potential errors from parsing and evaluation of incomplete expressions, etc.
            raise ValueError("Invalid expression.")

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the input expression string into a list of tokens.

        Args:
            expression: The expression string.

        Returns:
          A list of tokens (numbers, operators, parentheses).

        Raises:
            ValueError: If an invalid character appears in the expression.
        """
        # Remove whitespace for easier parsing
        expression = expression.replace(" ", "")

        tokens = []
        # Use lookahead and lookbehind assertions in regex, works efficiently in one pass
        pattern = r"(\(\s*)|(\s*\))|(-?\d+\.?\d*)|([+\-*/])"
        matches = re.finditer(pattern, expression)

        for match in matches:
            token = match.group(0)
            if token:
                tokens.append(token)

        # Check for invalid characters (anything not a digit, operator, or parenthesis)
        allowed_chars = re.compile(r"^[0-9+\-*/().\s]+$")
        if not allowed_chars.match(expression):
            raise ValueError("Invalid characters in expression.")

        # Final quick sanity check on token list produced
        for token in tokens:
            if not (token.replace('.', '', 1).replace('-', '', 1).isdigit() or token in "+-*/()"):
                raise ValueError(f"Invalid character sequence or token: {token}")

        return tokens

    def _parse(self, tokens: list) -> list:
        """
        Parses the token list into a nested structure representing the expression's
        structure based on operator precedence and parentheses.  Uses a
        simplified version of the Shunting Yard algorithm.

        Args:
          tokens:  List of tokens from _tokenize.

        Returns:
          Nested list representing the parsed expression

        Raises:
            ValueError:  If parentheses are unbalanced.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}

        for token in tokens:
            if token.replace('.', '', 1).replace('-', '', 1).isdigit():  # Check if it's a number (handle floats/neg)
                output_queue.append(float(token))
            elif token in precedence:
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                try:
                    while operator_stack[-1] != '(':
                        output_queue.append(operator_stack.pop())
                    operator_stack.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses.")

        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Unbalanced parentheses.")
            output_queue.append(operator_stack.pop())

        return output_queue

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).

        Args:
           parsed_expression: output from _parse

        Returns:
           Result of the expression

        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")

                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)

        if len(stack) != 1:
            raise ValueError("Invalid Expression: Too Many Operands")
        return stack[0]



def main():
    """
    Main function to run the calculator.
    """
    calculator = Calculator()
    while True:
        try:
            expression = input("Enter an arithmetic expression (or 'quit' to exit): ")
            if expression.lower() == 'quit':
                break
            result = calculator.calculate(expression)
            print("Result:", result)
        except ValueError as e:
            print("Error:", e)


if __name__ == "__main__":
    main()
```
