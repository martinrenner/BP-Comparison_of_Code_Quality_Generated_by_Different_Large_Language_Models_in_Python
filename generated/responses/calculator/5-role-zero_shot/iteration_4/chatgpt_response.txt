```python
class Calculator:
    """
    A console-based arithmetic calculator that supports addition (+), subtraction (-),
    multiplication (*), division (/), and parentheses. It handles both integers and 
    floating-point numbers (including negative values) with correct operator precedence.

    This implementation uses recursive descent parsing to securely evaluate expressions 
    without relying on eval() or similar functions.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression and return the result as a float.

        The expression can contain numbers, parentheses, and the operators +, -, *, /.
        It supports proper operator precedence and handles unary minus.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The computed result.

        Raises:
            ValueError: If the expression has invalid syntax, unbalanced parentheses,
                        or contains invalid characters.
            ZeroDivisionError: If a division by zero is attempted.
        """
        self.tokens = self._tokenize(expression)
        self.pos = 0
        result = self._parse_expression()
        if self.pos < len(self.tokens):
            raise ValueError("Invalid syntax: extra tokens remaining")
        return result

    def _tokenize(self, expression: str):
        """
        Convert the input expression into a list of tokens.

        Tokens supported include:
          - Numbers (integers and floats)
          - Operators: +, -, *, /
          - Parentheses: (, )

        Whitespace is ignored.

        Args:
            expression (str): The arithmetic expression.

        Returns:
            List[str]: The list of tokens.

        Raises:
            ValueError: If the expression contains invalid characters.
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]
            if char.isspace():
                i += 1
                continue
            elif char in "+-*/()":
                tokens.append(char)
                i += 1
            elif char.isdigit() or char == '.':
                num_str = char
                dot_count = 1 if char == '.' else 0
                i += 1
                while i < len(expression) and (expression[i].isdigit() or (expression[i] == '.' and dot_count == 0)):
                    if expression[i] == '.':
                        dot_count += 1
                    num_str += expression[i]
                    i += 1
                try:
                    float(num_str)
                except ValueError:
                    raise ValueError(f"Invalid number format: {num_str}")
                tokens.append(num_str)
            else:
                raise ValueError(f"Invalid character in expression: '{char}'")
        return tokens

    def _parse_expression(self) -> float:
        """
        Parse and evaluate an expression based on the grammar:
            expression -> term { ('+' | '-') term }*
        
        Returns:
            float: The evaluated result of the expression.
        """
        result = self._parse_term()
        while self._current_token() in ('+', '-'):
            op = self._current_token()
            self._advance()
            right = self._parse_term()
            if op == '+':
                result += right
            else:
                result -= right
        return result

    def _parse_term(self) -> float:
        """
        Parse and evaluate a term based on the grammar:
            term -> factor { ('*' | '/') factor }*
        
        Returns:
            float: The evaluated result of the term.

        Raises:
            ZeroDivisionError: If division by zero occurs.
        """
        result = self._parse_factor()
        while self._current_token() in ('*', '/'):
            op = self._current_token()
            self._advance()
            right = self._parse_factor()
            if op == '*':
                result *= right
            elif op == '/':
                if right == 0:
                    raise ZeroDivisionError("Division by zero is undefined")
                result /= right
        return result

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor based on the grammar:
            factor -> '-' factor | '(' expression ')' | number
        
        Returns:
            float: The evaluated result of the factor.
        
        Raises:
            ValueError: If the factor's syntax is invalid.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression")
        
        # Handle unary minus
        if token == '-':
            self._advance()
            return -self._parse_factor()

        # Handle parentheses
        if token == '(':
            self._advance()
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unmatched '(' in expression")
            self._advance()
            return result

        # The token should be a number
        try:
            value = float(token)
        except ValueError:
            raise ValueError(f"Invalid number token: {token}")
        self._advance()
        return value

    def _current_token(self):
        """Return the current token or None if there are no more tokens."""
        if self.pos < len(self.tokens):
            return self.tokens[self.pos]
        return None

    def _advance(self):
        """Advance to the next token."""
        self.pos += 1


if __name__ == "__main__":
    calc = Calculator()
    print("Console-based Arithmetic Calculator")
    print("Enter 'exit' to quit.")
    while True:
        try:
            expr = input("Enter expression: ")
            if expr.strip().lower() == "exit":
                print("Goodbye!")
                break
            result = calc.calculate(expr)
            print("Result:", result)
        except Exception as ex:
            print("Error:", ex)
```