# Arithmetic Calculator

I'll develop a console-based arithmetic calculator that follows object-oriented design principles and meets the specified requirements.

```python
from typing import List, Union, Tuple
import re


class Calculator:
    """
    A console-based arithmetic calculator that evaluates mathematical expressions
    with support for addition, subtraction, multiplication, division, and parentheses.
    
    This implementation uses a two-step approach:
    1. Parse the expression into tokens
    2. Evaluate the expression using a recursive descent parser to handle operator precedence
    """
    
    def __init__(self):
        # Define valid operators and their precedence
        self.operators = {
            '+': 1,
            '-': 1,
            '*': 2,
            '/': 2
        }
    
    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.
        
        Args:
            expression (str): Mathematical expression to evaluate
            
        Returns:
            float: Result of the expression evaluation
            
        Raises:
            ValueError: If the expression contains invalid characters or is malformed
            ZeroDivisionError: If the expression attempts division by zero
            SyntaxError: If the expression has unbalanced parentheses
        """
        # Validate and sanitize the input
        expression = expression.strip()
        if not expression:
            raise ValueError("Expression cannot be empty")
            
        # Validate parentheses
        self._validate_parentheses(expression)
        
        # Tokenize the expression
        tokens = self._tokenize(expression)
        
        # Evaluate the expression
        result = self._evaluate_expression(tokens)
        return result
    
    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses in the expression are balanced.
        
        Args:
            expression (str): The expression to validate
            
        Raises:
            SyntaxError: If parentheses are unbalanced
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise SyntaxError("Unbalanced parentheses: extra closing parenthesis")
                stack.pop()
                
        if stack:
            raise SyntaxError("Unbalanced parentheses: missing closing parenthesis")
    
    def _tokenize(self, expression: str) -> List[str]:
        """
        Converts a string expression into a list of tokens.
        
        Args:
            expression (str): The expression to tokenize
            
        Returns:
            List[str]: List of tokens (numbers and operators)
            
        Raises:
            ValueError: If the expression contains invalid characters
        """
        # Replace unary minus with a special token
        # Handle cases like "-5" or "(-5)" or "2*-5"
        expression = re.sub(r'(^|[\(\+\-\*/])\s*-', r'\1u', expression)
        
        # Define pattern to match numbers, operators and parentheses
        pattern = r'(?:[0-9]*\.[0-9]+|[0-9]+)|[\+\-\*/\(\)]|u'
        tokens = re.findall(pattern, expression)
        
        # Check for invalid characters
        reconstructed = ''.join(tokens)
        cleaned_expression = re.sub(r'\s+', '', expression)
        if reconstructed != cleaned_expression:
            invalid_chars = set(cleaned_expression) - set(reconstructed)
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
        
        # Process unary operators
        processed_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == 'u':
                # Next token should be a number
                if i + 1 < len(tokens) and re.match(r'^[0-9]*\.?[0-9]+$', tokens[i + 1]):
                    # Negate the number
                    processed_tokens.append(str(-float(tokens[i + 1])))
                    i += 2
                else:
                    raise ValueError("Invalid use of unary minus")
            else:
                processed_tokens.append(tokens[i])
                i += 1
                
        return processed_tokens
    
    def _evaluate_expression(self, tokens: List[str]) -> float:
        """
        Evaluates an expression represented as a list of tokens.
        
        Args:
            tokens (List[str]): Tokens to evaluate
            
        Returns:
            float: Result of the evaluation
            
        Raises:
            ValueError: If the expression is malformed
            ZeroDivisionError: If the expression attempts division by zero
        """
        # Use shunting yard algorithm to convert infix to postfix notation
        postfix = self._infix_to_postfix(tokens)
        
        # Evaluate the postfix expression
        return self._evaluate_postfix(postfix)
    
    def _infix_to_postfix(self, tokens: List[str]) -> List[str]:
        """
        Converts an infix expression to postfix notation using the shunting yard algorithm.
        
        Args:
            tokens (List[str]): Tokens in infix notation
            
        Returns:
            List[str]: Tokens in postfix notation
        """
        output = []
        operator_stack = []
        
        for token in tokens:
            if self._is_number(token):
                output.append(token)
            elif token in self.operators:
                while (operator_stack and 
                       operator_stack[-1] != '(' and
                       self.operators.get(operator_stack[-1], 0) >= self.operators.get(token, 0)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the opening parenthesis
                
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':
                raise SyntaxError("Unbalanced parentheses")
            output.append(operator_stack.pop())
            
        return output
    
    def _evaluate_postfix(self, postfix: List[str]) -> float:
        """
        Evaluates a postfix expression.
        
        Args:
            postfix (List[str]): Expression in postfix notation
            
        Returns:
            float: Result of the evaluation
            
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is malformed
        """
        stack = []
        
        for token in postfix:
            if self._is_number(token):
                stack.append(float(token))
            elif token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient operands")
                
                b = stack.pop()
                a = stack.pop()
                
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero is not allowed")
                    stack.append(a / b)
        
        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands")
            
        return stack[0]
    
    def _is_number(self, token: str) -> bool:
        """
        Checks if a token is a number.
        
        Args:
            token (str): Token to check
            
        Returns:
            bool: True if the token is a number, False otherwise
        """
        try:
            float(token)
            return True
        except ValueError:
            return False


if __name__ == "__main__":
    calculator = Calculator()
    
    print("Console Calculator")
    print("Type 'exit' to quit")
    print("Enter mathematical expressions to calculate")
    
    while True:
        try:
            expression = input("> ")
            if expression.lower() == 'exit':
                break
            
            result = calculator.calculate(expression)
            # Format the output: display as integer if it's a whole number
            if result == int(result):
                print(int(result))
            else:
                print(result)
                
        except Exception as e:
            print(f"Error: {e}")
```

## Design Choices and Implementation Details

1. **Architecture**:
   - Used OOP principles to encapsulate calculator functionality
   - Implemented a recursive descent parser with the Shunting Yard algorithm for handling operator precedence
   - Separated concerns: tokenization, validation, and evaluation

2. **Algorithm**:
   - Used the Shunting Yard algorithm to convert infix notation to postfix notation
   - Evaluated postfix notation using a stack-based approach
   - The algorithm has O(n) time complexity, where n is the number of tokens

3. **Error Handling**:
   - Implemented comprehensive error handling for:
     - Unbalanced parentheses
     - Invalid characters
     - Division by zero
     - Malformed expressions
   - Used appropriate built-in error types (ValueError, SyntaxError, ZeroDivisionError)

4. **Extra Features**:
   - Support for unary minus (e.g., "-5" or "(-5)")
   - Smart output formatting (integers vs. floating-point)

5. **Security**:
   - Careful input validation to reject potentially malicious inputs
   - No use of eval() or similar functions that could execute arbitrary code

The calculator follows professional software development practices with clean architecture, clear documentation, and maintainable code structure.