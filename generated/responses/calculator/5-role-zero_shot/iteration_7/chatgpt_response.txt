```python
import re

class Calculator:
    """
    A console-based arithmetic calculator that supports addition (+), subtraction (-),
    multiplication (*), division (/), parentheses, operator precedence, and both integers,
    floating-point numbers, and negative values.

    The calculate() method evaluates a given expression string and returns its numerical result.

    Raises:
        ValueError: If the expression contains invalid tokens or unbalanced parentheses.
        ZeroDivisionError: If division by zero is attempted.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate the arithmetic expression provided in string format.

        Args:
            expression (str): An arithmetic expression, e.g., "-3.5 + (2 * 4)".

        Returns:
            float: The result of evaluating the expression.

        Raises:
            ValueError: If there are invalid characters or unbalanced parentheses.
            ZeroDivisionError: If division by zero is encountered.
        """
        self.tokens = self._tokenize(expression)
        self.current_index = 0
        result = self._parse_expression()

        if self._current_token() is not None:
            raise ValueError("Invalid syntax: Unexpected token '{}'".format(self._current_token()))

        return result

    def _tokenize(self, expression: str):
        """
        Convert the input expression into a list of tokens (numbers and operators).

        Args:
            expression (str): The arithmetic expression string.

        Returns:
            list: A list of tokens where numbers are strings representing numeric values and
                  operators/parentheses are individual characters.

        Raises:
            ValueError: If an invalid character is encountered.
        """
        tokens = []
        i = 0
        length = len(expression)
        while i < length:
            char = expression[i]
            if char.isspace():
                i += 1
                continue
            if char.isdigit() or char == '.':
                num_str = ''
                dot_count = 0
                # Read the full number including any decimal point.
                while i < length and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format with multiple decimal points.")
                    num_str += expression[i]
                    i += 1
                # Validate parsed number: it should not be just a dot.
                if num_str == ".":
                    raise ValueError("Invalid numeric format: '.' is not a valid number.")
                tokens.append(num_str)
            elif char in '+-*/()':
                tokens.append(char)
                i += 1
            else:
                raise ValueError(f"Invalid character encountered: '{char}'")
        return tokens

    def _current_token(self):
        """
        Return the current token or None if the token list is exhausted.
        """
        if self.current_index < len(self.tokens):
            return self.tokens[self.current_index]
        return None

    def _advance(self):
        """
        Move to the next token.
        """
        self.current_index += 1

    def _parse_expression(self):
        """
        Parse and evaluate an expression based on the grammar:
            Expression -> Term { ('+' | '-') Term }
        """
        result = self._parse_term()
        while True:
            token = self._current_token()
            if token == '+' or token == '-':
                self._advance()
                right = self._parse_term()
                if token == '+':
                    result += right
                else:
                    result -= right
            else:
                break
        return result

    def _parse_term(self):
        """
        Parse and evaluate a term based on the grammar:
            Term -> Factor { ('*' | '/') Factor }
        """
        result = self._parse_factor()
        while True:
            token = self._current_token()
            if token == '*' or token == '/':
                self._advance()
                right = self._parse_factor()
                if token == '*':
                    result *= right
                else:
                    if right == 0:
                        raise ZeroDivisionError("Division by zero is not allowed.")
                    result /= right
            else:
                break
        return result

    def _parse_factor(self):
        """
        Parse and evaluate a factor based on the grammar:
            Factor -> Number | '(' Expression ')' | ('+' | '-') Factor

        Supports unary plus and minus.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression.")

        # Handling unary plus or minus.
        if token == '+':
            self._advance()
            return self._parse_factor()
        if token == '-':
            self._advance()
            return -self._parse_factor()

        # Parentheses: evaluate the inner expression.
        if token == '(':
            self._advance()  # consume '('
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unbalanced parentheses: Missing ')'.")
            self._advance()  # consume ')'
            return result

        # Otherwise, the token should be a number.
        try:
            # Attempt conversion into a float.
            value = float(token)
            self._advance()
            return value
        except ValueError:
            raise ValueError(f"Invalid number '{token}' encountered in expression.")

if __name__ == '__main__':
    calc = Calculator()
    print("Console-based Arithmetic Calculator")
    print("Enter an arithmetic expression (or type 'q' to quit).")
    while True:
        try:
            expr = input(">> ")
            if expr.lower() in ['q', 'quit', 'exit']:
                print("Exiting calculator.")
                break
            result = calc.calculate(expr)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```