```python
class Calculator:
    """
    A simple arithmetic calculator following ISO/IEC 25010 quality characteristics.
    This calculator supports addition, subtraction, multiplication, division, parentheses,
    and both integer and floating-point operands (including negative numbers). It uses the
    Shunting Yard algorithm to parse infix expressions into Reverse Polish Notation (RPN)
    and then evaluates the RPN expression.

    The code is modular, easy to maintain, and contains protection against invalid inputs.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression and return its numerical result.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The computed result of the expression.

        Raises:
            ValueError: If the expression is empty, has invalid syntax, contains unbalanced
                        parentheses, or includes invalid characters.
            ZeroDivisionError: If a division by zero occurs during evaluation.
        """
        tokens = self._tokenize(expression)
        postfix_tokens = self._infix_to_postfix(tokens)
        result = self._evaluate_postfix(postfix_tokens)
        return result

    def _tokenize(self, expression: str) -> list:
        """
        Convert the expression string into a list of tokens (numbers, operators, and parentheses).

        Args:
            expression (str): The raw arithmetic expression.

        Returns:
            list: A list of tokens where numbers are converted to floats and operators/parentheses
                  remain as strings.

        Raises:
            ValueError: If the expression contains invalid characters or an invalid number format.
        """
        tokens = []
        i = 0
        length = len(expression)
        # Allowed operator symbols.
        operators = {"+", "-", "*", "/"}
        while i < length:
            char = expression[i]

            if char.isspace():
                # Skip whitespace characters.
                i += 1
                continue

            # Check if the current character indicates the start of a number.
            # A number can start with a digit, a decimal point, or a unary '-' sign.
            if (char.isdigit() or char == '.') or (
                char == '-' and (
                    i == 0 or
                    (tokens and isinstance(tokens[-1], str) and tokens[-1] in operators | {"("})
                ) and (i + 1 < length and (expression[i + 1].isdigit() or expression[i + 1] == '.'))
            ):
                num_str = ""
                # Handle unary minus.
                if char == '-':
                    num_str += char
                    i += 1
                    if i >= length:
                        raise ValueError("Invalid expression: lonely '-' sign at the end.")
                    char = expression[i]

                # Parse the numeric part (digits and at most one decimal point).
                dot_count = 0
                while i < length and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: too many decimal points.")
                    num_str += expression[i]
                    i += 1

                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format: " + num_str)
                tokens.append(number)
                continue

            # Process operators.
            elif char in operators:
                tokens.append(char)
                i += 1
                continue

            # Process parentheses.
            elif char in {"(", ")"}:
                tokens.append(char)
                i += 1
                continue

            else:
                raise ValueError(f"Invalid character encountered: '{char}'")

        if not tokens:
            raise ValueError("The expression is empty or contains only whitespace.")

        return tokens

    def _infix_to_postfix(self, tokens: list) -> list:
        """
        Convert a list of tokens from infix notation to Reverse Polish Notation (postfix)
        using the Shunting Yard algorithm.

        Args:
            tokens (list): A list of tokens from the input expression.

        Returns:
            list: A list of tokens in postfix (RPN) order.

        Raises:
            ValueError: If there are mismatched parentheses in the expression.
        """
        output_queue = []
        operator_stack = []
        # Define operator precedence.
        precedence = {"+": 1, "-": 1, "*": 2, "/": 2}

        for token in tokens:
            if isinstance(token, float):
                # Numbers are added directly to the output.
                output_queue.append(token)
            elif token in precedence:
                # Pop operators from the stack with higher or equal precedence.
                while operator_stack and operator_stack[-1] != "(" and operator_stack[-1] in precedence and \
                        precedence[operator_stack[-1]] >= precedence[token]:
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == "(":
                operator_stack.append(token)
            elif token == ")":
                # Pop until the matching '(' is found.
                while operator_stack and operator_stack[-1] != "(":
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Mismatched parentheses: no matching '(' found.")
                operator_stack.pop()  # Remove the "(" from stack.
            else:
                raise ValueError(f"Unknown token encountered during parsing: {token}")

        # Append any remaining operators.
        while operator_stack:
            top_op = operator_stack.pop()
            if top_op == "(" or top_op == ")":
                raise ValueError("Mismatched parentheses in the expression.")
            output_queue.append(top_op)

        return output_queue

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluate a postfix (RPN) expression represented as a list of tokens.

        Args:
            tokens (list): The tokenized postfix expression.

        Returns:
            float: The result of evaluating the expression.

        Raises:
            ValueError: If the expression is syntactically incorrect.
            ZeroDivisionError: If division by zero occurs.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in {"+", "-", "*", "/"}:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient operands.")
                operand2 = stack.pop()
                operand1 = stack.pop()

                if token == "+":
                    result = operand1 + operand2
                elif token == "-":
                    result = operand1 - operand2
                elif token == "*":
                    result = operand1 * operand2
                elif token == "/":
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero is not allowed.")
                    result = operand1 / operand2
                stack.append(result)
            else:
                raise ValueError(f"Invalid token during evaluation: {token}")

        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands.")

        return stack[0]


if __name__ == "__main__":
    import sys

    calc = Calculator()
    print("Console-based Arithmetic Calculator")
    print("Enter an arithmetic expression (or type 'exit' to quit):")
    while True:
        try:
            # Get input from the user.
            expr = input(">> ").strip()
            if expr.lower() == "exit":
                print("Exiting calculator.")
                break
            result = calc.calculate(expr)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```