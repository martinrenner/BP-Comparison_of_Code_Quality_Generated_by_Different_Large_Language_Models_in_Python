```python
class Calculator:
    """
    A console-based arithmetic calculator that evaluates arithmetic expressions containing
    addition (+), subtraction (-), multiplication (*), division (/), and parentheses ( ).
    It supports integer and decimal numbers, including negative numbers.

    The calculator implements the following interface:
      - calculate(expression: str) -> float

    It validates the input for unbalanced parentheses, invalid characters, and division by zero.
    An error (ValueError or ZeroDivisionError) is raised if the input is invalid.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates the arithmetic expression and returns the computed result as a float.

        Parameters:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: If the input is invalid (e.g., unbalanced parentheses, invalid tokens).
            ZeroDivisionError: If division by zero is attempted.
        """
        tokens = self._tokenize(expression)
        self._validate_parentheses(tokens)
        rpn = self._infix_to_rpn(tokens)
        result = self._evaluate_rpn(rpn)
        return result

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens (numbers and operators).

        This method supports negative numbers by detecting a '-' as a unary operator when it
        appears at the beginning of the expression or immediately following an operator or '('.

        Parameters:
            expression (str): The arithmetic expression string.

        Returns:
            list: A list of tokens where numbers are of type float and operators/parentheses are strings.

        Raises:
            ValueError: If the expression contains any invalid characters or invalid number format.
        """
        tokens = []
        i = 0
        length = len(expression)
        while i < length:
            char = expression[i]

            # Skip whitespace
            if char.isspace():
                i += 1
                continue

            # Check for operators and parentheses
            if char in "+-*/()":
                # Handle unary minus: if the '-' is at the beginning,
                # or if the previous token is an operator or left parenthesis.
                if char == '-' and (
                    not tokens or
                    (isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")
                ):
                    # Look ahead to see if a number follows
                    if i + 1 < length and (expression[i + 1].isdigit() or expression[i + 1] == '.'):
                        num_str = '-'  # start building the negative number
                        i += 1
                        dot_count = 0
                        while i < length and (expression[i].isdigit() or expression[i] == '.'):
                            if expression[i] == '.':
                                dot_count += 1
                                if dot_count > 1:
                                    raise ValueError(f"Invalid number format with multiple dots in token: {num_str + expression[i]}")
                            num_str += expression[i]
                            i += 1
                        try:
                            token = float(num_str)
                        except ValueError:
                            raise ValueError(f"Invalid number format: {num_str}")
                        tokens.append(token)
                        continue
                    else:
                        # If not followed by a valid number, treat it as subtraction operator.
                        tokens.append(char)
                        i += 1
                        continue
                else:
                    # Regular operator or parenthesis.
                    tokens.append(char)
                    i += 1
                    continue

            # Process a number token (integer or decimal)
            elif char.isdigit() or char == '.':
                num_str = ""
                dot_count = 0
                while i < length and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError(f"Invalid number format with multiple dots in token: {num_str + expression[i]}")
                    num_str += expression[i]
                    i += 1
                try:
                    token = float(num_str)
                except ValueError:
                    raise ValueError(f"Invalid number format: {num_str}")
                tokens.append(token)
            else:
                # If any other character is encountered, it's invalid.
                raise ValueError(f"Invalid character found in expression: '{char}'")
        return tokens

    def _validate_parentheses(self, tokens: list) -> None:
        """
        Validates that the parentheses in the token list are balanced.

        Parameters:
            tokens (list): The list of tokens to validate.

        Raises:
            ValueError: If the parentheses are not balanced.
        """
        balance = 0
        for token in tokens:
            if token == '(':
                balance += 1
            elif token == ')':
                balance -= 1
                if balance < 0:
                    raise ValueError("Unbalanced parentheses detected.")
        if balance != 0:
            raise ValueError("Unbalanced parentheses detected.")

    def _infix_to_rpn(self, tokens: list) -> list:
        """
        Converts the list of tokens from infix notation to Reverse Polish Notation (RPN)
        using the Shunting-yard algorithm.

        Parameters:
            tokens (list): The list of tokens in infix order.

        Returns:
            list: A list of tokens in RPN order.

        Raises:
            ValueError: If there is a mismatched parentheses error.
        """
        output_queue = []
        operator_stack = []
        # Define operator precedence; all operators are left-associative.
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}

        for token in tokens:
            if isinstance(token, float):
                output_queue.append(token)
            elif token in precedence:
                while (operator_stack and operator_stack[-1] in precedence and
                       precedence[operator_stack[-1]] >= precedence[token]):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if not operator_stack or operator_stack[-1] != '(':
                    raise ValueError("Mismatched parentheses detected during conversion.")
                operator_stack.pop()  # Remove the '('
            else:
                # Should never reach here as _tokenize validates tokens.
                raise ValueError(f"Invalid token encountered during conversion: {token}")

        # Pop any remaining operators from the stack.
        while operator_stack:
            top = operator_stack.pop()
            if top in ("(", ")"):
                raise ValueError("Mismatched parentheses detected in final conversion.")
            output_queue.append(top)

        return output_queue

    def _evaluate_rpn(self, tokens: list) -> float:
        """
        Evaluates an expression given in Reverse Polish Notation (RPN).

        Parameters:
            tokens (list): The RPN expression as a list of tokens.

        Returns:
            float: The result of the evaluated expression.

        Raises:
            ValueError: If the RPN expression is invalid.
            ZeroDivisionError: If division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            else:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient values in expression.")
                # Pop the operands in the correct order.
                right = stack.pop()
                left = stack.pop()
                if token == '+':
                    result = left + right
                elif token == '-':
                    result = left - right
                elif token == '*':
                    result = left * right
                elif token == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero.")
                    result = left / right
                else:
                    raise ValueError(f"Unknown operator encountered: {token}")
                stack.append(result)

        if len(stack) != 1:
            raise ValueError("Invalid expression: too many values remain after evaluation.")

        return stack[0]


if __name__ == "__main__":
    calc = Calculator()
    print("Console-based Arithmetic Calculator (Type 'exit' or 'quit' to end)")
    while True:
        try:
            expr = input("Enter expression: ").strip()
            if expr.lower() in ("exit", "quit"):
                print("Exiting the calculator. Goodbye!")
                break
            result = calc.calculate(expr)
            print("Result:", result)
        except Exception as error:
            print("Error:", error)
```