# Arithmetic Calculator Implementation

I'll develop a console-based arithmetic calculator that follows the ISO/IEC 25010 requirements for quality. Let's approach this systematically.

```python
class Calculator:
    """
    A calculator class that evaluates arithmetic expressions.
    
    This calculator supports:
    - Basic operations: addition, subtraction, multiplication, division
    - Parentheses for controlling operation precedence
    - Decimal and negative numbers
    
    The implementation follows the ISO/IEC 25010 quality standards.
    """
    
    def calculate(self, expression: str) -> float:
        """
        Evaluates an arithmetic expression and returns the result.
        
        Args:
            expression (str): A string containing an arithmetic expression
                             (e.g., "3 + 4 * (2 - 1)")
        
        Returns:
            float: The calculated result of the expression
            
        Raises:
            ValueError: If the expression contains invalid characters or is malformed
            ZeroDivisionError: If the expression attempts to divide by zero
            SyntaxError: If the expression has unbalanced parentheses or invalid syntax
        """
        # Remove all whitespace from the expression
        expression = expression.replace(" ", "")
        
        if not expression:
            raise ValueError("Expression cannot be empty")
            
        # Validate the expression contains only valid characters
        self._validate_characters(expression)
        
        # Validate parentheses are balanced
        self._validate_parentheses(expression)
        
        # Parse and evaluate the expression
        result, _ = self._evaluate_expression(expression, 0)
        
        return result
    
    def _validate_characters(self, expression: str) -> None:
        """
        Validates that the expression contains only valid characters.
        
        Args:
            expression (str): The expression to validate
            
        Raises:
            ValueError: If invalid characters are found
        """
        valid_chars = set("0123456789.+-*/().")
        
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses in the expression are properly balanced.
        
        Args:
            expression (str): The expression to validate
            
        Raises:
            SyntaxError: If parentheses are unbalanced
        """
        stack = []
        
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
        
        if stack:
            raise SyntaxError("Unbalanced parentheses: missing closing parentheses")
    
    def _evaluate_expression(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Recursively evaluates an expression starting from a given index.
        
        Args:
            expression (str): The expression to evaluate
            start_index (int): The starting index in the expression
            
        Returns:
            tuple[float, int]: A tuple containing the result and the index after evaluation
            
        Raises:
            SyntaxError: If the expression syntax is invalid
            ZeroDivisionError: If division by zero is attempted
        """
        # First, handle terms and operations (+, -)
        result, index = self._evaluate_term(expression, start_index)
        
        # Continue processing the expression
        while index < len(expression) and expression[index] in ('+', '-'):
            operator = expression[index]
            right_result, next_index = self._evaluate_term(expression, index + 1)
            
            if operator == '+':
                result += right_result
            else:  # operator == '-'
                result -= right_result
                
            index = next_index
            
        return result, index
    
    def _evaluate_term(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Evaluates a term (products and divisions) in the expression.
        
        Args:
            expression (str): The expression to evaluate
            start_index (int): The starting index in the expression
            
        Returns:
            tuple[float, int]: A tuple containing the result and the index after evaluation
        """
        # First, handle factors
        result, index = self._evaluate_factor(expression, start_index)
        
        # Continue processing the term
        while index < len(expression) and expression[index] in ('*', '/'):
            operator = expression[index]
            right_result, next_index = self._evaluate_factor(expression, index + 1)
            
            if operator == '*':
                result *= right_result
            else:  # operator == '/'
                if right_result == 0:
                    raise ZeroDivisionError("Division by zero is not allowed")
                result /= right_result
                
            index = next_index
            
        return result, index
    
    def _evaluate_factor(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Evaluates a factor (number or parenthesized expression) in the expression.
        
        Args:
            expression (str): The expression to evaluate
            start_index (int): The starting index in the expression
            
        Returns:
            tuple[float, int]: A tuple containing the result and the index after evaluation
            
        Raises:
            SyntaxError: If the syntax is invalid
        """
        index = start_index
        
        # Skip any leading whitespace (though we should have removed it already)
        while index < len(expression) and expression[index].isspace():
            index += 1
            
        # Handle parenthesized expressions
        if index < len(expression) and expression[index] == '(':
            result, index = self._evaluate_expression(expression, index + 1)
            
            # Make sure we have a closing parenthesis
            if index >= len(expression) or expression[index] != ')':
                raise SyntaxError("Missing closing parenthesis")
                
            return result, index + 1
            
        # Handle unary plus and minus
        if index < len(expression) and expression[index] in ('+', '-'):
            sign = -1 if expression[index] == '-' else 1
            value, index = self._evaluate_factor(expression, index + 1)
            return sign * value, index
        
        # Handle numbers (integers and decimals)
        if index < len(expression) and (expression[index].isdigit() or expression[index] == '.'):
            # Find the end of the number
            start = index
            has_decimal = False
            
            while index < len(expression) and (expression[index].isdigit() or expression[index] == '.'):
                if expression[index] == '.':
                    if has_decimal:
                        raise ValueError("Invalid number format: multiple decimal points")
                    has_decimal = True
                index += 1
            
            # Extract and convert the number
            number_str = expression[start:index]
            
            # Validate the number format
            if number_str == '.':
                raise ValueError("Invalid number format: lone decimal point")
                
            return float(number_str), index
            
        raise SyntaxError(f"Unexpected character or end of expression at position {index}")


def main():
    """
    Main function to demonstrate the calculator functionality.
    """
    calculator = Calculator()
    
    print("Console-based Arithmetic Calculator")
    print("Type 'exit' to quit")
    print("Examples of valid expressions:")
    print("  3 + 4")
    print("  2.5 * (3 - 1) / 0.5")
    print("  -5 + 2")
    
    while True:
        try:
            expression = input("\nEnter an expression: ")
            if expression.lower() == 'exit':
                break
                
            result = calculator.calculate(expression)
            print(f"Result: {result}")
            
        except (ValueError, SyntaxError, ZeroDivisionError) as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")


if __name__ == "__main__":
    main()
```

## Features and Design Decisions

1. **Object-Oriented Design**: Implemented using a class with clear interface and private helper methods.

2. **Recursive Descent Parser**: Used a recursive descent parser to handle the expression evaluation, respecting the order of operations (PEMDAS - Parentheses, Exponents, Multiplication/Division, Addition/Subtraction).

3. **Error Handling**: 
   - Validates characters in the expression
   - Ensures parentheses are balanced
   - Catches division by zero
   - Validates number formats

4. **No use of eval()**: Built a custom parser instead of using eval() for security.

5. **User Interface**: Simple console-based interface with clear instructions.

6. **Performance**: Uses an efficient algorithm with O(n) time complexity where n is the length of the expression.

7. **Readability**: Clear variable names, comprehensive docstrings, and logical code organization.

## Quality Attributes (ISO/IEC 25010)

- **Functional Suitability**: Correctly implements all required arithmetic operations.
- **Reliability**: Handles errors gracefully without crashing.
- **Performance Efficiency**: Uses an efficient parsing algorithm.
- **Usability**: Simple and intuitive interface.
- **Maintainability**: Well-structured, documented, and modular code.
- **Security**: Avoids unsafe functions like eval() and validates inputs.
- **Compatibility**: Pure Python implementation ensures wide compatibility.
- **Portability**: Console-based application that runs on any platform supporting Python.

The calculator should handle all the required operations with appropriate error handling and follows good software engineering practices.