```python
class Calculator:
    """
    A console-based arithmetic calculator that supports addition, subtraction,
    multiplication, division, and parentheses with correct order of operations.
    
    This class provides the method calculate(expression: str) -> float to evaluate
    arithmetic expressions, and performs input validation according to the
    ISO/IEC 25010 quality model.
    """

    def __init__(self):
        # Operator precedence mapping (all operators are left-associative)
        self.operators = {'+': 1, '-': 1, '*': 2, '/': 2}

    def calculate(self, expression: str) -> float:
        """
        Evaluates the arithmetic expression provided as a string.
        
        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of the expression evaluation.
        
        Raises:
            ValueError: If the expression is invalid (e.g. unbalanced parentheses,
                        invalid characters, or improper format).
            ZeroDivisionError: If a division by zero is encountered.
        """
        tokens = self._tokenize(expression)
        postfix = self._convert_to_postfix(tokens)
        result = self._evaluate_postfix(postfix)
        return result

    def _tokenize(self, expression: str) -> list:
        """
        Converts the given expression string into a list of tokens (numbers and operators).
        
        The tokenization process supports integers and decimals (including negative numbers)
        and checks for invalid characters.

        Args:
            expression (str): The input arithmetic expression.

        Returns:
            list: A list of tokens where numbers are converted to floats, and operators
                  and parentheses remain as strings.

        Raises:
            ValueError: If an invalid character is encountered or if a number is improperly formatted.
        """
        tokens = []
        i = 0
        n = len(expression)
        while i < n:
            char = expression[i]

            # Skip any whitespace characters
            if char.isspace():
                i += 1
                continue

            # Determine if the current position begins a number token.
            # A number token can start with a digit, a decimal point, or a unary minus.
            if char.isdigit() or char == '.' or (
                char == '-' and (not tokens or (isinstance(tokens[-1], str) and tokens[-1] in "(+*/"))
                                and i + 1 < n and (expression[i + 1].isdigit() or expression[i + 1] == '.')
            ):
                number_str = ""

                # Handle unary minus
                if char == '-':
                    number_str += '-'
                    i += 1
                    if i >= n:
                        raise ValueError("Invalid expression: lone '-' at the end.")
                    char = expression[i]

                dot_found = False

                # If the number starts with a decimal point, ensure it is valid.
                if char == '.':
                    dot_found = True
                    number_str += '.'
                    i += 1
                    if i < n and not expression[i].isdigit():
                        raise ValueError("Invalid number format: no digit after decimal point.")

                # Parse digits and at most one decimal point.
                while i < n and (expression[i].isdigit() or (expression[i] == '.' and not dot_found)):
                    if expression[i] == '.':
                        dot_found = True
                    number_str += expression[i]
                    i += 1

                try:
                    number_value = float(number_str)
                except ValueError:
                    raise ValueError(f"Invalid number format: '{number_str}'")
                tokens.append(number_value)
            elif char in ['+', '-', '*', '/', '(', ')']:
                # If the '-' is not part of a number, treat it as a subtraction operator.
                tokens.append(char)
                i += 1
            else:
                # Any character other than the expected ones is invalid.
                raise ValueError(f"Invalid character encountered: '{char}'")
        return tokens

    def _convert_to_postfix(self, tokens: list) -> list:
        """
        Converts the list of tokens in infix notation to postfix notation (Reverse Polish Notation)
        using the Shunting Yard algorithm. This respects the standard operator precedence and parentheses.
        
        Args:
            tokens (list): The list of tokens in infix order.

        Returns:
            list: A list of tokens in postfix order.

        Raises:
            ValueError: If the expression has unbalanced parentheses.
        """
        output_queue = []
        operator_stack = []

        for token in tokens:
            if isinstance(token, float):
                output_queue.append(token)
            elif isinstance(token, str):
                if token in self.operators:
                    # While there is an operator on the stack with higher or equal precedence,
                    # pop operators from the stack to the output queue.
                    while (operator_stack and operator_stack[-1] in self.operators and
                           self.operators[operator_stack[-1]] >= self.operators[token]):
                        output_queue.append(operator_stack.pop())
                    operator_stack.append(token)
                elif token == '(':
                    operator_stack.append(token)
                elif token == ')':
                    # Pop operators from the stack until a left parenthesis is encountered.
                    found_left_paren = False
                    while operator_stack:
                        top = operator_stack.pop()
                        if top == '(':
                            found_left_paren = True
                            break
                        output_queue.append(top)
                    if not found_left_paren:
                        raise ValueError("Unbalanced parentheses in expression.")
                else:
                    # Should not occur because token validation is already handled.
                    raise ValueError(f"Invalid token encountered: '{token}'")
        # Pop any remaining operators from the operator stack.
        while operator_stack:
            top = operator_stack.pop()
            if top in ('(', ')'):
                raise ValueError("Unbalanced parentheses in expression.")
            output_queue.append(top)
        return output_queue

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix (Reverse Polish Notation) expression and returns the computed result.
        
        Args:
            postfix (list): The list of tokens in postfix order.

        Returns:
            float: The result of the evaluation.

        Raises:
            ValueError: If the postfix expression is invalid.
            ZeroDivisionError: If division by zero is attempted.
        """
        stack = []
        for token in postfix:
            if isinstance(token, float):
                stack.append(token)
            elif token in self.operators:
                if len(stack) < 2:
                    raise ValueError(f"Invalid expression: insufficient operands for operator '{token}'.")
                b = stack.pop()
                a = stack.pop()

                if token == '+':
                    result = a + b
                elif token == '-':
                    result = a - b
                elif token == '*':
                    result = a * b
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero encountered.")
                    result = a / b
                else:
                    # Should never reach here as all operators are defined.
                    raise ValueError(f"Unknown operator: '{token}'")
                stack.append(result)
            else:
                raise ValueError(f"Invalid token in postfix expression: '{token}'")
        if len(stack) != 1:
            raise ValueError("Invalid expression: too many operands remaining.")
        return stack[0]


if __name__ == "__main__":
    calc = Calculator()
    print("Console-based Arithmetic Calculator")
    print("Enter an arithmetic expression (or type 'quit' to exit).")
    while True:
        try:
            expression = input(">>> ")
            if expression.strip().lower() in ("quit", "exit"):
                print("Exiting calculator. Goodbye!")
                break
            result = calc.calculate(expression)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```