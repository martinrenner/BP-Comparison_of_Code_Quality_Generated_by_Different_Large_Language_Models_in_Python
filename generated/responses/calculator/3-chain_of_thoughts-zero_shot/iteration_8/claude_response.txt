# Python Calculator Implementation

I'll create a console-based arithmetic calculator using object-oriented programming principles while meeting all the requirements. The solution will use the Shunting Yard algorithm to parse infix notation expressions to postfix notation, then evaluate them.

```python
class Calculator:
    """
    A calculator class that evaluates arithmetic expressions.
    
    Supports operations: addition (+), subtraction (-), multiplication (*), division (/)
    Handles parentheses and follows the correct order of operations.
    Accepts integers and decimal numbers (including negative values).
    """
    
    def __init__(self):
        """Initialize the calculator with operators and their precedence."""
        # Define operators and their precedence
        self.operators = {
            '+': {'precedence': 1, 'associativity': 'left'},
            '-': {'precedence': 1, 'associativity': 'left'},
            '*': {'precedence': 2, 'associativity': 'left'},
            '/': {'precedence': 2, 'associativity': 'left'}
        }
    
    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression and return the result.
        
        Args:
            expression (str): The arithmetic expression to evaluate
            
        Returns:
            float: The result of the expression
            
        Raises:
            ValueError: If the expression contains invalid characters or is malformed
            ZeroDivisionError: If the expression attempts to divide by zero
            SyntaxError: If the expression contains unbalanced parentheses
        """
        # Validate and preprocess the expression
        self._validate_expression(expression)
        tokens = self._tokenize(expression)
        postfix = self._infix_to_postfix(tokens)
        result = self._evaluate_postfix(postfix)
        return result
    
    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
        
        Args:
            expression (str): The expression to validate
            
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If parentheses are unbalanced
        """
        # Check for invalid characters
        valid_chars = set('0123456789+-*/().e ')
        if any(char not in valid_chars for char in expression):
            raise ValueError("Expression contains invalid characters")
        
        # Check for balanced parentheses
        open_count = 0
        for char in expression:
            if char == '(':
                open_count += 1
            elif char == ')':
                open_count -= 1
                if open_count < 0:
                    raise SyntaxError("Unbalanced parentheses")
                
        if open_count > 0:
            raise SyntaxError("Unbalanced parentheses")
    
    def _tokenize(self, expression: str) -> list:
        """
        Convert the expression string into a list of tokens.
        
        Args:
            expression (str): The expression to tokenize
            
        Returns:
            list: A list of tokens (numbers and operators)
        """
        tokens = []
        i = 0
        expression = expression.replace(' ', '')  # Remove all spaces
        
        while i < len(expression):
            char = expression[i]
            
            # If the character is a digit or decimal point, parse the number
            if char.isdigit() or char == '.':
                j = i
                # Skip to the end of the number
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.' or expression[j] == 'e'):
                    if expression[j] == 'e' and j + 1 < len(expression) and expression[j + 1] in '+-':
                        # Handle scientific notation like 1e-3 or 2.5e+4
                        j += 2  # Skip 'e' and the sign
                    else:
                        j += 1
                
                number_str = expression[i:j]
                try:
                    number = float(number_str)
                    tokens.append(number)
                except ValueError:
                    raise ValueError(f"Invalid number format: {number_str}")
                i = j - 1
            
            # Handle operators and parentheses
            elif char in self.operators or char in '()':
                # Handle unary minus by converting it to 0-
                if char == '-' and (i == 0 or expression[i-1] in '(+-*/'):
                    tokens.append(0)
                tokens.append(char)
            
            i += 1
            
        return tokens
    
    def _infix_to_postfix(self, tokens: list) -> list:
        """
        Convert infix notation tokens to postfix notation using the Shunting Yard algorithm.
        
        Args:
            tokens (list): The list of tokens in infix notation
            
        Returns:
            list: The list of tokens in postfix notation
        """
        output_queue = []
        operator_stack = []
        
        for token in tokens:
            # If token is a number, add it to the output queue
            if isinstance(token, (int, float)):
                output_queue.append(token)
            
            # If token is an operator
            elif token in self.operators:
                while (operator_stack and operator_stack[-1] != '(' and 
                       ((self.operators[token]['associativity'] == 'left' and 
                         self.operators[token]['precedence'] <= self.operators.get(operator_stack[-1], {}).get('precedence', 0)) or
                        (self.operators[token]['associativity'] == 'right' and 
                         self.operators[token]['precedence'] < self.operators.get(operator_stack[-1], {}).get('precedence', 0)))):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            
            # If token is a left parenthesis, push it onto the stack
            elif token == '(':
                operator_stack.append(token)
            
            # If token is a right parenthesis, pop from the stack until finding the matching left parenthesis
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                
                # Remove the left parenthesis
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()
                else:
                    raise SyntaxError("Mismatched parentheses")
        
        # Pop any remaining operators from the stack to the output queue
        while operator_stack:
            if operator_stack[-1] == '(':
                raise SyntaxError("Mismatched parentheses")
            output_queue.append(operator_stack.pop())
        
        return output_queue
    
    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluate a postfix notation expression.
        
        Args:
            postfix (list): The list of tokens in postfix notation
            
        Returns:
            float: The result of evaluating the expression
            
        Raises:
            ZeroDivisionError: If the expression attempts to divide by zero
            ValueError: If the expression is malformed
        """
        stack = []
        
        for token in postfix:
            # If token is a number, push it onto the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            
            # If token is an operator, apply it to the top two items on the stack
            elif token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Invalid expression, not enough operands")
                
                b = stack.pop()
                a = stack.pop()
                
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero")
                    stack.append(a / b)
        
        # The result should be the only item left on the stack
        if len(stack) != 1:
            raise ValueError("Invalid expression, too many operands")
        
        return stack[0]


# Example usage
def main():
    """
    Demonstrate the Calculator class with example expressions.
    """
    calculator = Calculator()
    
    test_expressions = [
        "3 + 4",
        "10 - 5",
        "2 * 6",
        "8 / 2",
        "2 + 3 * 4",
        "(2 + 3) * 4",
        "3 * (4 + 2) / 6",
        "2.5 + 3.7",
        "-5 + 10",
        "1 + (-2)",
        "10 / (2 + 3)",
        "1e3 + 2.5",
        "1.5e-2 * 100"
    ]
    
    for expression in test_expressions:
        try:
            result = calculator.calculate(expression)
            print(f"{expression} = {result}")
        except Exception as e:
            print(f"Error evaluating {expression}: {e}")


if __name__ == "__main__":
    main()
```

## Explanation of Implementation

This implementation satisfies all requirements:

1. **Functionality Requirements**:
   - Implements all required operations: +, -, *, /
   - Supports parentheses for grouping
   - Follows correct order of operations
   - Handles both integers and decimals (including scientific notation)
   - Properly handles negative numbers

2. **Implementation Requirements**:
   - Uses OOP with a Calculator class
   - Implements the `calculate(expression: str) -> float` interface
   - Includes proper validation with built-in error types
   - Avoids eval() by implementing a mathematical expression parser
   - Code is formatted in a Markdown code block

3. **Code Quality Requirements**:
   - **Correctness**: Properly handles a variety of expressions
   - **Performance**: Uses efficient Shunting Yard algorithm
   - **Modularity**: Code is separated into logical methods
   - **Safety**: Validates input and handles errors properly
   - **Testability**: Methods are isolated and easy to test
   - **Readability**: Uses clear variable names and includes comprehensive docstrings

The implementation uses the Shunting Yard algorithm to convert infix notation (the standard way we write expressions) to postfix notation (Reverse Polish Notation), which is easier to evaluate programmatically. This is a widely accepted approach for expression parsing.