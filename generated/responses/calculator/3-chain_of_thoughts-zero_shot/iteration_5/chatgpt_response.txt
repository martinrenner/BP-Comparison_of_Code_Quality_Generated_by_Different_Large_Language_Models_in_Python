```python
class Calculator:
    """
    A console-based arithmetic calculator that supports addition (+), subtraction (-),
    multiplication (*), and division (/), including the use of parentheses ().
    It follows the correct order of operations and handles both integer and decimal numbers,
    including negative numbers. It validates input and raises appropriate errors for invalid
    expressions or division by zero.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression string.

        Args:
            expression (str): The arithmetic expression to evaluate.

        Returns:
            float: The result of evaluating the expression.

        Raises:
            ValueError: If the expression contains invalid characters, unbalanced parentheses,
                        or is otherwise malformed.
            ZeroDivisionError: If a division by zero occurs.
        """
        tokens = self._tokenize(expression)
        postfix_tokens = self._infix_to_postfix(tokens)
        result = self._evaluate_postfix(postfix_tokens)
        return result

    def _tokenize(self, expr: str) -> list:
        """
        Convert the input expression string into a list of tokens.

        This method handles numbers (including decimals and negative numbers),
        operators, and parentheses. It also checks for invalid characters and
        malformed numbers.

        Args:
            expr (str): The arithmetic expression as a string.

        Returns:
            list: The list of tokens extracted from the expression.

        Raises:
            ValueError: If an invalid character is encountered or the number format is wrong.
        """
        tokens = []
        i = 0
        length = len(expr)

        while i < length:
            char = expr[i]

            # Skip whitespace
            if char.isspace():
                i += 1
                continue

            # Check if character starts a number (digit or '.'), or a unary minus.
            if char.isdigit() or char == '.' or (
                char == '-' and (i == 0 or (tokens and tokens[-1] in ['+', '-', '*', '/', '(']))
            ):
                num_str = ""

                # Handle unary minus for negative numbers.
                if char == '-':
                    num_str = "-"
                    i += 1
                    if i >= length or (not expr[i].isdigit() and expr[i] != '.'):
                        raise ValueError("Invalid use of '-' sign in expression")
                    char = expr[i]

                decimal_point_count = 0
                # Build the numeric token (integer or decimal)
                while i < length and (expr[i].isdigit() or expr[i] == '.'):
                    if expr[i] == '.':
                        decimal_point_count += 1
                        if decimal_point_count > 1:
                            raise ValueError("Invalid number format: too many decimal points.")
                    num_str += expr[i]
                    i += 1

                # Validate that the number can be converted to float.
                try:
                    float(num_str)
                except ValueError:
                    raise ValueError(f"Invalid number format: {num_str}")
                tokens.append(num_str)
                continue

            # Handle operators and parentheses.
            if char in "+-*/()":
                tokens.append(char)
                i += 1
                continue

            # Any unknown character triggers an error.
            raise ValueError(f"Invalid character encountered: '{char}'")

        # Check for balanced parentheses (simple count check).
        if tokens.count('(') != tokens.count(')'):
            raise ValueError("Unbalanced parentheses in expression")

        return tokens

    def _infix_to_postfix(self, tokens: list) -> list:
        """
        Convert infix notation tokens to postfix notation (Reverse Polish Notation)
        using the Shunting Yard algorithm.

        Args:
            tokens (list): The list of tokens in infix order.

        Returns:
            list: A list of tokens ordered in postfix notation.

        Raises:
            ValueError: If there are mismatched parentheses in the expression.
        """
        # Define operator precedence.
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output_queue = []
        operator_stack = []

        for token in tokens:
            # If the token is a number, add it directly to the output.
            try:
                float(token)
                output_queue.append(token)
                continue
            except ValueError:
                pass

            # If the token is an operator.
            if token in precedence:
                while (
                    operator_stack
                    and operator_stack[-1] in precedence
                    and precedence[operator_stack[-1]] >= precedence[token]
                ):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)

            # Handle left parenthesis.
            elif token == '(':
                operator_stack.append(token)

            # Handle right parenthesis.
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if not operator_stack or operator_stack[-1] != '(':
                    raise ValueError("Mismatched parentheses in expression")
                operator_stack.pop()  # Discard the '('

            else:
                raise ValueError(f"Unknown token: {token}")

        # Pop any remaining operators from the stack.
        while operator_stack:
            top = operator_stack.pop()
            if top in ('(', ')'):
                raise ValueError("Mismatched parentheses in expression")
            output_queue.append(top)
        return output_queue

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluate a postfix (RPN) expression represented by a list of tokens.

        Args:
            tokens (list): The list of tokens in postfix order.

        Returns:
            float: The result after evaluating the postfix expression.

        Raises:
            ValueError: If the postfix expression is malformed.
            ZeroDivisionError: If division by zero is attempted.
        """
        stack = []

        for token in tokens:
            try:
                # Try converting token to a number.
                num = float(token)
                stack.append(num)
                continue
            except ValueError:
                pass

            # Ensure that there are at least two operands for binary operations.
            if token in ('+', '-', '*', '/'):
                if len(stack) < 2:
                    raise ValueError("Malformed expression: insufficient operands.")
                b = stack.pop()  # Right operand
                a = stack.pop()  # Left operand

                if token == '+':
                    res = a + b
                elif token == '-':
                    res = a - b
                elif token == '*':
                    res = a * b
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero is not allowed.")
                    res = a / b

                stack.append(res)
            else:
                raise ValueError(f"Unknown operator: {token}")

        if len(stack) != 1:
            raise ValueError("Malformed expression: too many operands left.")
        return stack[0]


if __name__ == "__main__":
    calc = Calculator()
    print("Arithmetic Calculator. Enter 'quit' or 'exit' to terminate.")
    while True:
        try:
            expression = input("Enter expression: ")
            if expression.lower() in ("quit", "exit"):
                break

            result = calc.calculate(expression)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```