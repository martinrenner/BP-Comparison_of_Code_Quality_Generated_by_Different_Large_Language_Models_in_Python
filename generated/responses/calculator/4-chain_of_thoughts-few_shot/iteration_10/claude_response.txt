# Console-Based Arithmetic Calculator

I'll create a console-based arithmetic calculator that follows all the specified requirements, using object-oriented programming principles and implementing the requested interface.

```python
class Calculator:
    """
    A console-based arithmetic calculator that evaluates mathematical expressions.
    
    This calculator supports basic arithmetic operations (addition, subtraction,
    multiplication, division), respects the order of operations, and handles
    parentheses correctly.
    """
    
    def __init__(self):
        """Initialize the calculator."""
        # Allowed characters in a valid mathematical expression
        self.allowed_chars = set("0123456789+-*/().e ")
    
    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.
        
        Args:
            expression (str): A mathematical expression as a string.
            
        Returns:
            float: The result of the evaluated expression.
            
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, or syntax errors).
            ZeroDivisionError: If the expression involves division by zero.
        """
        # Validate and normalize the expression
        normalized_expr = self._normalize_expression(expression)
        
        # Check if parentheses are balanced
        if not self._is_balanced_parentheses(normalized_expr):
            raise ValueError("Unbalanced parentheses in expression.")
            
        # Evaluate the expression
        result = self._evaluate_expression(normalized_expr)
        return result
    
    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes a mathematical expression by removing spaces and validating characters.
        
        Args:
            expression (str): A mathematical expression as a string.
            
        Returns:
            str: The normalized expression without unnecessary spaces.
            
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        if not all(char in self.allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")
            
        # Remove spaces
        normalized = expression.replace(" ", "")
        
        # Handle unary operators for negative numbers
        # Replace patterns like '(-' with '(0-'
        normalized = normalized.replace("(-", "(0-")
        
        # If expression starts with negative, prepend 0
        if normalized.startswith("-"):
            normalized = "0" + normalized
        
        return normalized
    
    def _is_balanced_parentheses(self, expression: str) -> bool:
        """
        Checks whether a mathematical expression has properly paired parentheses.
        
        Args:
            expression (str): A string containing the mathematical expression.
            
        Returns:
            bool: True if parentheses are correctly paired, otherwise False.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return not stack
    
    def _evaluate_expression(self, expression: str) -> float:
        """
        Recursively evaluates a normalized mathematical expression.
        
        Args:
            expression (str): A normalized mathematical expression.
            
        Returns:
            float: The result of the evaluation.
            
        Raises:
            ValueError: If the expression has syntax errors.
            ZeroDivisionError: If the expression involves division by zero.
        """
        # If expression is empty
        if not expression:
            raise ValueError("Empty expression.")
            
        # Base case: if the expression is just a number
        if self._is_numeric(expression):
            return float(expression)
            
        # Find the position of the last + or - operator outside of parentheses
        last_add_sub = self._find_last_operator(expression, "+-")
        
        if last_add_sub != -1:
            # Split the expression at the operator
            left_expr = expression[:last_add_sub]
            right_expr = expression[last_add_sub + 1:]
            
            # Evaluate the left and right sub-expressions
            if expression[last_add_sub] == '+':
                return self._evaluate_expression(left_expr) + self._evaluate_expression(right_expr)
            else:  # Subtraction
                return self._evaluate_expression(left_expr) - self._evaluate_expression(right_expr)
                
        # If no addition or subtraction found, look for multiplication or division
        last_mul_div = self._find_last_operator(expression, "*/")
        
        if last_mul_div != -1:
            # Split the expression at the operator
            left_expr = expression[:last_mul_div]
            right_expr = expression[last_mul_div + 1:]
            
            # Evaluate the left and right sub-expressions
            if expression[last_mul_div] == '*':
                return self._evaluate_expression(left_expr) * self._evaluate_expression(right_expr)
            else:  # Division
                divisor = self._evaluate_expression(right_expr)
                if divisor == 0:
                    raise ZeroDivisionError("Division by zero.")
                return self._evaluate_expression(left_expr) / divisor
                
        # Check for parentheses
        if expression[0] == '(' and expression[-1] == ')':
            # Remove the outer parentheses and evaluate the inner expression
            return self._evaluate_expression(expression[1:-1])
            
        # If we reach here, the expression is invalid
        raise ValueError(f"Invalid expression: {expression}")
    
    def _find_last_operator(self, expression: str, operators: str) -> int:
        """
        Finds the position of the last operator from the given set outside any parentheses.
        
        Args:
            expression (str): The expression to search in.
            operators (str): A string containing the operators to look for.
            
        Returns:
            int: The position of the last operator, or -1 if not found.
        """
        parentheses_level = 0
        last_pos = -1
        
        for i, char in enumerate(expression):
            if char == '(':
                parentheses_level += 1
            elif char == ')':
                parentheses_level -= 1
            elif char in operators and parentheses_level == 0:
                last_pos = i
                
        return last_pos
    
    def _is_numeric(self, value: str) -> bool:
        """
        Checks if a string represents a valid number.
        
        Args:
            value (str): The string to check.
            
        Returns:
            bool: True if the string is a valid number, False otherwise.
        """
        try:
            float(value)
            return True
        except ValueError:
            return False


# Example usage:
if __name__ == "__main__":
    calc = Calculator()
    
    # Test cases
    test_expressions = [
        "2 + 3",                  # Basic addition
        "5 - 3",                  # Basic subtraction
        "2 * 3",                  # Basic multiplication
        "6 / 2",                  # Basic division
        "2 + 3 * 4",              # Order of operations
        "(2 + 3) * 4",            # Parentheses
        "((2 + 3) * 4) / 2",      # Nested parentheses
        "-5 + 10",                # Negative numbers
        "2.5 * 3.5",              # Decimal numbers
        "10 / (2 + 3)"            # Complex expression
    ]
    
    for expr in test_expressions:
        try:
            result = calc.calculate(expr)
            print(f"{expr} = {result}")
        except Exception as e:
            print(f"{expr}: Error - {str(e)}")
```

## Design Rationale

The calculator implementation follows these principles:

1. **Object-Oriented Design**: Implemented as a `Calculator` class with a clean public interface.

2. **Recursive Descent Parser**: The expression evaluation uses a recursive descent approach, which respects the order of operations.

3. **Error Handling**: Comprehensive validation for:
   - Invalid characters
   - Unbalanced parentheses
   - Division by zero
   - Syntax errors

4. **Modular Structure**:
   - Public `calculate()` method as the main interface
   - Private helper methods for specific functionality
   - Each method has a single responsibility

5. **Documentation**:
   - Detailed docstrings for all methods
   - Type hints for function parameters and return values
   - Explanatory comments for complex logic

The implementation handles all the required operations (addition, subtraction, multiplication, division) while respecting parentheses and the correct order of operations. It also properly handles edge cases like negative numbers and decimals.