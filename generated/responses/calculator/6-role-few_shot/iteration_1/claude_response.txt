# Arithmetic Calculator Implementation

I'll create a console-based calculator that meets your requirements, with a focus on clean code, maintainability, and proper error handling.

```python
class Calculator:
    """
    A calculator that evaluates arithmetic expressions following standard operator precedence.
    
    Supported operations:
    - Addition (+)
    - Subtraction (-)
    - Multiplication (*)
    - Division (/)
    - Parentheses for grouping expressions
    """

    def __init__(self):
        """Initialize the Calculator instance."""
        # Define allowed characters for validation
        self.allowed_chars = set("0123456789+-*/().eE ")
    
    def calculate(self, expression: str) -> float:
        """
        Evaluates an arithmetic expression and returns the result.
        
        Args:
            expression (str): The arithmetic expression to evaluate.
            
        Returns:
            float: The result of the evaluated expression.
            
        Raises:
            ValueError: For invalid expressions, unbalanced parentheses, or invalid characters.
            ZeroDivisionError: When attempting to divide by zero.
        """
        # Validate and normalize the expression
        normalized_expr = self._normalize_expression(expression)
        
        # Evaluate the expression
        result, end_pos = self._evaluate_expression(normalized_expr, 0)
        
        # Ensure the entire expression was processed
        if end_pos < len(normalized_expr):
            raise ValueError(f"Unexpected character at position {end_pos}: '{normalized_expr[end_pos]}'")
        
        return result
    
    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes the expression by removing spaces and validating characters.
        
        Args:
            expression (str): The arithmetic expression string.
            
        Returns:
            str: The normalized expression.
            
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        # Check for invalid characters
        if not all(char in self.allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in self.allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {', '.join(repr(c) for c in invalid_chars)}")
        
        # Remove spaces from the expression
        return expression.replace(" ", "")
    
    def _is_balanced_parentheses(self, expression: str) -> bool:
        """
        Checks if parentheses in the expression are properly balanced.
        
        Args:
            expression (str): The expression to check.
            
        Returns:
            bool: True if parentheses are balanced, False otherwise.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return not stack
    
    def _evaluate_expression(self, expression: str, start_pos: int) -> tuple[float, int]:
        """
        Recursively evaluates an arithmetic expression.
        
        Args:
            expression (str): The expression to evaluate.
            start_pos (int): The starting position in the expression.
            
        Returns:
            tuple[float, int]: A tuple containing the result and the ending position.
            
        Raises:
            ValueError: For syntax errors or unbalanced parentheses.
            ZeroDivisionError: When dividing by zero.
        """
        # Ensure parentheses are balanced in the entire expression
        if not self._is_balanced_parentheses(expression):
            raise ValueError("Unbalanced parentheses in the expression")
        
        result = 0
        current_number = ""
        operator = "+"
        pos = start_pos
        terms = []
        
        while pos < len(expression):
            char = expression[pos]
            
            # Handle parentheses
            if char == '(':
                # Recursively evaluate the expression inside parentheses
                sub_result, new_pos = self._evaluate_expression(expression, pos + 1)
                
                # Apply the current operator to the result of the sub-expression
                self._apply_operation(terms, operator, sub_result)
                
                pos = new_pos
                operator = "+" if pos >= len(expression) else expression[pos]
            
            # End of a sub-expression in parentheses
            elif char == ')':
                # Process any remaining number
                if current_number:
                    self._apply_operation(terms, operator, float(current_number))
                    current_number = ""
                
                # Calculate the result of the terms list
                result = self._calculate_terms(terms)
                return result, pos + 1
            
            # Handle operators
            elif char in "+-*/":
                # Process the current number before handling the operator
                if current_number:
                    self._apply_operation(terms, operator, float(current_number))
                    current_number = ""
                
                operator = char
            
            # Handle digits and decimal point
            elif char.isdigit() or char == '.' or (char.lower() == 'e' and current_number):
                current_number += char
            
            # Handle unary minus at the start of a number
            elif char == '-' and (pos == 0 or expression[pos-1] in "+-*/("):
                current_number += char
            
            else:
                raise ValueError(f"Unexpected character at position {pos}: '{char}'")
            
            pos += 1
        
        # Process the final number if any
        if current_number:
            self._apply_operation(terms, operator, float(current_number))
        
        # Calculate and return the final result
        result = self._calculate_terms(terms)
        return result, pos
    
    def _apply_operation(self, terms: list, operator: str, value: float) -> None:
        """
        Applies an arithmetic operation and updates the terms list.
        
        Args:
            terms (list): The list of terms to update.
            operator (str): The operator to apply.
            value (float): The value to apply the operator to.
        """
        if operator == '+':
            terms.append(value)
        elif operator == '-':
            terms.append(-value)
        elif operator == '*':
            if terms:
                terms[-1] *= value
            else:
                terms.append(value)
        elif operator == '/':
            if value == 0:
                raise ZeroDivisionError("Division by zero is not allowed")
            if terms:
                terms[-1] /= value
            else:
                terms.append(value)
    
    def _calculate_terms(self, terms: list) -> float:
        """
        Calculates the sum of terms.
        
        Args:
            terms (list): The list of terms to sum.
            
        Returns:
            float: The sum of all terms.
        """
        return sum(terms) if terms else 0


def main():
    """
    Main function to run the calculator interactively.
    """
    calculator = Calculator()
    print("Arithmetic Calculator")
    print("Enter 'q' to quit")
    
    while True:
        expression = input("\nEnter an expression: ")
        if expression.lower() == 'q':
            break
        
        try:
            result = calculator.calculate(expression)
            print(f"Result: {result}")
        except (ValueError, ZeroDivisionError) as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Key Features of This Implementation

1. **Object-Oriented Design**: The calculator is implemented as a class with a clear public interface.

2. **Proper Error Handling**:
   - Validates for invalid characters
   - Checks for balanced parentheses
   - Handles division by zero
   - Provides meaningful error messages

3. **Efficient Algorithm**:
   - Uses a recursive descent parser to handle operator precedence correctly
   - Processes the expression in a single pass

4. **Modularity**:
   - Functions have single responsibilities
   - Clear separation between validation, parsing, and evaluation logic

5. **Security**:
   - Input validation prevents execution of malicious code
   - No use of eval() or similar functions

6. **Readability**:
   - Comprehensive docstrings
   - Clear variable names
   - Logical function organization

The implementation follows the operator precedence rules where multiplication and division have higher precedence than addition and subtraction, and parentheses can change the order of operations.