# Python Calculator Implementation

I'll create a console-based arithmetic calculator that follows all the requirements and best practices you've outlined.

```python
class Calculator:
    """
    A class for evaluating arithmetic expressions with support for basic operations,
    parentheses, and proper operator precedence.
    """

    def __init__(self):
        """Initialize the calculator."""
        self.operators = {'+': 1, '-': 1, '*': 2, '/': 2}
        self.allowed_chars = set("0123456789+-*/() .")

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.

        Args:
            expression (str): The mathematical expression to evaluate.

        Returns:
            float: The result of the evaluation.

        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
            ZeroDivisionError: If the expression involves division by zero.
            SyntaxError: If the expression has invalid syntax.
        """
        # Validate and normalize the expression
        normalized_expr = self._normalize_expression(expression)
        
        # Convert the infix expression to postfix notation
        postfix = self._convert_to_postfix(normalized_expr)
        
        # Evaluate the postfix expression
        result = self._evaluate_postfix(postfix)
        
        return result

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes a mathematical expression by validating characters
        and handling spaces and unary operators.

        Args:
            expression (str): A mathematical expression as a string.

        Returns:
            str: The normalized expression.

        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for invalid characters
        if not all(char in self.allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")

        # Check for balanced parentheses
        if not self._is_balanced(expression):
            raise ValueError("Expression has unbalanced parentheses.")

        # Remove spaces
        expression = expression.replace(" ", "")
        
        # Handle special cases like unary minus
        normalized = []
        for i, char in enumerate(expression):
            if char == '-' and (i == 0 or expression[i-1] in '(+-*/'):
                # This is a unary minus, we'll convert it to a negative number
                normalized.append('0-')
            else:
                normalized.append(char)
                
        return ''.join(normalized)

    def _is_balanced(self, expression: str) -> bool:
        """
        Checks whether a mathematical expression has properly paired parentheses.

        Args:
            expression (str): A string containing the mathematical expression.
            
        Returns:
            bool: True if parentheses are correctly paired, otherwise False.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return not stack

    def _convert_to_postfix(self, infix: str) -> list:
        """
        Converts an infix expression to postfix notation (Reverse Polish Notation).
        
        Args:
            infix (str): The normalized infix expression.
            
        Returns:
            list: The expression in postfix notation as a list of tokens.
            
        Raises:
            SyntaxError: If the expression has invalid syntax.
        """
        output = []
        stack = []
        i = 0
        
        while i < len(infix):
            char = infix[i]
            
            # Case 1: If the character is a digit or decimal point, extract the full number
            if char.isdigit() or char == '.':
                num_start = i
                while i < len(infix) and (infix[i].isdigit() or infix[i] == '.'):
                    i += 1
                    
                num_str = infix[num_start:i]
                try:
                    number = float(num_str)
                    # Convert to int if it's a whole number to make output cleaner
                    if number.is_integer():
                        number = int(number)
                    output.append(number)
                except ValueError:
                    raise SyntaxError(f"Invalid number format: {num_str}")
                
                # We've already incremented i in the while loop
                continue
                
            # Case 2: If the character is an operator
            elif char in self.operators:
                while (stack and stack[-1] != '(' and 
                       self.operators.get(stack[-1], 0) >= self.operators.get(char, 0)):
                    output.append(stack.pop())
                stack.append(char)
                
            # Case 3: If the character is an opening parenthesis
            elif char == '(':
                stack.append(char)
                
            # Case 4: If the character is a closing parenthesis
            elif char == ')':
                while stack and stack[-1] != '(':
                    output.append(stack.pop())
                    
                # Pop the opening parenthesis
                if stack and stack[-1] == '(':
                    stack.pop()
                else:
                    raise SyntaxError("Mismatched parentheses")
            
            # Move to the next character
            i += 1
                
        # Pop any remaining operators from the stack
        while stack:
            if stack[-1] == '(':
                raise SyntaxError("Mismatched parentheses")
            output.append(stack.pop())
            
        return output

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression.
        
        Args:
            postfix (list): The expression in postfix notation.
            
        Returns:
            float: The result of the evaluation.
            
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            SyntaxError: If the expression has invalid syntax.
        """
        stack = []
        
        for token in postfix:
            if isinstance(token, (int, float)):
                stack.append(token)
            else:  # token is an operator
                if len(stack) < 2:
                    raise SyntaxError("Invalid expression syntax")
                
                b = stack.pop()
                a = stack.pop()
                
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero is not allowed")
                    stack.append(a / b)
        
        if len(stack) != 1:
            raise SyntaxError("Invalid expression syntax")
            
        result = stack[0]
        # Convert to int if it's a whole number to make output cleaner
        if isinstance(result, float) and result.is_integer():
            return int(result)
        return result


def main():
    """
    Main function to run the calculator from the command line.
    Allows the user to input expressions and see the results.
    """
    calculator = Calculator()
    
    print("Console Calculator")
    print("Type 'exit' to quit")
    print("Enter expressions like: 2 + 3 * (4 - 1)")
    
    while True:
        expression = input("\nEnter expression: ")
        
        if expression.lower() in ('exit', 'quit'):
            break
            
        try:
            result = calculator.calculate(expression)
            print(f"Result: {result}")
        except Exception as e:
            print(f"Error: {str(e)}")
    
    print("Calculator closed.")


if __name__ == "__main__":
    main()
```

## Design Choices and Features

1. **Architecture**
   - Used a `Calculator` class to encapsulate all functionality
   - Implemented the required `calculate(expression: str) -> float` method
   - Separated concerns into helper methods for normalization, validation, conversion, and evaluation

2. **Algorithm**
   - Used the Shunting Yard algorithm to convert infix expressions to postfix notation (RPN)
   - Evaluated the postfix representation for better operator precedence handling
   - This approach is efficient with O(n) time complexity

3. **Error Handling**
   - Validated expressions for:
     - Invalid characters
     - Unbalanced parentheses
     - Syntax errors
     - Division by zero
   - Used appropriate built-in error types

4. **Special Features**
   - Supports negative numbers
   - Handles unary minus operators (e.g., -5 or -(3+2))
   - Converts whole number results to integers for clean output
   - Properly handles decimal values

5. **Code Quality**
   - Used comprehensive docstrings
   - Followed naming conventions
   - Clean, modular design
   - Added a user-friendly command-line interface for testing

The solution handles all required operations (+, -, *, /), supports parentheses with proper precedence, and works with both integers and floating-point numbers including negative values.