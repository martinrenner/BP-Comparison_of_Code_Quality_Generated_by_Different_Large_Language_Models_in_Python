```python
import re


class Calculator:
    """
    A console-based arithmetic calculator that evaluates expressions with
    addition, subtraction, multiplication, division, and parentheses.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression.

        Args:
            expression (str): The mathematical expression to evaluate.

        Returns:
            float: The result of the evaluation.

        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
        """
        normalized_expression = self._normalize_expression(expression)
        self._validate_parentheses(normalized_expression)
        return self._evaluate(normalized_expression)

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes the expression by removing spaces and validating characters.

        Args:
            expression (str): The expression to normalize.

        Returns:
            str: The normalized expression.

        Raises:
            ValueError: If the expression contains invalid characters.
        """
        allowed_chars = set("0123456789+-*/().")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")

        return expression.replace(" ", "")

    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses in the expression are balanced.

        Args:
            expression (str): The expression to validate.

        Raises:
            ValueError: If parentheses are unbalanced.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses (extra closing parenthesis).")
                stack.pop()
        if stack:
            raise ValueError("Unbalanced parentheses (missing closing parenthesis).")

    def _evaluate(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression.

        Args:
            expression: The normalized expression string.

        Returns:
            float: The result of the expression.

        Raises:
            ValueError: If the expression is malformed or results in division by zero.
        """
        try:
            tokens = self._tokenize(expression)
            postfix_tokens = self._infix_to_postfix(tokens)
            result = self._evaluate_postfix(postfix_tokens)
            return result
        except ZeroDivisionError:
            raise ValueError("Division by zero error.")
        except Exception as e:
            raise ValueError(f"Invalid expression: {e}")

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into numbers, operators, and parentheses.

        Args:
            expression: The normalized expression string.

        Returns:
           list: list of tokens
        """

        return re.findall(r"(\d+\.?\d*|[\+\-\*/\(\)])", expression)


    def _infix_to_postfix(self, tokens: list) -> list:
        """
        Converts an infix expression (list of tokens) to postfix notation.

        Args:
            tokens (list): A list of tokens representing the infix expression.

        Returns:
            list: A list of tokens representing the postfix expression.
        """
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []

        for token in tokens:
            if re.match(r"\d+\.?\d*", token):  # Check if it's a number (integer or float)
                output.append(float(token))  # Convert to float and append
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                operator_stack.pop()  # Pop the '('
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)

        while operator_stack:
            output.append(operator_stack.pop())

        return output

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.

        Args:
            tokens (list): A list of tokens representing the postfix expression.

        Returns:
            float: The result of the evaluation.

        Raises:
            ValueError:  If division by 0 is encountered.
        """

        operand_stack = []

        for token in tokens:
            if isinstance(token, float): # Check if its a number
                operand_stack.append(token)
            else:
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()

                    if token == '+':
                        operand_stack.append(operand1 + operand2)
                    elif token == '-':
                        operand_stack.append(operand1 - operand2)
                    elif token == '*':
                        operand_stack.append(operand1 * operand2)
                    elif token == '/':
                        if operand2 == 0:
                            raise ZeroDivisionError("Division by zero")
                        operand_stack.append(operand1 / operand2)
                except IndexError:
                    raise ValueError("Malformed expression.")

        return operand_stack.pop()




def main():
    """
    Main function to run the calculator in a loop.
    """
    calculator = Calculator()

    while True:
        expression = input("Enter a mathematical expression (or 'quit' to exit): ")
        if expression.lower() == 'quit':
            break

        try:
            result = calculator.calculate(expression)
            print(f"Result: {result}")
        except ValueError as e:
            print(f"Error: {e}")


if __name__ == "__main__":
    main()

```
