# Python Console-based Arithmetic Calculator

I'll create a calculator that follows the requirements and best practices provided. Let's implement it using object-oriented programming with a focus on maintainability, correctness, and efficiency.

```python
"""
Console-based Arithmetic Calculator

This module provides a calculator that can evaluate arithmetic expressions
with proper operator precedence and support for parentheses.
"""
from typing import List, Tuple, Union
import re


class Calculator:
    """
    A calculator that evaluates arithmetic expressions using OOP principles.
    
    This class implements a calculator that handles addition, subtraction,
    multiplication, division, and supports parentheses with proper precedence.
    """

    def __init__(self):
        """Initialize the Calculator with supported operators and their precedence."""
        # Define operators and their precedence levels
        self.operators = {
            '+': 1,  # Lower precedence
            '-': 1,
            '*': 2,  # Higher precedence
            '/': 2
        }
        
    def calculate(self, expression: str) -> float:
        """
        Evaluate an arithmetic expression and return the result.
        
        Args:
            expression (str): A string containing a valid arithmetic expression
                              with numbers, operators (+, -, *, /), and parentheses.
        
        Returns:
            float: The result of the evaluated expression.
            
        Raises:
            ValueError: If the expression contains invalid characters or syntax.
            ZeroDivisionError: If the expression attempts to divide by zero.
            SyntaxError: If the expression has unbalanced parentheses.
        """
        # Normalize and validate the expression
        cleaned_expr = self._normalize_expression(expression)
        
        # Check for balanced parentheses
        if not self._is_balanced_parentheses(cleaned_expr):
            raise SyntaxError("Unbalanced parentheses in the expression.")
            
        # Parse and evaluate the expression
        return self._evaluate_expression(cleaned_expr)
    
    def _normalize_expression(self, expression: str) -> str:
        """
        Normalize an expression by removing whitespace and validating characters.
        
        Args:
            expression (str): The input arithmetic expression.
            
        Returns:
            str: The normalized expression.
            
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        # Remove all whitespace
        cleaned_expr = expression.replace(" ", "")
        
        # Check for valid characters
        allowed_pattern = r'^[0-9\+\-\*\/\(\)\.\s]*$'
        if not re.match(allowed_pattern, cleaned_expr):
            raise ValueError("Expression contains invalid characters.")
            
        return cleaned_expr
    
    def _is_balanced_parentheses(self, expression: str) -> bool:
        """
        Check if parentheses in the expression are properly balanced.
        
        Args:
            expression (str): The normalized arithmetic expression.
            
        Returns:
            bool: True if parentheses are properly balanced, False otherwise.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return len(stack) == 0
    
    def _tokenize(self, expression: str) -> List[str]:
        """
        Convert an expression string into a list of tokens (numbers and operators).
        
        Args:
            expression (str): The normalized arithmetic expression.
            
        Returns:
            List[str]: A list of tokens from the expression.
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]
            
            if char in self.operators or char in '()':
                tokens.append(char)
                i += 1
            elif char.isdigit() or char == '.':
                # Extract the full number (handles multi-digit and decimals)
                j = i
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    j += 1
                tokens.append(expression[i:j])
                i = j
            else:
                i += 1
                
        return tokens

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluate the arithmetic expression using the shunting yard algorithm.
        
        Args:
            expression (str): The normalized arithmetic expression.
            
        Returns:
            float: The result of the evaluation.
            
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is malformed.
        """
        # Handle unary minus at the beginning of expression or after an open parenthesis
        expression = self._handle_unary_operators(expression)
        
        # Convert infix notation to postfix (Reverse Polish Notation)
        postfix = self._infix_to_postfix(expression)
        
        # Evaluate the postfix expression
        return self._evaluate_postfix(postfix)
    
    def _handle_unary_operators(self, expression: str) -> str:
        """
        Handle unary operators (particularly the minus sign) by converting them
        to a format that can be processed by the standard algorithm.
        
        Args:
            expression (str): The normalized arithmetic expression.
            
        Returns:
            str: Expression with unary operators properly formatted.
        """
        # Replace cases like "(-" with "(0-" and initial "-" with "0-"
        expression = re.sub(r'^\-', '0-', expression)
        expression = re.sub(r'\(\-', '(0-', expression)
        
        return expression
    
    def _infix_to_postfix(self, expression: str) -> List[str]:
        """
        Convert an infix expression to postfix notation using the shunting yard algorithm.
        
        Args:
            expression (str): The normalized arithmetic expression.
            
        Returns:
            List[str]: The expression in postfix notation.
        """
        tokens = self._tokenize(expression)
        output_queue = []
        operator_stack = []
        
        for token in tokens:
            if token in self.operators:
                # Process operators according to precedence
                while (operator_stack and operator_stack[-1] != '(' and
                       self.operators.get(operator_stack[-1], 0) >= self.operators.get(token, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                # Process everything until the matching open parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                    
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Remove the open parenthesis
                else:
                    raise ValueError("Mismatched parentheses in expression")
            else:
                # Token is a number
                output_queue.append(token)
                
        # Process any remaining operators
        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Mismatched parentheses in expression")
            output_queue.append(operator_stack.pop())
            
        return output_queue
    
    def _evaluate_postfix(self, postfix: List[str]) -> float:
        """
        Evaluate a postfix expression.
        
        Args:
            postfix (List[str]): The expression in postfix notation.
            
        Returns:
            float: The result of the evaluation.
            
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is malformed.
        """
        stack = []
        
        for token in postfix:
            if token in self.operators:
                if len(stack) < 2:
                    raise ValueError("Invalid expression format")
                
                # Get the operands in the correct order
                b = stack.pop()
                a = stack.pop()
                
                # Perform the operation
                if token == '+':
                    stack.append(a + b)
                elif token == '-':
                    stack.append(a - b)
                elif token == '*':
                    stack.append(a * b)
                elif token == '/':
                    if b == 0:
                        raise ZeroDivisionError("Division by zero is not allowed")
                    stack.append(a / b)
            else:
                # Convert token to a number (float or int)
                try:
                    if '.' in token:
                        stack.append(float(token))
                    else:
                        stack.append(int(token))
                except ValueError:
                    raise ValueError(f"Invalid number format: {token}")
        
        if len(stack) != 1:
            raise ValueError("Invalid expression format")
            
        return stack[0]


def main():
    """Main function to run the calculator interactively."""
    calculator = Calculator()
    
    print("Console-based Arithmetic Calculator")
    print("Type 'exit' to quit")
    
    while True:
        try:
            expression = input("\nEnter an arithmetic expression: ")
            
            if expression.lower() == 'exit':
                break
                
            result = calculator.calculate(expression)
            print(f"Result: {result}")
            
        except Exception as e:
            print(f"Error: {e}")
    
    print("Calculator closed.")


if __name__ == "__main__":
    main()
```

This implementation features:

1. **Object-Oriented Design**: Uses a `Calculator` class with proper encapsulation.
2. **Efficient Algorithm**: Implements the Shunting Yard algorithm to convert infix notation to postfix and evaluates expressions with correct operator precedence.
3. **Robust Error Handling**: Includes validation for parentheses balance, invalid characters, and division by zero.
4. **Thorough Documentation**: Every function has comprehensive docstrings explaining purpose, parameters, returns, and exceptions.
5. **Clean Code**: Follows Python naming conventions and keeps functions focused on single responsibilities.
6. **Security**: Validates input without using `eval()` or similar unsafe functions.

The calculator supports:
- All required operations: addition, subtraction, multiplication, and division
- Proper handling of parentheses
- Correct operator precedence
- Both integers and floating-point numbers (including negative values)
- Robust error detection and reporting