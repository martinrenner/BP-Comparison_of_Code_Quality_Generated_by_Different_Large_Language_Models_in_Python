```python
class Calculator:
    """
    A console-based arithmetic calculator supporting addition, subtraction,
    multiplication, division, and parentheses with correct operator precedence.
    
    Methods:
        calculate(expression: str) -> float:
            Evaluates the arithmetic expression and returns the result as a float.
    """

    def calculate(self, expression: str) -> float:
        """
        Evaluates an arithmetic expression and returns the result.
        
        The expression may include integers, floating-point numbers (including negatives),
        the operators +, -, *, /, and parentheses for controlling evaluation order.
        
        Args:
            expression (str): The arithmetic expression to evaluate.
            
        Returns:
            float: The calculated result.
        
        Raises:
            ValueError: If the expression contains invalid characters, unbalanced
                        parentheses, or has invalid syntax.
            ZeroDivisionError: If division by zero occurs.
        """
        # Normalize the expression (remove spaces and check allowed characters)
        normalized_expr = self._normalize_expression(expression)
        if not self._is_balanced(normalized_expr):
            raise ValueError("The expression has unbalanced parentheses.")

        # Initialize parser state
        self._expression = normalized_expr
        self._index = 0

        result = self._parse_expression()

        # After parsing, we should have consumed the entire expression.
        if self._index != len(self._expression):
            raise ValueError("Invalid expression syntax.")
        return result

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes a mathematical expression by removing spaces and validating characters.
        
        Args:
            expression (str): The input arithmetic expression.
        
        Returns:
            str: The normalized expression with no spaces.
        
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        allowed_chars = set("0123456789+-*/(). ")
        if not all(char in allowed_chars for char in expression):
            raise ValueError("Expression contains invalid characters.")
        return expression.replace(" ", "")

    def _is_balanced(self, expression: str) -> bool:
        """
        Checks whether the expression has properly paired parentheses.
        
        Args:
            expression (str): The arithmetic expression.
        
        Returns:
            bool: True if parentheses are correctly paired, False otherwise.
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    return False
                stack.pop()
        return not stack

    def _parse_expression(self) -> float:
        """
        Parses and evaluates an expression following the grammar:
            expression = term { ("+" | "-") term }
        
        Returns:
            float: The computed value of the expression.
        """
        value = self._parse_term()
        while self._index < len(self._expression) and self._expression[self._index] in '+-':
            operator = self._expression[self._index]
            self._index += 1
            next_term = self._parse_term()
            if operator == '+':
                value += next_term
            else:  # operator == '-'
                value -= next_term
        return value

    def _parse_term(self) -> float:
        """
        Parses and evaluates a term following the grammar:
            term = factor { ("*" | "/") factor }
        
        Returns:
            float: The computed value of the term.
        """
        value = self._parse_factor()
        while self._index < len(self._expression) and self._expression[self._index] in '*/':
            operator = self._expression[self._index]
            self._index += 1
            next_factor = self._parse_factor()
            if operator == '*':
                value *= next_factor
            else:
                if next_factor == 0:
                    raise ZeroDivisionError("Division by zero.")
                value /= next_factor
        return value

    def _parse_factor(self) -> float:
        """
        Parses and evaluates a factor following the grammar:
            factor = ["+" | "-"] factor | number | "(" expression ")"
        
        Handles unary plus/minus, numbers, and parenthesized expressions.
        
        Returns:
            float: The computed value of the factor.
        """
        # Process any unary plus or minus operators
        sign = 1
        while self._index < len(self._expression) and self._expression[self._index] in '+-':
            if self._expression[self._index] == '-':
                sign *= -1
            self._index += 1

        # Parenthesized expression
        if self._index < len(self._expression) and self._expression[self._index] == '(':
            self._index += 1  # consume the '('
            value = self._parse_expression()
            if self._index >= len(self._expression) or self._expression[self._index] != ')':
                raise ValueError("Mismatched parentheses in expression.")
            self._index += 1  # consume the ')'
            return sign * value

        # Parse number (integer or float)
        return sign * self._parse_number()

    def _parse_number(self) -> float:
        """
        Parses a number (integer or floating-point) from the expression.
        
        Returns:
            float: The parsed numeric value.
        
        Raises:
            ValueError: If no valid number can be parsed.
        """
        start_index = self._index
        has_decimal_point = False
        while self._index < len(self._expression):
            char = self._expression[self._index]
            if char.isdigit():
                self._index += 1
            elif char == '.':
                if has_decimal_point:
                    break  # Second decimal point encountered; stop parsing the number.
                has_decimal_point = True
                self._index += 1
            else:
                break

        if start_index == self._index:
            raise ValueError("Invalid syntax: expected a number.")
        
        number_str = self._expression[start_index:self._index]
        try:
            return float(number_str)
        except ValueError:
            raise ValueError(f"Invalid number format: {number_str}")

        
if __name__ == '__main__':
    calc = Calculator()
    print("Simple Arithmetic Calculator")
    print("Enter an arithmetic expression to evaluate or type 'exit' to quit.")
    
    while True:
        user_input = input(">> ")
        if user_input.strip().lower() == 'exit':
            break
        try:
            result = calc.calculate(user_input)
            print("Result:", result)
        except Exception as e:
            print("Error:", e)
```