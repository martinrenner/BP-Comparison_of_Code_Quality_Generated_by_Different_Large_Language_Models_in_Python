# Python Console-Based Todo List Application

I'll create a clean, efficient, and maintainable todo list application following ISO/IEC 25010 quality standards and the specified requirements.

```python
#!/usr/bin/env python3
"""
Todo List Application

A console-based task management system that allows users to add, remove,
search, finish, and manage tasks efficiently.

This implementation follows ISO/IEC 25010 quality standards focusing on:
- Functional suitability
- Performance efficiency
- Compatibility
- Usability
- Reliability
- Security
- Maintainability
- Portability
"""

import time
from typing import Dict, List, Optional, Tuple, Union


class TaskManager:
    """
    Manages a collection of tasks with operations for adding, removing,
    searching, completing, and retrieving tasks.
    
    Implements an efficient in-memory storage solution with O(1) lookups
    for task retrieval by ID and optimized search capabilities.
    """
    
    def __init__(self):
        """
        Initialize the TaskManager with empty task storage and a counter for IDs.
        """
        self._tasks: Dict[int, Dict] = {}  # Main storage: {id: task_dict}
        self._next_id: int = 1  # Auto-incrementing ID for new tasks
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name: The name/title of the task
            task_description: A detailed description of the task
            
        Returns:
            int: The unique ID assigned to the new task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Input validation
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string")
        
        # Create task with unique ID
        task_id = self._next_id
        self._next_id += 1
        
        # Store task in dictionary
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False,
            'created_at': time.time()
        }
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The unique identifier of the task to remove
            
        Returns:
            bool: True if task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists and remove it
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term: Search term to look for in task names and descriptions
            
        Returns:
            list: A list of task dictionaries matching the search criteria
            
        Raises:
            ValueError: If task_term is empty
        """
        # Input validation
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
        
        # Case-insensitive search
        term = task_term.lower()
        results = []
        
        for task in self._tasks.values():
            if (term in task['task_name'].lower() or 
                term in task['task_description'].lower()):
                results.append(task.copy())
                
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id: The unique identifier of the task to mark as done
            
        Returns:
            bool: True if task was successfully marked as done, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists and update its status
        if task_id in self._tasks:
            # Only set to True if not already finished
            if not self._tasks[task_id]['is_finished']:
                self._tasks[task_id]['is_finished'] = True
                self._tasks[task_id]['completed_at'] = time.time()
            return True
        return False
    
    def get_all(self) -> List[Dict]:
        """
        Get all tasks in the system.
        
        Returns:
            list: A list of all task dictionaries
        """
        # Return a copy of tasks to prevent accidental modification
        return [task.copy() for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the system.
        
        Returns:
            bool: True if all tasks were successfully removed
        """
        self._tasks.clear()
        return True
    
    def get_task(self, task_id: int) -> Optional[Dict]:
        """
        Get a specific task by ID.
        
        Args:
            task_id: The unique identifier of the task to retrieve
            
        Returns:
            dict: The task dictionary if found, None otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Return a copy of the task if it exists
        if task_id in self._tasks:
            return self._tasks[task_id].copy()
        return None
    
    def get_stats(self) -> Dict:
        """
        Get statistics about tasks.
        
        Returns:
            dict: Statistics including total, completed, and pending tasks
        """
        total = len(self._tasks)
        completed = sum(1 for task in self._tasks.values() if task['is_finished'])
        
        return {
            'total': total,
            'completed': completed,
            'pending': total - completed
        }


def main():
    """
    Main function to demonstrate TaskManager functionality.
    """
    task_manager = TaskManager()
    
    # Add some sample tasks
    task1 = task_manager.add("Complete project", "Finish the Python todo list project")
    task2 = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
    task3 = task_manager.add("Call dentist", "Schedule a check-up appointment")
    
    print("All tasks:")
    for task in task_manager.get_all():
        status = "✓" if task['is_finished'] else "○"
        print(f"{task['id']}. [{status}] {task['task_name']}: {task['task_description']}")
    
    # Mark a task as completed
    task_manager.finish(task2)
    
    # Search for tasks
    print("\nSearch results for 'appointment':")
    for task in task_manager.search("appointment"):
        status = "✓" if task['is_finished'] else "○"
        print(f"{task['id']}. [{status}] {task['task_name']}: {task['task_description']}")
    
    # Remove a task
    task_manager.remove(task1)
    
    print("\nRemaining tasks:")
    for task in task_manager.get_all():
        status = "✓" if task['is_finished'] else "○"
        print(f"{task['id']}. [{status}] {task['task_name']}: {task['task_description']}")
    
    # Get statistics
    stats = task_manager.get_stats()
    print(f"\nTask Statistics: Total: {stats['total']}, Completed: {stats['completed']}, Pending: {stats['pending']}")


if __name__ == "__main__":
    main()
```

## Key Features of the Implementation

1. **Clean Object-Oriented Design**: Using a class with well-defined methods
2. **Efficient Data Structures**: Using dictionaries for O(1) lookups by ID
3. **Comprehensive Error Handling**: Input validation with specific error messages
4. **Defensive Programming**: Returning copies of data to prevent accidental modification
5. **Proper Typing**: Type hints throughout the code for better IDE support and documentation
6. **Well-documented**: Thorough docstrings and comments
7. **Extra Features**:
   - Task timestamps (created_at, completed_at)
   - Statistics functionality (get_stats)
   - Direct task retrieval (get_task)
   - Sample demonstration in the main function

The implementation meets all the specified requirements while being maintainable, secure, and efficient.