# Python Todo List Application

I'll create a comprehensive todo list application designed according to ISO/IEC 25010 quality standards. The solution implements all requested functionality using OOP principles with a focus on efficiency, error handling, and code quality.

```python
"""
Todo List Application

A console-based task management system implementing ISO/IEC 25010 quality standards.
"""
from typing import List, Dict, Union, Optional
import time


class TaskManager:
    """
    Manages a collection of tasks with operations for adding, removing,
    searching, and tracking task completion status.
    """

    def __init__(self):
        """Initialize the TaskManager with an empty task collection and counter."""
        self._tasks = {}  # Using dict for O(1) lookups by ID
        self._id_counter = 1  # Auto-incrementing ID

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the collection.

        Args:
            task_name: The name of the task (must not be empty)
            task_description: The description of the task

        Returns:
            int: The unique ID of the newly created task

        Raises:
            ValueError: If task_name is empty or None
        """
        # Input validation
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        
        if not isinstance(task_description, str):
            raise ValueError("Task description must be a string")
            
        # Create task with unique ID
        task_id = self._id_counter
        self._tasks[task_id] = {
            'id': task_id,
            'name': task_name,
            'description': task_description,
            'is_finished': False,
            'created_at': time.time()
        }
        
        # Increment ID counter for next task
        self._id_counter += 1
        
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.

        Args:
            task_id: The unique ID of the task to remove

        Returns:
            bool: True if the task was removed successfully, False otherwise

        Raises:
            ValueError: If task_id is not a positive integer
            KeyError: If no task exists with the given ID
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check task existence
        if task_id not in self._tasks:
            raise KeyError(f"Task with ID {task_id} does not exist")
            
        # Remove task
        del self._tasks[task_id]
        return True

    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.

        Args:
            task_term: The search term to look for in task names and descriptions

        Returns:
            List[Dict]: A list of tasks (as dictionaries) that match the search term

        Raises:
            ValueError: If task_term is empty or None
        """
        # Input validation
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
            
        # Perform search
        results = []
        term_lower = task_term.lower()
        
        for task in self._tasks.values():
            if (term_lower in task['name'].lower() or 
                term_lower in task['description'].lower()):
                results.append(self._format_task_output(task))
                
        return results

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.

        Args:
            task_id: The unique ID of the task to mark as completed

        Returns:
            bool: True if the task was marked as completed successfully, False otherwise

        Raises:
            ValueError: If task_id is not a positive integer
            KeyError: If no task exists with the given ID
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check task existence
        if task_id not in self._tasks:
            raise KeyError(f"Task with ID {task_id} does not exist")
            
        # Mark task as finished
        self._tasks[task_id]['is_finished'] = True
        return True

    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks.

        Returns:
            List[Dict]: A list of all tasks (as dictionaries)
        """
        return [self._format_task_output(task) for task in self._tasks.values()]

    def clear_all(self) -> bool:
        """
        Delete all tasks.

        Returns:
            bool: True if all tasks were deleted successfully
        """
        self._tasks = {}
        return True
    
    def _format_task_output(self, task: Dict) -> Dict:
        """
        Format a task for output according to the required format.
        
        Args:
            task: The task dictionary to format
            
        Returns:
            Dict: A formatted task dictionary with only the required fields
        """
        return {
            'id': task['id'],
            'task_name': task['name'],
            'task_description': task['description'],
            'is_finished': task['is_finished']
        }


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    """
    task_manager = TaskManager()
    
    # Demo adding tasks
    print("Adding tasks...")
    task1_id = task_manager.add("Complete project", "Finish the Python todo list project")
    task2_id = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
    task3_id = task_manager.add("Exercise", "Go for a 30-minute run")
    print(f"Tasks added with IDs: {task1_id}, {task2_id}, {task3_id}\n")
    
    # Demo getting all tasks
    print("All tasks:")
    all_tasks = task_manager.get_all()
    for task in all_tasks:
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Completed: {task['is_finished']}")
    print()
    
    # Demo finishing a task
    print(f"Marking task {task1_id} as finished...")
    task_manager.finish(task1_id)
    print("Task marked as finished\n")
    
    # Demo searching for tasks
    search_term = "pro"
    print(f"Searching for tasks with term '{search_term}':")
    search_results = task_manager.search(search_term)
    for task in search_results:
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Description: {task['task_description']}")
    print()
    
    # Demo removing a task
    print(f"Removing task {task2_id}...")
    task_manager.remove(task2_id)
    print("Task removed\n")
    
    # Show remaining tasks
    print("Remaining tasks:")
    remaining_tasks = task_manager.get_all()
    for task in remaining_tasks:
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Completed: {task['is_finished']}")
    print()
    
    # Demo clearing all tasks
    print("Clearing all tasks...")
    task_manager.clear_all()
    print(f"Tasks after clearing: {len(task_manager.get_all())}")


if __name__ == "__main__":
    main()
```

## Key Features of the Implementation:

1. **Data Structure**: Uses a dictionary for O(1) task lookups by ID

2. **Security & Validation**: 
   - Comprehensive input validation for all methods
   - Protection against invalid inputs (empty strings, invalid IDs)
   - Custom error messages for different error conditions

3. **Performance Optimization**:
   - Efficient lookups with dictionary-based storage
   - Minimal memory footprint
   - Search optimization using lowercase comparison

4. **Code Quality**:
   - Complete docstrings for all methods
   - Type hints for improved maintainability
   - Consistent formatting and naming conventions
   - Clear separation of concerns
   - Private helper method for output formatting

5. **Usability**:
   - Simple and consistent interface
   - Standardized error handling
   - Demo function to showcase functionality

6. **ISO/IEC 25010 Alignment**:
   - Functionality: Implements all required features
   - Reliability: Robust error handling
   - Usability: Intuitive interface
   - Efficiency: Optimized data structures
   - Maintainability: Clean code with documentation
   - Security: Input validation and error checking

The implementation is extensible and could easily be adapted for persistent storage by modifying the internal data structures.