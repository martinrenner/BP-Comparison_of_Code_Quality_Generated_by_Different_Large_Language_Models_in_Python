```python
"""
Console-based Todo List App that meets ISO/IEC 25010 requirements.
This module implements a TaskManager class that supports adding, removing,
searching, finishing, retrieving, and clearing tasks stored in an in-memory data structure.
Each task is represented as a dictionary with the following format:
    { "id": int, "task_name": str, "task_description": str, "is_finished": bool }
"""

from typing import List, Dict


class TaskManager:
    """
    TaskManager class to manage todo tasks using an in-memory dictionary.
    Each task is stored with a unique ID for efficient lookups, insertions, and deletions.
    """

    def __init__(self) -> None:
        """
        Initializes the task manager with an empty tasks dictionary and a counter for unique IDs.
        """
        self.tasks: Dict[int, Dict] = {}
        self.next_id: int = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with a given name and description.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): The detailed description of the task.
        
        Returns:
            int: Unique ID assigned to the added task.

        Raises:
            ValueError: If either task_name or task_description is an empty string.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        # Generate a unique task ID.
        task_id = self.next_id
        self.next_id += 1

        # Create a new task and store it.
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes the task with the specified ID.
        
        Args:
            task_id (int): The unique ID of the task to remove.
        
        Returns:
            bool: True if the task was successfully removed, False if the task does not exist.
        
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        else:
            return False

    def search(self, task_term: str) -> List[Dict]:
        """
        Searches for tasks by matching the term within the task's name or description.
        The search is case insensitive.
        
        Args:
            task_term (str): The search term to find in tasks.
        
        Returns:
            List[Dict]: A list of tasks (as dictionaries) that match the search criteria.
        
        Raises:
            ValueError: If the search term is an empty string.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.lower()
        results = []
        for task in self.tasks.values():
            if (term_lower in task["task_name"].lower() or 
                term_lower in task["task_description"].lower()):
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to mark as finished.
        
        Returns:
            bool: True if the task status was updated successfully, False if the task does not exist.
        
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        else:
            return False

    def get_all(self) -> List[Dict]:
        """
        Retrieves all tasks with their details.
        
        Returns:
            List[Dict]: A list of all tasks stored in the application.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Deletes all tasks from the task manager.
        
        Returns:
            bool: True after successfully clearing all tasks.
        """
        self.tasks.clear()
        return True


def print_task(task: Dict) -> None:
    """
    Utility function to print a single task in a readable format.
    
    Args:
        task (Dict): The task dictionary.
    """
    status = "Finished" if task["is_finished"] else "Pending"
    print(f'ID: {task["id"]} | Name: {task["task_name"]} | Description: {task["task_description"]} | Status: {status}')


def main() -> None:
    """
    Main function that drives the console-based todo list app.
    Provides a menu for user interactions.
    """
    manager = TaskManager()
    menu = (
        "\nTodo List App Menu:\n"
        "1. Add Task\n"
        "2. Remove Task\n"
        "3. Search Tasks\n"
        "4. Mark Task as Finished\n"
        "5. Get All Tasks\n"
        "6. Clear All Tasks\n"
        "7. Exit\n"
        "Enter your choice (1-7): "
    )
    
    while True:
        choice = input(menu).strip()
        try:
            if choice == "1":
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                task_id = manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {task_id}")

            elif choice == "2":
                task_id = int(input("Enter task ID to remove: ").strip())
                if manager.remove(task_id):
                    print("Task removed successfully.")
                else:
                    print("Task not found. No removal performed.")

            elif choice == "3":
                search_term = input("Enter search term: ").strip()
                results = manager.search(search_term)
                if results:
                    print("Search results:")
                    for task in results:
                        print_task(task)
                else:
                    print("No matching tasks found.")

            elif choice == "4":
                task_id = int(input("Enter task ID to mark as finished: ").strip())
                if manager.finish(task_id):
                    print("Task marked as finished.")
                else:
                    print("Task not found. Unable to update.")

            elif choice == "5":
                tasks = manager.get_all()
                if tasks:
                    print("All tasks:")
                    for task in tasks:
                        print_task(task)
                else:
                    print("No tasks available.")

            elif choice == "6":
                confirmation = input("Are you sure you want to clear all tasks? (y/n): ").lower().strip()
                if confirmation == "y":
                    manager.clear_all()
                    print("All tasks have been cleared.")
                else:
                    print("Clear operation cancelled.")

            elif choice == "7":
                print("Exiting the Todo List App. Goodbye!")
                break

            else:
                print("Invalid choice. Please enter a number between 1 and 7.")

        except ValueError as ve:
            print(f"Input error: {ve}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
```