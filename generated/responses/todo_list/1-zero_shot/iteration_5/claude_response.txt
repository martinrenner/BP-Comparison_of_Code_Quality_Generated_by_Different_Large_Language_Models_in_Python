# Todo List Application

I'll create a console-based todo list application that adheres to ISO/IEC 25010 standards, focusing on functionality, maintainability, performance, and security.

```python
"""
Todo List Application

A console-based todo list manager that allows users to add, remove, search, 
and manage tasks efficiently.
"""
from typing import List, Dict, Optional, Union, Any
import uuid


class TaskManager:
    """
    Manages todo tasks with capabilities for adding, removing, searching,
    and marking tasks as complete.
    
    Implements efficient data structures for task storage and retrieval.
    """
    
    def __init__(self):
        """Initialize the TaskManager with empty task storage."""
        self._tasks = {}  # Dictionary for O(1) lookups by ID
        self._next_id = 1  # Simple auto-incrementing ID
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
        
        Args:
            task_name: The name/title of the task
            task_description: Detailed description of the task
            
        Returns:
            int: The unique ID of the newly created task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
            
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty")
        
        # Create task with unique ID
        task_id = self._next_id
        self._next_id += 1
        
        # Store task with all required attributes
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name.strip(),
            'task_description': task_description.strip(),
            'is_finished': False
        }
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The unique identifier of the task
            
        Returns:
            bool: True if removal was successful, False otherwise
            
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate task ID
        self._validate_task_id(task_id)
        
        # Remove the task
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        
        return False
    
    def search(self, task_term: str) -> List[Dict[str, Any]]:
        """
        Search for tasks containing the given term in name or description.
        
        Args:
            task_term: The search term to look for
            
        Returns:
            list[dict]: A list of tasks matching the search criteria
            
        Raises:
            ValueError: If task_term is empty
        """
        # Validate search term
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty")
        
        task_term = task_term.lower().strip()
        matching_tasks = []
        
        # Perform case-insensitive search in task names and descriptions
        for task in self._tasks.values():
            if (task_term in task['task_name'].lower() or 
                task_term in task['task_description'].lower()):
                matching_tasks.append(task.copy())
                
        return matching_tasks
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id: The unique identifier of the task
            
        Returns:
            bool: True if the task was marked as completed, False otherwise
            
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate task ID
        self._validate_task_id(task_id)
        
        # Mark task as completed
        if task_id in self._tasks:
            # If task is already finished, return False to indicate no change
            if self._tasks[task_id]['is_finished']:
                return False
                
            self._tasks[task_id]['is_finished'] = True
            return True
            
        return False
    
    def get_all(self) -> List[Dict[str, Any]]:
        """
        Retrieve all tasks.
        
        Returns:
            list[dict]: A list of all tasks with their details
        """
        # Return a copy of all tasks to prevent direct modification
        return [task.copy() for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Delete all tasks.
        
        Returns:
            bool: True if tasks were cleared, False if no tasks existed
        """
        if not self._tasks:
            return False
            
        self._tasks.clear()
        return True
    
    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
        
        Args:
            task_id: The ID to validate
            
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
            
        # Validate ID is positive
        if task_id <= 0:
            raise ValueError("Task ID must be positive")
            
        # Validate task exists
        if task_id not in self._tasks:
            raise KeyError(f"No task found with ID: {task_id}")


# Example usage
def main():
    """
    Demonstrate the functionality of the TaskManager.
    """
    task_manager = TaskManager()
    
    # Adding tasks
    try:
        task1 = task_manager.add("Complete project", "Finish the Python project by Friday")
        task2 = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
        task3 = task_manager.add("Call Jim", "Discuss the upcoming meeting")
        
        print(f"Added tasks with IDs: {task1}, {task2}, {task3}")
    except ValueError as e:
        print(f"Error adding task: {e}")
    
    # Display all tasks
    print("\nAll Tasks:")
    for task in task_manager.get_all():
        status = "Completed" if task['is_finished'] else "Pending"
        print(f"ID: {task['id']} - {task['task_name']} [{status}]")
        print(f"Description: {task['task_description']}")
        print("-" * 30)
    
    # Search for tasks
    try:
        search_results = task_manager.search("project")
        print("\nSearch Results for 'project':")
        for task in search_results:
            print(f"ID: {task['id']} - {task['task_name']}")
    except ValueError as e:
        print(f"Search error: {e}")
    
    # Mark a task as completed
    try:
        if task_manager.finish(task1):
            print(f"\nMarked task {task1} as completed")
    except (ValueError, KeyError) as e:
        print(f"Error finishing task: {e}")
    
    # Remove a task
    try:
        if task_manager.remove(task2):
            print(f"Removed task {task2}")
    except (ValueError, KeyError) as e:
        print(f"Error removing task: {e}")
    
    # Display all tasks again
    print("\nUpdated Tasks:")
    for task in task_manager.get_all():
        status = "Completed" if task['is_finished'] else "Pending"
        print(f"ID: {task['id']} - {task['task_name']} [{status}]")
    
    # Clear all tasks
    if task_manager.clear_all():
        print("\nAll tasks cleared")
    
    # Verify tasks were cleared
    if not task_manager.get_all():
        print("Task list is empty")


if __name__ == "__main__":
    main()
```

## Key Features

This implementation meets all specified requirements:

1. **OOP Implementation:**
   - Encapsulated task management in a `TaskManager` class
   - Private storage with controlled access

2. **Functionality Requirements:**
   - Implemented add, remove, search, finish, get_all, and clear_all methods
   - Each method follows the specified interface

3. **Data Management:**
   - Efficient O(1) lookups using dictionary storage
   - Auto-incrementing IDs for task uniqueness

4. **Input Validation:**
   - Thorough validation of all inputs
   - Proper error handling with appropriate exception types

5. **Security:**
   - Protection against invalid inputs
   - Defense against direct modification of internal data

6. **Performance:**
   - Optimized data structures for fast operations
   - Efficient search implementation

7. **Code Quality:**
   - Comprehensive docstrings
   - Clear variable names
   - Robust error handling
   - Example usage demonstration

This implementation follows software engineering best practices and meets the ISO/IEC 25010 quality standards.