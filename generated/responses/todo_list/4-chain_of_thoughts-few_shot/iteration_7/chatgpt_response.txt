```python
class TaskManager:
    """
    Manages tasks for a console-based Todo List application.

    Each task is stored as a dictionary with the following keys:
        id (int): Unique identifier of the task.
        task_name (str): The name/title of the task.
        task_description (str): A brief description of the task.
        is_finished (bool): Status indicating whether the task is complete.
    """

    def __init__(self) -> None:
        """
        Initializes a new instance of TaskManager with an empty task store.
        """
        self.tasks: dict[int, dict] = {}
        self.next_id: int = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the todo list.

        Args:
            task_name (str): The name/title of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID assigned to the new task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False,
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.

        Args:
            task_id (int): The unique ID of the task to be removed.

        Returns:
            bool: True if the task was found and removed, otherwise False.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list[dict]:
        """
        Searches for tasks by matching the search term in the task name or description.

        Args:
            task_term (str): The term to search for within tasks.

        Returns:
            list[dict]: A list of tasks (each as a dict) that match the search term.

        Raises:
            ValueError: If the search term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        search_lower = task_term.lower().strip()
        results = [
            task for task in self.tasks.values()
            if search_lower in task["task_name"].lower() or search_lower in task["task_description"].lower()
        ]
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.

        Args:
            task_id (int): The unique ID of the task to be marked as finished.

        Returns:
            bool: True if the task was found and marked as finished, otherwise False.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list[dict]:
        """
        Retrieves all tasks with their details.

        Returns:
            list[dict]: A list of all tasks, each including id, task_name, task_description, and is_finished.
        """
        # Return tasks sorted by task id for clarity
        return sorted(self.tasks.values(), key=lambda task: task["id"])

    def clear_all(self) -> bool:
        """
        Deletes all tasks from the todo list.

        Returns:
            bool: True after clearing all tasks.
        """
        self.tasks.clear()
        return True


def main():
    """
    Entry point for the console-based Todo List app.

    Provides an interactive menu to add, remove, search, finish, list, and clear tasks.
    """
    print("Welcome to the Todo List App!")
    manager = TaskManager()

    menu = (
        "\nAvailable commands:\n"
        "  add       - Add a new task\n"
        "  remove    - Remove an existing task by ID\n"
        "  search    - Search for tasks by term\n"
        "  finish    - Mark a task as completed\n"
        "  get_all   - Display all tasks\n"
        "  clear_all - Clear all tasks\n"
        "  exit      - Exit the application\n"
    )

    while True:
        print(menu)
        command = input("Enter a command: ").strip().lower()

        try:
            if command == "add":
                name = input("Enter task name: ")
                description = input("Enter task description: ")
                task_id = manager.add(name, description)
                print(f"Task added with ID: {task_id}")

            elif command == "remove":
                id_input = input("Enter task ID to remove: ").strip()
                task_id = int(id_input)
                if manager.remove(task_id):
                    print(f"Task {task_id} removed successfully.")
                else:
                    print(f"Task with ID {task_id} does not exist.")

            elif command == "search":
                term = input("Enter search term: ")
                matching_tasks = manager.search(term)
                if matching_tasks:
                    print("Found the following tasks:")
                    for task in matching_tasks:
                        print(task)
                else:
                    print("No matching tasks found.")

            elif command == "finish":
                id_input = input("Enter task ID to mark as finished: ").strip()
                task_id = int(id_input)
                if manager.finish(task_id):
                    print(f"Task {task_id} marked as completed.")
                else:
                    print(f"Task with ID {task_id} does not exist.")

            elif command == "get_all":
                all_tasks = manager.get_all()
                if all_tasks:
                    print("All tasks:")
                    for task in all_tasks:
                        print(task)
                else:
                    print("No tasks available.")

            elif command == "clear_all":
                confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirm == "yes":
                    manager.clear_all()
                    print("All tasks have been cleared.")
                else:
                    print("Clear operation cancelled.")

            elif command == "exit":
                print("Exiting Todo List App. Goodbye!")
                break

            else:
                print("Unknown command. Please try again.")

        except ValueError as ve:
            # Handle cases like invalid input format or empty strings
            print(f"Input error: {ve}")

        except Exception as e:
            # Catch-all for any unforeseen errors
            print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
```