I'll create a high-quality Python console-based todo list application that meets ISO/IEC 25010 standards, following the requirements you provided. Let me design this step by step with proper OOP principles, validation, and error handling.

```python
from typing import Dict, List, Union, Optional
import datetime


class TaskManager:
    """
    A class that manages a todo list with task creation, removal, search, and completion functionality.
    
    This implementation follows ISO/IEC 25010 standards for software quality.
    
    Attributes:
        tasks (Dict[int, Dict]): A dictionary storing tasks with their IDs as keys
        next_id (int): A counter for generating unique task IDs
    """
    
    def __init__(self):
        """Initialize an empty task manager with a task dictionary and ID counter."""
        self.tasks: Dict[int, Dict] = {}
        self.next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
        
        Args:
            task_name (str): The name of the task
            task_description (str): The description of the task
            
        Returns:
            int: The unique ID of the newly created task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string.")
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string.")
            
        task_id = self.next_id
        
        # Create task with metadata
        self.tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False,
            'created_at': datetime.datetime.now(),
            'completed_at': None
        }
        
        self.next_id += 1
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the todo list by its ID.
        
        Args:
            task_id (int): The unique ID of the task to remove
            
        Returns:
            bool: True if the task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        
        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks that match the given term in name or description.
        
        Args:
            task_term (str): The search term to look for in task names and descriptions
            
        Returns:
            List[Dict]: A list of tasks that match the search criteria
            
        Raises:
            ValueError: If task_term is empty
        """
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string.")
            
        task_term = task_term.lower()
        results = []
        
        for task in self.tasks.values():
            if (task_term in task['task_name'].lower() or 
                task_term in task['task_description'].lower()):
                results.append(self._format_task_output(task))
                
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to mark as completed
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
            
        if task_id in self.tasks:
            # If task exists but is already finished, return False to indicate no change
            if self.tasks[task_id]['is_finished']:
                return False
                
            self.tasks[task_id]['is_finished'] = True
            self.tasks[task_id]['completed_at'] = datetime.datetime.now()
            return True
        return False
    
    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks from the todo list.
        
        Returns:
            List[Dict]: A list of all tasks with their details
        """
        return [self._format_task_output(task) for task in self.tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the todo list.
        
        Returns:
            bool: True if the operation was successful
        """
        self.tasks.clear()
        # We keep the next_id as is to maintain uniqueness
        return True
    
    def _format_task_output(self, task: Dict) -> Dict:
        """
        Format a task for output according to the required format.
        
        Args:
            task (Dict): The task to format
            
        Returns:
            Dict: A dictionary with the required fields (id, task_name, task_description, is_finished)
        """
        return {
            'id': task['id'],
            'task_name': task['task_name'],
            'task_description': task['task_description'],
            'is_finished': task['is_finished']
        }


def display_menu():
    """Display the main menu options for the todo list application."""
    print("\n===== Todo List Application =====")
    print("1. Add a new task")
    print("2. Remove a task")
    print("3. Search tasks")
    print("4. Mark a task as completed")
    print("5. View all tasks")
    print("6. Clear all tasks")
    print("0. Exit")
    print("=================================")


def main():
    """
    Main function to run the todo list application with a console interface.
    Handles user input and interacts with the TaskManager class.
    """
    task_manager = TaskManager()
    
    while True:
        display_menu()
        try:
            choice = int(input("Enter your choice (0-6): ").strip())
            
            if choice == 0:
                print("Thank you for using the Todo List Application. Goodbye!")
                break
                
            elif choice == 1:
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                try:
                    task_id = task_manager.add(task_name, task_description)
                    print(f"Task added successfully with ID: {task_id}")
                except ValueError as e:
                    print(f"Error: {e}")
                    
            elif choice == 2:
                try:
                    task_id = int(input("Enter task ID to remove: ").strip())
                    if task_manager.remove(task_id):
                        print(f"Task with ID {task_id} removed successfully.")
                    else:
                        print(f"No task found with ID {task_id}.")
                except ValueError as e:
                    print(f"Error: {e}")
                    
            elif choice == 3:
                task_term = input("Enter search term: ").strip()
                try:
                    results = task_manager.search(task_term)
                    if results:
                        print(f"\nFound {len(results)} task(s):")
                        for task in results:
                            status = "✓" if task['is_finished'] else "✗"
                            print(f"ID: {task['id']} | {status} | {task['task_name']}: {task['task_description']}")
                    else:
                        print("No tasks found matching your search term.")
                except ValueError as e:
                    print(f"Error: {e}")
                    
            elif choice == 4:
                try:
                    task_id = int(input("Enter task ID to mark as completed: ").strip())
                    if task_manager.finish(task_id):
                        print(f"Task with ID {task_id} marked as completed.")
                    else:
                        print(f"Could not mark task as completed. Task might not exist or is already completed.")
                except ValueError as e:
                    print(f"Error: {e}")
                    
            elif choice == 5:
                tasks = task_manager.get_all()
                if tasks:
                    print("\nAll Tasks:")
                    for task in tasks:
                        status = "Completed" if task['is_finished'] else "Pending"
                        print(f"ID: {task['id']} | Status: {status} | {task['task_name']}: {task['task_description']}")
                else:
                    print("No tasks available.")
                    
            elif choice == 6:
                confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirm == "yes":
                    if task_manager.clear_all():
                        print("All tasks cleared successfully.")
                else:
                    print("Operation cancelled.")
                    
            else:
                print("Invalid choice. Please enter a number between 0 and 6.")
                
        except ValueError:
            print("Please enter a valid number for your choice.")
        
        # Pause before showing menu again
        input("\nPress Enter to continue...")


if __name__ == "__main__":
    main()
```

This implementation includes:

1. **OOP Implementation**: A `TaskManager` class with all the required interface methods
2. **Data Validation**: Comprehensive input validation with appropriate error handling
3. **Functionality**: All required functions (add, remove, search, finish, get_all, clear_all)
4. **Documentation**: Detailed docstrings and comments explaining code purposes
5. **Error Handling**: Graceful handling of invalid inputs and edge cases
6. **Usability**: A console interface that allows users to interact with the application
7. **Data Storage**: In-memory storage with efficient lookup via dictionary structure
8. **Code Quality**: Clean, readable structure with meaningful variable names

The application meets ISO/IEC 25010 standards in terms of functionality, performance, compatibility, usability, reliability, security, maintainability, and portability.