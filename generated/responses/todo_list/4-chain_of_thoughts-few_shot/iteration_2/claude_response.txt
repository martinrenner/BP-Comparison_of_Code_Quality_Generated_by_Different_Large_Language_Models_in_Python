I'll create a high-quality, console-based ToDo list application in Python that meets ISO/IEC 25010 requirements. Let me develop this step by step.

```python
class TaskManager:
    """
    A task manager class that provides functionality for managing a to-do list.
    
    This class implements operations for adding, removing, searching, completing,
    and retrieving tasks in accordance with ISO/IEC 25010 quality standards.
    """

    def __init__(self):
        """Initialize the TaskManager with an empty task dictionary and ID counter."""
        self._tasks = {}  # Dictionary to store tasks with task_id as key
        self._id_counter = 1  # Counter for generating unique task IDs

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
            
        Returns:
            int: The unique ID of the newly added task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string.")
        
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string.")
        
        task_id = self._id_counter
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False
        }
        self._id_counter += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager.
        
        Args:
            task_id (int): The unique ID of the task to be removed.
            
        Returns:
            bool: True if the task was removed successfully, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list[dict]:
        """
        Search for tasks whose name or description contains the search term.
        
        Args:
            task_term (str): The term to search for in task names and descriptions.
            
        Returns:
            list[dict]: A list of dictionaries containing details of matching tasks.
            
        Raises:
            ValueError: If task_term is empty.
        """
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string.")
        
        result = []
        for task in self._tasks.values():
            if (task_term.lower() in task['task_name'].lower() or 
                task_term.lower() in task['task_description'].lower()):
                result.append(task.copy())
        return result

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to mark as completed.
            
        Returns:
            bool: True if the task was marked as completed successfully, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        
        if task_id in self._tasks:
            self._tasks[task_id]['is_finished'] = True
            return True
        return False

    def get_all(self) -> list[dict]:
        """
        Retrieve all tasks in the task manager.
        
        Returns:
            list[dict]: A list of dictionaries containing details of all tasks.
        """
        return [task.copy() for task in self._tasks.values()]

    def clear_all(self) -> bool:
        """
        Remove all tasks from the task manager.
        
        Returns:
            bool: True if all tasks were removed successfully.
        """
        self._tasks.clear()
        return True


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    """
    task_manager = TaskManager()
    
    # Welcome message
    print("==== ToDo List Application ====")
    
    while True:
        print("\nOptions:")
        print("1. Add a task")
        print("2. View all tasks")
        print("3. Search for tasks")
        print("4. Mark task as completed")
        print("5. Remove a task")
        print("6. Clear all tasks")
        print("7. Exit")
        
        try:
            choice = int(input("\nEnter your choice (1-7): "))
            
            if choice == 1:
                task_name = input("Enter task name: ")
                task_desc = input("Enter task description: ")
                task_id = task_manager.add(task_name, task_desc)
                print(f"Task added successfully with ID: {task_id}")
                
            elif choice == 2:
                tasks = task_manager.get_all()
                if not tasks:
                    print("No tasks available.")
                else:
                    print("\n==== All Tasks ====")
                    for task in tasks:
                        status = "✓ Completed" if task['is_finished'] else "⬕ Pending"
                        print(f"ID: {task['id']} | Status: {status}")
                        print(f"Name: {task['task_name']}")
                        print(f"Description: {task['task_description']}")
                        print("-" * 40)
                
            elif choice == 3:
                search_term = input("Enter search term: ")
                results = task_manager.search(search_term)
                if not results:
                    print(f"No tasks found matching '{search_term}'.")
                else:
                    print(f"\n==== Search Results for '{search_term}' ====")
                    for task in results:
                        status = "✓ Completed" if task['is_finished'] else "⬕ Pending"
                        print(f"ID: {task['id']} | Status: {status}")
                        print(f"Name: {task['task_name']}")
                        print(f"Description: {task['task_description']}")
                        print("-" * 40)
                
            elif choice == 4:
                task_id = int(input("Enter task ID to mark as completed: "))
                if task_manager.finish(task_id):
                    print(f"Task {task_id} marked as completed.")
                else:
                    print(f"Task {task_id} not found.")
                
            elif choice == 5:
                task_id = int(input("Enter task ID to remove: "))
                if task_manager.remove(task_id):
                    print(f"Task {task_id} removed successfully.")
                else:
                    print(f"Task {task_id} not found.")
                
            elif choice == 6:
                confirm = input("Are you sure you want to clear all tasks? (y/n): ")
                if confirm.lower() == 'y':
                    task_manager.clear_all()
                    print("All tasks have been cleared.")
                else:
                    print("Operation cancelled.")
                
            elif choice == 7:
                print("Thank you for using the ToDo List Application. Goodbye!")
                break
                
            else:
                print("Invalid choice. Please enter a number between 1 and 7.")
                
        except ValueError as e:
            if str(e).startswith("Task"):
                print(f"Error: {e}")
            else:
                print("Invalid input. Please enter a valid number.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()
```

This implementation meets all the specified requirements:

1. **Functionality Requirements**: All required functions are implemented (add, remove, search, finish, get_all, clear_all) within the TaskManager class.

2. **Implementation Requirements**:
   - Uses OOP with a TaskManager class implementing the specified interface
   - Returns tasks in the required format
   - Implements validation using built-in error types
   - Stores tasks in an in-memory data structure (dictionary)
   - Optimizes lookups, insertions, and deletions with a dictionary-based implementation
   - Handles errors gracefully

3. **Code Quality Requirements**:
   - Correctness: Produces expected results
   - Performance: Uses efficient algorithm and data structures
   - Modularity: Code is logically structured
   - Security: Validates inputs to protect against invalid or malicious inputs
   - Testability: Functions are well-defined and testable
   - Readability & Documentation: Includes comprehensive docstrings, clear variable names, and comments

The implementation includes a console interface for user interaction through the `main()` function, making it easy to test and use the application directly.