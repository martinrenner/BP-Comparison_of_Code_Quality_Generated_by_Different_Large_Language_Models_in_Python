```python
#!/usr/bin/env python3
"""
A console-based To-Do List application that meets ISO/IEC 25010 quality requirements.
This application supports adding, removing, searching, finishing tasks, retrieving all tasks, and clearing all tasks.
It is implemented using object-oriented programming with a TaskManager class and includes proper validation,
error handling, and documentation to ensure maintainability and testability.
"""

from typing import List, Dict


class TaskManager:
    """
    TaskManager provides an in-memory management system for tasks.
    
    Each task is stored as a dictionary with the following keys:
    - id: Unique identifier for the task.
    - task_name: Name of the task.
    - task_description: Description of the task.
    - is_finished: Boolean indicating completion status.
    
    Methods:
        add(task_name, task_description) -> int
        remove(task_id) -> bool
        search(task_term) -> List[Dict]
        finish(task_id) -> bool
        get_all() -> List[Dict]
        clear_all() -> bool
    """

    def __init__(self):
        """
        Initializes the TaskManager with an empty dictionary of tasks and a counter for generating unique IDs.
        """
        self.tasks: Dict[int, Dict] = {}
        self._next_id: int = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the task manager.

        Args:
            task_name (str): The name of the task. Must be a non-empty string.
            task_description (str): A description of the task. Must be a non-empty string.

        Returns:
            int: The unique ID assigned to the newly added task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name must be a non-empty string.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description must be a non-empty string.")

        task_id = self._next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self._next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.

        Args:
            task_id (int): The unique ID of the task to be removed. Must be a positive integer.

        Returns:
            bool: True if the task was successfully removed, False if the task does not exist.

        Raises:
            ValueError: If the task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id not in self.tasks:
            return False

        del self.tasks[task_id]
        return True

    def search(self, task_term: str) -> List[Dict]:
        """
        Searches for tasks that contain the search term in either their name or description (case-insensitive).

        Args:
            task_term (str): A non-empty search term.

        Returns:
            List[Dict]: A list of tasks that match the search term. Each task is represented as a dictionary.

        Raises:
            ValueError: If task_term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term must be a non-empty string.")

        term = task_term.strip().lower()
        matched_tasks = [
            task for task in self.tasks.values()
            if term in task["task_name"].lower() or term in task["task_description"].lower()
        ]
        return matched_tasks

    def finish(self, task_id: int) -> bool:
        """
        Marks the task with the specified ID as finished.

        Args:
            task_id (int): The unique ID of the task to be marked as finished.

        Returns:
            bool: True if the task status was successfully updated, False if the task does not exist.

        Raises:
            ValueError: If the task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        task = self.tasks.get(task_id)
        if not task:
            return False

        task["is_finished"] = True
        return True

    def get_all(self) -> List[Dict]:
        """
        Retrieves all tasks with their full details.

        Returns:
            List[Dict]: A list of all tasks, where each task contains 'id', 'task_name',
            'task_description', and 'is_finished' information.
        """
        # Return tasks sorted by task id for consistency.
        return [self.tasks[tid] for tid in sorted(self.tasks.keys())]

    def clear_all(self) -> bool:
        """
        Deletes all tasks from the task manager.

        Returns:
            bool: True if all tasks were successfully cleared.
        """
        self.tasks.clear()
        return True


def display_task(task: Dict) -> None:
    """
    Formats and prints a single task.

    Args:
        task (Dict): The task to display.
    """
    status = "Finished" if task["is_finished"] else "Pending"
    print(f"[ID: {task['id']}] {task['task_name']} - {task['task_description']} ({status})")


def main() -> None:
    """
    Main function to run the console-based todo list application.
    Provides an interactive menu for user operations.
    """
    manager = TaskManager()

    MENU = (
        "\n--- To-Do List Menu ---\n"
        "1. Add Task\n"
        "2. Remove Task\n"
        "3. Search Tasks\n"
        "4. Finish Task\n"
        "5. Get All Tasks\n"
        "6. Clear All Tasks\n"
        "7. Exit\n"
    )

    while True:
        print(MENU)
        choice = input("Enter your choice (1-7): ").strip()

        if choice == "1":
            # Add Task
            task_name = input("Enter task name: ").strip()
            task_description = input("Enter task description: ").strip()
            try:
                task_id = manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "2":
            # Remove Task
            task_id_input = input("Enter task ID to remove: ").strip()
            try:
                task_id = int(task_id_input)
                if manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError:
                print("Invalid input for task ID. Please enter a positive integer.")

        elif choice == "3":
            # Search Tasks
            term = input("Enter search term: ").strip()
            try:
                results = manager.search(term)
                if results:
                    print("Search Results:")
                    for task in results:
                        display_task(task)
                else:
                    print("No tasks match the search term.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "4":
            # Finish Task
            task_id_input = input("Enter task ID to mark as finished: ").strip()
            try:
                task_id = int(task_id_input)
                if manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError:
                print("Invalid input for task ID. Please enter a positive integer.")

        elif choice == "5":
            # Get All Tasks
            tasks = manager.get_all()
            if tasks:
                print("All Tasks:")
                for task in tasks:
                    display_task(task)
            else:
                print("No tasks available.")

        elif choice == "6":
            # Clear All Tasks
            confirmation = input("Are you sure you want to clear all tasks? (y/n): ").strip().lower()
            if confirmation == "y":
                if manager.clear_all():
                    print("All tasks have been cleared.")
            else:
                print("Clear all tasks canceled.")

        elif choice == "7":
            # Exit
            print("Exiting To-Do List app. Goodbye!")
            break

        else:
            print("Invalid choice. Please select a valid option (1-7).")


if __name__ == "__main__":
    main()
```