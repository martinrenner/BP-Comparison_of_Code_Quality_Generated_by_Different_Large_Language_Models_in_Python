I'll create a console-based todo list app that meets the ISO/IEC 25010 requirements with proper OOP principles. Let me develop this step by step.

```python
from typing import List, Dict, Optional, Union
import re
import datetime


class TaskManager:
    """
    A task management system that allows for creating, tracking, and managing tasks.
    Implements ISO/IEC 25010 requirements for software quality.
    
    Attributes:
        _tasks (Dict[int, Dict]): Internal storage for tasks
        _next_id (int): Counter for generating unique task IDs
    """
    
    def __init__(self):
        """Initialize a new TaskManager with empty task storage."""
        self._tasks = {}  # Using dict for O(1) lookups by ID
        self._next_id = 1  # Start IDs at 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name/title of the task
            task_description (str): A detailed description of the task
        
        Returns:
            int: The unique ID assigned to the new task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty")
        
        # Sanitize inputs
        task_name = task_name.strip()
        task_description = task_description.strip()
        
        # Create task object
        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "name": task_name,
            "description": task_description,
            "is_finished": False,
            "created_at": datetime.datetime.now(),
            "completed_at": None
        }
        
        # Increment ID counter for next task
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id (int): The unique identifier of the task to remove
            
        Returns:
            bool: True if the task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        if task_id not in self._tasks:
            raise KeyError(f"Task with ID {task_id} does not exist")
            
        del self._tasks[task_id]
        return True
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term (str): The search term to look for in task names and descriptions
            
        Returns:
            List[Dict]: A list of tasks matching the search term
            
        Raises:
            ValueError: If task_term is empty
        """
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty")
            
        task_term = task_term.strip().lower()
        results = []
        
        for task in self._tasks.values():
            if (task_term in task["name"].lower() or 
                task_term in task["description"].lower()):
                results.append(self._format_task_output(task))
                
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique identifier of the task to mark as completed
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise
            
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        if task_id not in self._tasks:
            raise KeyError(f"Task with ID {task_id} does not exist")
            
        task = self._tasks[task_id]
        
        # If the task is already finished, return False to indicate no change
        if task["is_finished"]:
            return False
            
        task["is_finished"] = True
        task["completed_at"] = datetime.datetime.now()
        return True
    
    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks in the system.
        
        Returns:
            List[Dict]: A list containing all tasks with their details
        """
        return [self._format_task_output(task) for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the system.
        
        Returns:
            bool: True if all tasks were successfully cleared
        """
        self._tasks = {}
        return True
    
    def _format_task_output(self, task: Dict) -> Dict:
        """
        Format a task for output according to the specified format.
        
        Args:
            task (Dict): The internal task representation
            
        Returns:
            Dict: The formatted task with expected output fields
        """
        return {
            "id": task["id"],
            "task_name": task["name"],
            "task_description": task["description"],
            "is_finished": task["is_finished"]
        }


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    Provides a simple command-line interface.
    """
    manager = TaskManager()
    
    print("=== TODO List Application ===")
    
    while True:
        print("\nAvailable commands:")
        print("1. Add task")
        print("2. Remove task")
        print("3. Search tasks")
        print("4. Mark task as finished")
        print("5. View all tasks")
        print("6. Clear all tasks")
        print("7. Exit")
        
        try:
            choice = input("\nEnter your choice (1-7): ")
            
            if choice == "1":
                name = input("Enter task name: ")
                desc = input("Enter task description: ")
                task_id = manager.add(name, desc)
                print(f"Task added successfully with ID: {task_id}")
                
            elif choice == "2":
                task_id = int(input("Enter task ID to remove: "))
                if manager.remove(task_id):
                    print(f"Task {task_id} removed successfully")
                    
            elif choice == "3":
                term = input("Enter search term: ")
                results = manager.search(term)
                if results:
                    print(f"\nFound {len(results)} matching tasks:")
                    for task in results:
                        status = "✓" if task["is_finished"] else "✗"
                        print(f"ID: {task['id']} [{status}] - {task['task_name']}")
                        print(f"  Description: {task['task_description']}")
                else:
                    print("No matching tasks found")
                    
            elif choice == "4":
                task_id = int(input("Enter task ID to mark as finished: "))
                if manager.finish(task_id):
                    print(f"Task {task_id} marked as finished")
                else:
                    print(f"Task {task_id} was already finished")
                    
            elif choice == "5":
                tasks = manager.get_all()
                if tasks:
                    print(f"\nAll Tasks ({len(tasks)}):")
                    for task in tasks:
                        status = "✓" if task["is_finished"] else "✗"
                        print(f"ID: {task['id']} [{status}] - {task['task_name']}")
                        print(f"  Description: {task['task_description']}")
                else:
                    print("No tasks found")
                    
            elif choice == "6":
                confirm = input("Are you sure you want to clear all tasks? (y/n): ")
                if confirm.lower() == 'y':
                    manager.clear_all()
                    print("All tasks cleared successfully")
                    
            elif choice == "7":
                print("Goodbye!")
                break
                
            else:
                print("Invalid choice. Please enter a number between 1 and 7.")
                
        except ValueError as e:
            print(f"Error: {e}")
        except KeyError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")


if __name__ == "__main__":
    main()
```

This implementation includes:

1. **Proper OOP Design**: The `TaskManager` class implements the required interface with all required methods.

2. **Full Input Validation**: Each method validates inputs and raises appropriate exceptions.

3. **Efficient Data Structure**: Uses a dictionary for O(1) lookups by ID.

4. **Error Handling**: Comprehensive error handling with appropriate exception types.

5. **Documentation**: Thorough docstrings and comments following best practices.

6. **Modularity**: Clean separation of concerns between the TaskManager class and the CLI interface.

7. **Security**: Input validation and sanitization to protect against invalid inputs.

8. **Usability**: A simple but functional CLI interface to demonstrate functionality.

9. **Additional Features**: Timestamps for creation and completion, formatted output for better readability.

The code meets all the requirements specified in the task, providing a high-quality, maintainable solution for a todo list application.