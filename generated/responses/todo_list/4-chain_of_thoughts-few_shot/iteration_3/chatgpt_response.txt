```python
class TaskManager:
    """
    A console-based Task Manager for managing a todo list.
    
    This class implements the following functionalities:
      - add: Add a new task with a name and description.
      - remove: Remove an existing task by its unique ID.
      - search: Search for tasks by task name or description.
      - finish: Mark a task as completed.
      - get_all: Retrieve all tasks.
      - clear_all: Delete all tasks.
      
    Each task is stored as a dictionary with the following keys:
        (id, task_name, task_description, is_finished)
        
    Tasks are stored in an in-memory dictionary with task IDs as keys to
    optimize lookup, insertion, and deletion.
    """

    def __init__(self) -> None:
        """
        Initializes the TaskManager with an empty task list and sets
        the initial unique task ID.
        """
        self.tasks = {}  # Dictionary to store tasks with task ID as key.
        self.next_id = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with the provided name and description.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
            
        Returns:
            int: The unique ID assigned to the new task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        if not task_name.strip() or not task_description.strip():
            raise ValueError("Task name and description must not be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes the task with the given unique ID.
        
        Args:
            task_id (int): The unique ID of the task to remove.
            
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks containing the task_term in their name or description.
        
        Args:
            task_term (str): The search term.
            
        Returns:
            list[dict]: A list of tasks (dictionaries) matching the search term.
            
        Raises:
            ValueError: If task_term is not a string.
        """
        if not isinstance(task_term, str):
            raise ValueError("Search term must be a string.")

        term_lower = task_term.lower()
        matching_tasks = [
            task for task in self.tasks.values()
            if term_lower in task["task_name"].lower()
            or term_lower in task["task_description"].lower()
        ]
        # Sorted by task id for predictable ordering.
        return sorted(matching_tasks, key=lambda x: x["id"])

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to mark as finished.
            
        Returns:
            bool: True if the task was found and marked finished, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all tasks.
        
        Returns:
            list[dict]: A list of all stored tasks with details.
        """
        # Sorting tasks by ID before returning for consistency.
        return [self.tasks[tid] for tid in sorted(self.tasks)]

    def clear_all(self) -> bool:
        """
        Deletes all tasks.
        
        Returns:
            bool: True if all tasks were successfully cleared.
        """
        self.tasks.clear()
        return True


def display_task(task: dict) -> None:
    """
    Displays the details of a task in a formatted manner.
    
    Args:
        task (dict): A dictionary containing task details.
    """
    status = "Done" if task["is_finished"] else "Pending"
    print(f"(ID: {task['id']}, Name: {task['task_name']}, "
          f"Description: {task['task_description']}, Status: {status})")


def main():
    """
    Main function to run the console-based todo list application.
    
    Presents a menu to the user to manage tasks.
    """
    task_manager = TaskManager()
    
    menu = """
    Please select an option:
      1. Add Task
      2. Remove Task
      3. Search Tasks
      4. Mark Task as Finished
      5. Get All Tasks
      6. Clear All Tasks
      7. Quit
    """

    while True:
        print(menu)
        choice = input("Enter your choice (1-7): ").strip()
        
        if choice == "1":
            # Add Task
            try:
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = task_manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as error:
                print(f"Error: {error}")

        elif choice == "2":
            # Remove Task
            try:
                task_id_input = input("Enter task ID to remove: ").strip()
                task_id = int(task_id_input)
                if task_manager.remove(task_id):
                    print("Task removed successfully.")
                else:
                    print("No task found with the given ID.")
            except ValueError as error:
                print(f"Error: {error}")

        elif choice == "3":
            # Search Tasks
            search_term = input("Enter search term: ").strip()
            try:
                results = task_manager.search(search_term)
                if results:
                    print("Search Results:")
                    for task in results:
                        display_task(task)
                else:
                    print("No matching tasks found.")
            except ValueError as error:
                print(f"Error: {error}")

        elif choice == "4":
            # Mark Task as Finished
            try:
                task_id_input = input("Enter task ID to mark as finished: ").strip()
                task_id = int(task_id_input)
                if task_manager.finish(task_id):
                    print("Task has been marked as finished.")
                else:
                    print("No task found with the given ID.")
            except ValueError as error:
                print(f"Error: {error}")

        elif choice == "5":
            # Get All Tasks
            tasks = task_manager.get_all()
            if tasks:
                print("Listing All Tasks:")
                for task in tasks:
                    display_task(task)
            else:
                print("No tasks available.")

        elif choice == "6":
            # Clear All Tasks
            confirmation = input("Are you sure you want to clear all tasks? (y/n): ").strip().lower()
            if confirmation == 'y':
                if task_manager.clear_all():
                    print("All tasks cleared successfully.")
            else:
                print("Operation cancelled. Tasks were not cleared.")

        elif choice == "7":
            print("Exiting the Task Manager. Goodbye!")
            break

        else:
            print("Invalid option. Please enter a number between 1 and 7.")


if __name__ == "__main__":
    main()
```