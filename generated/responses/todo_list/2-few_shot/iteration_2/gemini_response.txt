```python
class TaskManager:
    """
    Manages a list of tasks, allowing for adding, removing, searching,
    finishing, retrieving, and clearing tasks.  This class adheres to
    ISO/IEC 25010 standards by focusing on maintainability, reliability,
    usability, efficiency, portability, and security.

    Attributes:
        tasks (dict): A dictionary storing task details.  Keys are unique
                      task IDs, and values are dictionaries containing
                      task information (name, description, finished status).
        next_id (int):  The next available task ID.
    """

    def __init__(self):
        """
        Initializes the TaskManager with an empty task list and sets the
        next available ID to 1.
        """
        self.tasks = {}
        self.next_id = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the task list.

        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID assigned to the newly added task.

        Raises:
            ValueError: If task_name or task_description is empty.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False,
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the task list by its ID.

        Args:
            task_id (int): The ID of the task to be removed.

        Returns:
            bool: True if the task was successfully removed, False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        else:
            return False

    def search(self, task_term: str) -> list[dict]:
        """
        Searches for tasks that match a given search term in their name or
        description.

        Args:
            task_term (str): The term to search for.

        Returns:
            list[dict]: A list of tasks (dictionaries) that match the search
                         term.  Returns an empty list if no matches are found.

        Raises:
            ValueError: If task_term is empty.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        results = []
        for task in self.tasks.values():
            if (
                task_term.lower() in task["task_name"].lower()
                or task_term.lower() in task["task_description"].lower()
            ):
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.

        Args:
            task_id (int): The ID of the task to be marked as finished.

        Returns:
            bool: True if the task was successfully marked as finished,
                  False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """

        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        else:
            return False

    def get_all(self) -> list[dict]:
        """
        Retrieves all tasks in the task list.

        Returns:
            list[dict]: A list of all tasks, where each task is represented
                         as a dictionary.  Returns an empty list if there are
                         no tasks.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Clears all tasks from the task list.

        Returns:
           bool: Always returns True, indicating successful clearing of tasks.
        """
        self.tasks.clear()
        self.next_id = 1  # Reset the ID counter
        return True


def main():
    """
    Main function to demonstrate the TaskManager class functionality.
    Provides a console-based interface for interacting with the todo list.
    """
    task_manager = TaskManager()

    while True:
        print("\nTodo List Menu:")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Search Tasks")
        print("4. Finish Task")
        print("5. List All Tasks")
        print("6. Clear All Tasks")
        print("7. Exit")

        choice = input("Enter your choice: ")

        try:
            if choice == "1":
                task_name = input("Enter task name: ")
                task_description = input("Enter task description: ")
                task_id = task_manager.add(task_name, task_description)
                print(f"Task added with ID: {task_id}")

            elif choice == "2":
                task_id = int(input("Enter task ID to remove: "))
                if task_manager.remove(task_id):
                    print("Task removed successfully.")
                else:
                    print("Task not found.")

            elif choice == "3":
                task_term = input("Enter search term: ")
                results = task_manager.search(task_term)
                if results:
                    print("Search Results:")
                    for task in results:
                        print(
                            f"  ID: {task['id']}, Name: {task['task_name']}, "
                            f"Description: {task['task_description']}, "
                            f"Finished: {task['is_finished']}"
                        )
                else:
                    print("No tasks found matching the search term.")

            elif choice == "4":
                task_id = int(input("Enter task ID to mark as finished: "))
                if task_manager.finish(task_id):
                    print("Task marked as finished.")
                else:
                    print("Task not found.")

            elif choice == "5":
                tasks = task_manager.get_all()
                if tasks:
                    print("All Tasks:")
                    for task in tasks:
                        print(
                            f"  ID: {task['id']}, Name: {task['task_name']}, "
                            f"Description: {task['task_description']}, "
                            f"Finished: {task['is_finished']}"
                        )
                else:
                    print("No tasks in the list.")

            elif choice == "6":
                if task_manager.clear_all():
                    print("All tasks cleared.")
                else:
                    print("An error occurred while clearing tasks.")
            elif choice == "7":
                print("Exiting...")
                break
            else:
                print("Invalid choice. Please try again.")

        except ValueError as e:
            print(f"Error: {e}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


if __name__ == "__main__":
    main()

```

Key improvements and explanations in this comprehensive response:

* **Complete and Executable Code:** The code is a fully working console application, including a `main` function for user interaction.  You can copy, paste, and run it directly.
* **Detailed Docstrings:**  Every class and method has a comprehensive docstring explaining its purpose, arguments, return values, and any exceptions raised. This adheres to best practices for documentation and maintainability (ISO/IEC 25010).
* **Type Hints:**  Type hints (`task_name: str`, `task_id: int`, etc.) are used throughout the code.  This improves readability, helps catch errors early, and is essential for static analysis tools.
* **Class Structure (OOP):** The code adheres to the OOP requirement using the `TaskManager` class, encapsulating all task-related logic.
* **Interface Adherence:** The `TaskManager` class implements all the required methods (`add`, `remove`, `search`, `finish`, `get_all`, `clear_all`) with the specified signatures.
* **Error Handling:**
    * **Input Validation:**  The code includes robust input validation using `ValueError` for empty strings, non-positive task IDs, and empty search terms. This enhances security and reliability (ISO/IEC 25010).
    * **Exception Handling:**  The `main` function includes a `try-except` block to catch `ValueError` (from invalid user input) and other potential exceptions, providing a better user experience.
* **Data Storage:** Tasks are stored in a dictionary (`self.tasks`), where keys are task IDs and values are task details.  This provides efficient lookups by ID (using dictionary key access, which is typically O(1) on average).  Insertions and deletions are also efficient.
* **Return Values:** The methods return values as specified (e.g., `add` returns the task ID, `remove` returns a boolean).
* **Task Representation:**  Tasks are returned as dictionaries, including all required information (id, task_name, task_description, is_finished).
* **Efficiency:** The use of a dictionary for `self.tasks` provides very good performance for key operations.
* **Readability and Comments:** The code is well-formatted, uses clear variable names, and includes comments where necessary to explain complex logic.
* **Modularity:** The code is structured into a class, promoting modularity and reusability.
* **Testability:** The code is easily testable due to its modular design and clear interfaces.  You could write unit tests for each method of the `TaskManager` class.
* **Console Interaction:** The `main` function provides a user-friendly console interface, making the application easy to use (ISO/IEC 25010 – Usability).
* **ISO/IEC 25010 Considerations:** The code is designed with the principles of ISO/IEC 25010 in mind, specifically focusing on:
    * **Maintainability:** Clear code, documentation, and modularity.
    * **Reliability:** Error handling and input validation make the code robust.
    * **Usability:** The console interface is straightforward and easy to understand.
    * **Efficiency:** The use of dictionaries optimizes performance.
    * **Portability:** The code is pure Python and should run on any system with a Python interpreter.
    * **Security:** Input validation helps prevent potential issues caused by invalid input.
 This improved version provides a complete, well-documented, and efficient solution that addresses all the requirements of the prompt and adheres to the principles of good software design, aligning with the ISO/IEC 25010 standard.
