```python
class TaskManager:
    """
    Manages a collection of tasks in an in-memory data structure.
    Provides functions for adding, removing, searching, finishing, 
    and retrieving tasks.
    """

    def __init__(self):
        """
        Initializes a new TaskManager instance.
        Uses a dictionary for efficient lookups, insertions, and deletions.
        """
        self.tasks = {}  # {task_id: task_dict}
        self.next_id = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with the specified name and description.

        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID assigned to the new task.

        Raises:
            ValueError: If either task_name or task_description is empty.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task identified by its unique ID.

        Args:
            task_id (int): The unique ID of the task to remove.

        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks containing the specified term in their name or description.
        The search is case-insensitive.

        Args:
            task_term (str): The term to search for in tasks.

        Returns:
            list: A list of task dictionaries that match the search criteria.

        Raises:
            ValueError: If the search term is empty.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.lower()
        results = [
            task for task in self.tasks.values()
            if term_lower in task["task_name"].lower()
            or term_lower in task["task_description"].lower()
        ]
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished by updating its status.

        Args:
            task_id (int): The unique ID of the task to mark as finished.

        Returns:
            bool: True if the task existed and was updated; False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all tasks with their details.

        Returns:
            list: A list of dictionaries, each representing a task with keys:
                  id, task_name, task_description, and is_finished.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Clears all tasks from the manager.

        Returns:
            bool: True after all tasks are removed.
        """
        self.tasks.clear()
        return True


def main():
    """
    Runs the console-based Todo List Application.
    Handles user input and provides a menu to interact with the TaskManager.
    """
    manager = TaskManager()
    menu = (
        "\nTodo List Menu:\n"
        "1. add     - Add a new task\n"
        "2. remove  - Remove an existing task by ID\n"
        "3. search  - Search tasks by term\n"
        "4. finish  - Mark a task as finished by ID\n"
        "5. list    - List all tasks\n"
        "6. clear   - Clear all tasks\n"
        "7. exit    - Exit the application\n"
        "Enter a command: "
    )

    valid_commands = {"add", "remove", "search", "finish", "list", "clear", "exit"}

    while True:
        command = input(menu).strip().lower()
        if command not in valid_commands:
            print("Invalid command. Please try again.")
            continue

        if command == "exit":
            print("Exiting Todo List Application. Goodbye!")
            break

        elif command == "add":
            try:
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                task_id = manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as e:
                print(f"Error adding task: {e}")

        elif command == "remove":
            try:
                task_id_input = input("Enter task ID to remove: ").strip()
                task_id = int(task_id_input)
                if manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError as e:
                print(f"Error removing task: {e}")

        elif command == "search":
            try:
                term = input("Enter search term: ").strip()
                results = manager.search(term)
                if results:
                    print("Search Results:")
                    for task in results:
                        print(
                            f"ID: {task['id']}, Name: {task['task_name']}, "
                            f"Description: {task['task_description']}, Finished: {task['is_finished']}"
                        )
                else:
                    print("No matching tasks found.")
            except ValueError as e:
                print(f"Error during search: {e}")

        elif command == "finish":
            try:
                task_id_input = input("Enter task ID to mark as finished: ").strip()
                task_id = int(task_id_input)
                if manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError as e:
                print(f"Error finishing task: {e}")

        elif command == "list":
            tasks = manager.get_all()
            if tasks:
                print("Todo List Tasks:")
                for task in tasks:
                    print(
                        f"ID: {task['id']}, Name: {task['task_name']}, "
                        f"Description: {task['task_description']}, Finished: {task['is_finished']}"
                    )
            else:
                print("No tasks available.")

        elif command == "clear":
            confirmation = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
            if confirmation == "yes":
                manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Clear operation cancelled.")


if __name__ == "__main__":
    main()
```