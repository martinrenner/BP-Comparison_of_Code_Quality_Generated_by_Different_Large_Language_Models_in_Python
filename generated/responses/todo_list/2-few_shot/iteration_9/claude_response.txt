# Todo List Application

I'll create a console-based Todo list application that meets the ISO/IEC 25010 requirements, focusing on functionality, maintainability, performance, and usability.

```python
from typing import List, Dict, Union, Optional
import re
from datetime import datetime


class TaskManager:
    """
    Task Manager class for managing a todo list.
    
    This class provides functionality to add, remove, search, complete,
    and retrieve tasks in a todo list application.
    """
    
    def __init__(self):
        """Initialize an empty task manager with a task dictionary and ID counter."""
        self._tasks: Dict[int, Dict] = {}
        self._next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
            
        Returns:
            int: The unique ID of the newly added task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Input validation
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty")
        
        # Create a new task
        task_id = self._next_id
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name.strip(),
            'task_description': task_description.strip(),
            'is_finished': False,
            'created_at': datetime.now(),
            'updated_at': None
        }
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the todo list by its ID.
        
        Args:
            task_id (int): The unique ID of the task to remove.
            
        Returns:
            bool: True if the task was successfully removed, False otherwise.
            
        Raises:
            ValueError: If task_id is negative or not an integer.
        """
        # Input validation
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists
        if task_id not in self._tasks:
            return False
        
        # Remove the task
        del self._tasks[task_id]
        return True
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term (str): The term to search for in task names or descriptions.
            
        Returns:
            List[Dict]: A list of tasks matching the search term.
            
        Raises:
            ValueError: If task_term is empty.
        """
        # Input validation
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty")
        
        task_term = task_term.lower().strip()
        results = []
        
        for task_id, task in self._tasks.items():
            if (task_term in task['task_name'].lower() or 
                task_term in task['task_description'].lower()):
                results.append(self._format_task_output(task))
        
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to mark as completed.
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
            
        Raises:
            ValueError: If task_id is negative or not an integer.
        """
        # Input validation
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists
        if task_id not in self._tasks:
            return False
        
        # Mark task as finished
        if self._tasks[task_id]['is_finished']:
            return False  # Task is already finished
        
        self._tasks[task_id]['is_finished'] = True
        self._tasks[task_id]['updated_at'] = datetime.now()
        return True
    
    def get_all(self) -> List[Dict]:
        """
        Get all tasks in the todo list.
        
        Returns:
            List[Dict]: A list of all tasks.
        """
        return [self._format_task_output(task) for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Clear all tasks from the todo list.
        
        Returns:
            bool: True if tasks were successfully cleared, False if the list was already empty.
        """
        if not self._tasks:
            return False
        
        self._tasks.clear()
        return True
    
    def _format_task_output(self, task: Dict) -> Dict:
        """
        Format a task for output to ensure consistent format.
        
        Args:
            task (Dict): The task to format.
            
        Returns:
            Dict: A dictionary containing the id, task_name, task_description, and is_finished fields.
        """
        return {
            'id': task['id'],
            'task_name': task['task_name'],
            'task_description': task['task_description'],
            'is_finished': task['is_finished']
        }


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    
    This function creates a TaskManager instance, adds some tasks,
    and demonstrates how to use the TaskManager methods.
    """
    task_manager = TaskManager()
    
    print("=== Todo List Application ===")
    
    try:
        # Add some tasks
        id1 = task_manager.add("Buy groceries", "Milk, eggs, bread, and fruits")
        id2 = task_manager.add("Call mom", "Wish her happy birthday")
        id3 = task_manager.add("Finish report", "Complete the quarterly report for the meeting")
        
        # Display all tasks
        print("\nAll Tasks:")
        all_tasks = task_manager.get_all()
        for task in all_tasks:
            status = "✓" if task['is_finished'] else "□"
            print(f"[{status}] {task['id']}. {task['task_name']} - {task['task_description']}")
        
        # Mark a task as finished
        print("\nMarking 'Buy groceries' as finished...")
        task_manager.finish(id1)
        
        # Search for tasks
        print("\nSearch results for 'report':")
        results = task_manager.search("report")
        for task in results:
            status = "✓" if task['is_finished'] else "□"
            print(f"[{status}] {task['id']}. {task['task_name']} - {task['task_description']}")
        
        # Remove a task
        print("\nRemoving 'Call mom' task...")
        task_manager.remove(id2)
        
        # Display all tasks after modification
        print("\nAll Tasks after modifications:")
        all_tasks = task_manager.get_all()
        for task in all_tasks:
            status = "✓" if task['is_finished'] else "□"
            print(f"[{status}] {task['id']}. {task['task_name']} - {task['task_description']}")
        
        # Clear all tasks
        print("\nClearing all tasks...")
        task_manager.clear_all()
        
        # Display all tasks after clearing
        all_tasks = task_manager.get_all()
        if not all_tasks:
            print("No tasks available. The task list has been cleared.")
    
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

## Key Features of the Implementation

1. **TaskManager Class**
   - Fully implements the required interface with proper type hints
   - Provides comprehensive error handling and validation
   - Uses an efficient dictionary for O(1) lookups by task ID

2. **Data Storage**
   - In-memory dictionary structure for fast access and modification
   - Each task includes metadata like creation and update timestamps
   - Clear format for task representation

3. **Input Validation**
   - Empty strings are rejected with descriptive error messages
   - Proper type checking for numeric inputs
   - Consistent error handling across all methods

4. **Code Quality**
   - Comprehensive docstrings for all methods
   - Logical structure with clear separation of concerns
   - Consistent formatting and naming conventions
   - Example implementation in the main() function

5. **Error Handling**
   - Proper use of exceptions for validation errors
   - Consistent return patterns for operation success/failure
   - Guards against edge cases like duplicate operations

The implementation satisfies all the ISO/IEC 25010 requirements for functional suitability, performance efficiency, compatibility, usability, reliability, security, maintainability, and portability.