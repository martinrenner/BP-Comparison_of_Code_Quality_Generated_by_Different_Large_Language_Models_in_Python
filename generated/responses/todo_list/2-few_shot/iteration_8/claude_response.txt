# Todo List Application

I'll create a console-based todo list application that meets the ISO/IEC 25010 quality requirements. The implementation will focus on functionality, maintainability, and usability while ensuring proper error handling and data management.

```python
class TaskManager:
    """
    A task management system that allows users to create, manipulate, and track tasks.
    
    This class implements a complete task management interface with features for adding,
    removing, searching, and managing task completion status.
    """
    
    def __init__(self):
        """Initialize the TaskManager with an empty task dictionary and ID counter."""
        self.tasks = {}  # Dictionary to store tasks: {task_id: {name, description, is_finished}}
        self.next_id = 1  # Counter for assigning unique IDs
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name of the task
            task_description (str): A detailed description of the task
            
        Returns:
            int: The unique ID assigned to the new task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validation
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string")
        
        # Create task with a unique ID
        task_id = self.next_id
        self.tasks[task_id] = {
            'name': task_name,
            'description': task_description,
            'is_finished': False
        }
        self.next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
        
        Args:
            task_id (int): The unique identifier of the task to remove
            
        Returns:
            bool: True if the task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> list[dict]:
        """
        Search for tasks that match the given search term in either name or description.
        
        Args:
            task_term (str): The search term to match against task names and descriptions
            
        Returns:
            list[dict]: A list of dictionaries containing matching task details
                        Each dictionary has keys: id, name, description, is_finished
                        
        Raises:
            ValueError: If search term is empty
        """
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
            
        results = []
        term = task_term.lower()  # Case-insensitive search
        
        for task_id, task in self.tasks.items():
            if term in task['name'].lower() or term in task['description'].lower():
                # Format the task in the required output format
                results.append({
                    'id': task_id,
                    'name': task['name'],
                    'description': task['description'],
                    'is_finished': task['is_finished']
                })
                
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique identifier of the task to mark as completed
            
        Returns:
            bool: True if the task was successfully marked as completed, False if the task doesn't exist
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        if task_id in self.tasks:
            self.tasks[task_id]['is_finished'] = True
            return True
        return False
    
    def get_all(self) -> list[dict]:
        """
        Retrieve all tasks stored in the task manager.
        
        Returns:
            list[dict]: A list of dictionaries containing all task details
                       Each dictionary has keys: id, name, description, is_finished
        """
        all_tasks = []
        
        for task_id, task in self.tasks.items():
            all_tasks.append({
                'id': task_id,
                'name': task['name'],
                'description': task['description'],
                'is_finished': task['is_finished']
            })
            
        return all_tasks
    
    def clear_all(self) -> bool:
        """
        Delete all tasks from the task manager.
        
        Returns:
            bool: True indicating successful clearing of all tasks
        """
        self.tasks = {}
        return True


def main():
    """Main function to demonstrate TaskManager functionality."""
    task_manager = TaskManager()
    
    print("Todo List Application")
    print("--------------------")
    
    # Sample usage
    try:
        # Adding tasks
        task1_id = task_manager.add("Complete project", "Finish the Python project by Friday")
        task2_id = task_manager.add("Buy groceries", "Get milk, eggs, and bread")
        print(f"Added task with ID: {task1_id}")
        print(f"Added task with ID: {task2_id}")
        
        # Get all tasks
        print("\nAll Tasks:")
        all_tasks = task_manager.get_all()
        for task in all_tasks:
            status = "✓" if task['is_finished'] else "⨯"
            print(f"[{status}] {task['id']}: {task['name']} - {task['description']}")
        
        # Mark a task as finished
        task_manager.finish(task1_id)
        print(f"\nMarked task {task1_id} as finished")
        
        # Search for tasks
        search_results = task_manager.search("project")
        print("\nSearch results for 'project':")
        for task in search_results:
            status = "✓" if task['is_finished'] else "⨯"
            print(f"[{status}] {task['id']}: {task['name']} - {task['description']}")
        
        # Remove a task
        task_manager.remove(task2_id)
        print(f"\nRemoved task {task2_id}")
        
        # Get all tasks after modifications
        print("\nRemaining Tasks:")
        all_tasks = task_manager.get_all()
        for task in all_tasks:
            status = "✓" if task['is_finished'] else "⨯"
            print(f"[{status}] {task['id']}: {task['name']} - {task['description']}")
        
        # Clear all tasks
        task_manager.clear_all()
        print("\nCleared all tasks")
        print(f"Tasks remaining: {len(task_manager.get_all())}")
        
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

This implementation fulfills all the specified requirements:

1. **Functionality Requirements**: All required functions (`add`, `remove`, `search`, `finish`, `get_all`, `clear_all`) are implemented.

2. **Implementation Requirements**:
   - Uses OOP with a `TaskManager` class
   - Implements the required interface with proper return values
   - Returns tasks in the required format
   - Implements validation with appropriate error handling
   - Uses an in-memory data structure (dictionary)
   - Optimizes lookups, insertions, and deletions with dictionary-based implementation

3. **Code Quality Requirements**:
   - Correctness: The code produces expected results
   - Performance: Uses dictionaries for O(1) lookups
   - Modularity: Code is organized into a class with clear responsibilities
   - Security: Validates inputs to prevent invalid operations
   - Testability: Methods are well-defined and can be easily tested
   - Readability: Includes comprehensive docstrings and comments

The implementation also includes a `main()` function that demonstrates all the features of the `TaskManager` class.