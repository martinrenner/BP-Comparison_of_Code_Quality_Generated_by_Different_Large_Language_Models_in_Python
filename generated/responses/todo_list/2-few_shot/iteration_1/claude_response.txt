I'll generate a high-quality Python code for a console-based todo list app that meets the ISO/IEC 25010 requirements. The application will follow object-oriented principles and implement all the requested functionality with proper error handling and optimizations.

```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Todo List Application

A console-based todo list manager that allows users to create, manage, and track tasks.
This implementation follows ISO/IEC 25010 quality standards.
"""

from typing import Dict, List, Optional, Any
import time


class TaskManager:
    """
    A class to manage todo tasks with functionality to add, remove, search,
    and manage task completion status.
    
    Attributes:
        _tasks (Dict[int, Dict]): Internal dictionary storing tasks with their IDs as keys
        _next_id (int): Counter for assigning unique IDs to new tasks
    """
    
    def __init__(self):
        """Initialize an empty task manager with a counter for task IDs."""
        self._tasks: Dict[int, Dict[str, Any]] = {}
        self._next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name of the task
            task_description (str): The detailed description of the task
            
        Returns:
            int: The unique ID assigned to the new task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Input validation
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string")
            
        # Create new task
        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False,
            "created_at": time.time()
        }
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
        
        Args:
            task_id (int): The unique ID of the task to remove
            
        Returns:
            bool: True if the task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check if task exists and remove it
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> List[Dict[str, Any]]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term (str): The search term to match against task names or descriptions
            
        Returns:
            List[Dict]: A list of task dictionaries that match the search term
            
        Raises:
            ValueError: If task_term is empty
        """
        # Input validation
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
            
        # Perform case-insensitive search
        search_term = task_term.lower()
        results = []
        
        for task in self._tasks.values():
            if (search_term in task["task_name"].lower() or 
                search_term in task["task_description"].lower()):
                # Return a copy to prevent modification of internal data
                results.append(self._format_task_output(task))
                
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The unique ID of the task to mark as completed
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        # Check if task exists and mark it as finished
        if task_id in self._tasks:
            # Only update if not already finished
            if not self._tasks[task_id]["is_finished"]:
                self._tasks[task_id]["is_finished"] = True
                self._tasks[task_id]["completed_at"] = time.time()
            return True
        return False
    
    def get_all(self) -> List[Dict[str, Any]]:
        """
        Get all tasks in the task manager.
        
        Returns:
            List[Dict]: A list of all task dictionaries
        """
        # Return a list of all tasks (as copies to prevent modification)
        return [self._format_task_output(task) for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the task manager.
        
        Returns:
            bool: True if the operation was successful
        """
        self._tasks.clear()
        return True
    
    def _format_task_output(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """
        Create a formatted copy of a task for external output.
        
        Args:
            task (Dict): The internal task dictionary
            
        Returns:
            Dict: A formatted copy with only the required fields
        """
        return {
            "id": task["id"],
            "task_name": task["task_name"],
            "task_description": task["task_description"],
            "is_finished": task["is_finished"]
        }


# Example client code to demonstrate usage
def main():
    """Example usage of the TaskManager class"""
    try:
        # Create a new task manager
        manager = TaskManager()
        
        # Add tasks
        task1_id = manager.add("Buy groceries", "Get milk, eggs, and bread")
        task2_id = manager.add("Call doctor", "Schedule annual checkup")
        task3_id = manager.add("Finish project", "Complete Python todo list app")
        
        print("All tasks:")
        for task in manager.get_all():
            print(f"ID: {task['id']}, Name: {task['task_name']}, " 
                  f"Finished: {task['is_finished']}")
        
        # Mark task as finished
        manager.finish(task1_id)
        print(f"\nMarked task {task1_id} as finished")
        
        # Search for tasks
        print("\nSearch results for 'project':")
        for task in manager.search("project"):
            print(f"ID: {task['id']}, Name: {task['task_name']}")
        
        # Remove a task
        manager.remove(task2_id)
        print(f"\nRemoved task {task2_id}")
        
        print("\nRemaining tasks:")
        for task in manager.get_all():
            status = "✓" if task["is_finished"] else "✗"
            print(f"[{status}] {task['id']}: {task['task_name']} - {task['task_description']}")
        
        # Clear all tasks
        manager.clear_all()
        print("\nCleared all tasks, remaining count:", len(manager.get_all()))
        
    except ValueError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main()
```

This implementation includes:

1. **Functionality Requirements:**
   - Implemented all required methods (add, remove, search, finish, get_all, clear_all)
   - Tasks are returned with all required information (id, name, description, completion status)

2. **Code Quality:**
   - **Correctness:** Methods produce expected results and include comprehensive validation
   - **Performance:** Used a dictionary for O(1) lookups by ID
   - **Modularity:** Methods have single responsibilities and clear interfaces
   - **Security:** Input validation protects against invalid inputs
   - **Testability:** Methods have clear inputs/outputs and minimal side effects
   - **Readability:** Used docstrings, type hints, and meaningful naming

3. **Error Handling:**
   - Validates input parameters and raises appropriate exceptions
   - Gracefully handles cases like non-existent tasks

4. **Documentation:**
   - Comprehensive module, class, and method docstrings
   - Type annotations for improved readability and tooling support

The implementation also includes a sample usage function to demonstrate how the TaskManager class can be used.