```python
class TaskManager:
    """
    A class to manage tasks for a console-based todo list application.

    Each task is represented as a dictionary containing:
      - id: A unique integer identifier.
      - task_name: Name of the task.
      - task_description: Description of the task.
      - is_finished: Boolean flag indicating task completion.
    """

    def __init__(self):
        """
        Initializes the TaskManager with an empty task repository and sets the initial task ID.
        """
        self.tasks = {}   # Internal storage for tasks: key (int) -> task dict
        self.next_id = 1  # Unique task ID generator

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the repository.

        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID assigned to the new task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task using its unique ID.

        Args:
            task_id (int): The ID of the task to remove.

        Returns:
            bool: True if the task exists and is removed; False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks where the task name or description contains the provided term.

        Args:
            task_term (str): The term to search for.

        Returns:
            list: A list of tasks (as dictionaries) that match the search term.

        Raises:
            ValueError: If task_term is an empty string.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term = task_term.lower()
        results = [
            task.copy() for task in self.tasks.values()
            if term in task['task_name'].lower() or term in task['task_description'].lower()
        ]
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a specific task as finished.

        Args:
            task_id (int): The ID of the task to mark as finished.

        Returns:
            bool: True if the task exists and is marked as finished; False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]['is_finished'] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all tasks.

        Returns:
            list: A list of all tasks (as dictionaries) stored in the repository.
        """
        # Sorting by task ID for consistent output
        return [self.tasks[tid].copy() for tid in sorted(self.tasks)]

    def clear_all(self) -> bool:
        """
        Clears all tasks from the repository.

        Returns:
            bool: True after successfully clearing all tasks.
        """
        self.tasks.clear()
        return True


def display_task(task: dict) -> None:
    """
    Displays a single task in a formatted manner.

    Args:
        task (dict): The task dictionary to display.
    """
    status = "Finished" if task['is_finished'] else "Pending"
    print(
        f"ID: {task['id']} | Name: {task['task_name']} | "
        f"Description: {task['task_description']} | Status: {status}"
    )


def main():
    """
    Runs the console-based todo list application.
    Presents a menu and handles user interactions.
    """
    manager = TaskManager()

    menu = (
        "\n--- Todo List Manager ---\n"
        "1. Add Task\n"
        "2. Remove Task\n"
        "3. Search Tasks\n"
        "4. Finish Task\n"
        "5. Display All Tasks\n"
        "6. Clear All Tasks\n"
        "0. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice: ").strip()

        try:
            if choice == '1':
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                task_id = manager.add(task_name, task_description)
                print(f"Task added with ID: {task_id}")

            elif choice == '2':
                id_input = input("Enter task ID to remove: ").strip()
                if not id_input.isdigit():
                    print("Invalid input. Please enter a positive integer for task ID.")
                    continue
                task_id = int(id_input)
                if manager.remove(task_id):
                    print("Task removed successfully.")
                else:
                    print("Task ID not found.")

            elif choice == '3':
                term = input("Enter search term: ").strip()
                results = manager.search(term)
                if results:
                    print("Search Results:")
                    for task in results:
                        display_task(task)
                else:
                    print("No tasks match the search criteria.")

            elif choice == '4':
                id_input = input("Enter task ID to mark as finished: ").strip()
                if not id_input.isdigit():
                    print("Invalid input. Please enter a positive integer for task ID.")
                    continue
                task_id = int(id_input)
                if manager.finish(task_id):
                    print("Task marked as finished.")
                else:
                    print("Task ID not found.")

            elif choice == '5':
                all_tasks = manager.get_all()
                if all_tasks:
                    print("All Tasks:")
                    for task in all_tasks:
                        display_task(task)
                else:
                    print("No tasks available.")

            elif choice == '6':
                confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirm == 'yes':
                    manager.clear_all()
                    print("All tasks have been cleared.")
                else:
                    print("Clear operation cancelled.")

            elif choice == '0':
                print("Exiting the Todo List Manager. Goodbye!")
                break

            else:
                print("Invalid choice. Please select a valid option.")

        except ValueError as ve:
            print(f"Error: {ve}")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")


if __name__ == '__main__':
    main()
```