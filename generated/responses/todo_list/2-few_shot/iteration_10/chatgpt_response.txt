```python
#!/usr/bin/env python3
"""
Console-Based Todo List Application

This application implements a todo list manager using an object-oriented approach.
It meets the requirements of ISO/IEC 25010 by ensuring correctness, performance, 
modularity, security, testability, and readability.

The TaskManager class supports the following operations:
    - add(task_name: str, task_description: str) -> int
    - remove(task_id: int) -> bool
    - search(task_term: str) -> list[dict]
    - finish(task_id: int) -> bool
    - get_all() -> list[dict]
    - clear_all() -> bool

Each task is represented as a dictionary with the following keys:
    - id: unique task identifier (int)
    - task_name: name of the task (str)
    - task_description: description of the task (str)
    - is_finished: status of the task (bool)
    
The console-based interface provides a menu for user interactions.
"""

class TaskManager:
    def __init__(self):
        """
        Initializes a new instance of TaskManager with an in-memory datastore.
        """
        self.tasks = {}        # Dictionary to store tasks by their unique ID.
        self.next_id = 1       # Auto-increment task ID counter.

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the system.

        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID of the newly added task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.

        Args:
            task_id (int): The ID of the task to remove.

        Returns:
            bool: True if the task was successfully removed, otherwise False.

        Raises:
            ValueError: If task_id is negative.
        """
        if task_id < 0:
            raise ValueError("Task ID must be a non-negative integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks that include the task_term in their name or description (case-insensitive).

        Args:
            task_term (str): The term to search for.

        Returns:
            list[dict]: A list of tasks (as dictionaries) that match the search term.

        Raises:
            ValueError: If task_term is an empty string.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term = task_term.lower()
        results = []
        for task in self.tasks.values():
            if term in task["task_name"].lower() or term in task["task_description"].lower():
                results.append(task.copy())
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a given task as finished.

        Args:
            task_id (int): The ID of the task to mark as finished.

        Returns:
            bool: True if the operation was successful, otherwise False.

        Raises:
            ValueError: If task_id is negative.
        """
        if task_id < 0:
            raise ValueError("Task ID must be a non-negative integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all tasks with full details.

        Returns:
            list[dict]: A list of all tasks represented as dictionaries.
        """
        # Return a sorted list of tasks based on their ID for consistency.
        return [self.tasks[tid].copy() for tid in sorted(self.tasks)]

    def clear_all(self) -> bool:
        """
        Clears all tasks from the system.

        Returns:
            bool: True after successfully clearing all tasks.
        """
        self.tasks.clear()
        return True


def display_task(task: dict) -> None:
    """
    Displays a single task in a formatted style.

    Args:
        task (dict): The task information to display.
    """
    status = "Finished" if task.get("is_finished") else "Pending"
    print(f"ID: {task.get('id')} | Name: {task.get('task_name')} | Description: {task.get('task_description')} | Status: {status}")


def main():
    """
    The main loop for the console-based todo list application.
    """
    manager = TaskManager()
    menu = (
        "\nTodo List App Menu:\n"
        "1. Add a task\n"
        "2. Remove a task\n"
        "3. Search tasks\n"
        "4. Mark task as finished\n"
        "5. Get all tasks\n"
        "6. Clear all tasks\n"
        "7. Exit\n"
    )

    while True:
        print(menu)
        choice = input("Enter your choice (1-7): ").strip()

        if choice == '1':
            try:
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = manager.add(name, description)
                print(f"Task added successfully with ID {task_id}.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == '2':
            try:
                task_id_input = input("Enter task ID to remove: ").strip()
                if not task_id_input.isdigit():
                    raise ValueError("Task ID must be a non-negative integer.")
                task_id = int(task_id_input)
                if manager.remove(task_id):
                    print(f"Task {task_id} removed successfully.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == '3':
            try:
                term = input("Enter search term: ").strip()
                results = manager.search(term)
                if results:
                    print("Matching tasks:")
                    for task in results:
                        display_task(task)
                else:
                    print("No tasks matched your search.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == '4':
            try:
                task_id_input = input("Enter task ID to mark as finished: ").strip()
                if not task_id_input.isdigit():
                    raise ValueError("Task ID must be a non-negative integer.")
                task_id = int(task_id_input)
                if manager.finish(task_id):
                    print(f"Task {task_id} marked as finished.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == '5':
            tasks = manager.get_all()
            if tasks:
                print("All tasks:")
                for task in tasks:
                    display_task(task)
            else:
                print("No tasks available.")

        elif choice == '6':
            confirmation = input("Are you sure you want to clear all tasks? (y/n): ").strip().lower()
            if confirmation == 'y':
                manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Clear operation cancelled.")

        elif choice == '7':
            print("Exiting the Todo List App. Goodbye!")
            break

        else:
            print("Invalid choice. Please choose a valid option (1-7).")


if __name__ == '__main__':
    main()
```