```python
#!/usr/bin/env python3
"""
Console-based Todo List Application adhering to ISO/IEC 25010.

This module provides a TaskManager class that offers functionality to
add, remove, search, finish, retrieve, and clear todo list tasks.
It also provides a console interface for user interaction.
"""


class TaskManager:
    """
    TaskManager manages todo tasks with support for basic operations
    such as add, remove, search, finish, get_all, and clear_all.
    """

    def __init__(self) -> None:
        """
        Initializes a new TaskManager instance with an empty task storage.
        """
        self.tasks: dict[int, dict] = {}
        self.next_id: int = 1  # Auto-increment task ID

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with a name and description.

        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID of the newly added task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name must be a non-empty string.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description must be a non-empty string.")

        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task based on its unique ID.

        Args:
            task_id (int): The unique ID of the task to remove.

        Returns:
            bool: True if the removal was successful, False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list[dict]:
        """
        Searches for tasks that contain the provided term in their name or description.

        Args:
            task_term (str): The term to search for.

        Returns:
            list[dict]: A list of tasks matching the search term.

        Raises:
            ValueError: If task_term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term must be a non-empty string.")

        term = task_term.lower().strip()
        matching_tasks = [
            task for task in self.tasks.values()
            if term in task["task_name"].lower() or term in task["task_description"].lower()
        ]
        return matching_tasks

    def finish(self, task_id: int) -> bool:
        """
        Marks the task with the given ID as finished.

        Args:
            task_id (int): The unique ID of the task to mark as finished.

        Returns:
            bool: True if the operation was successful, False otherwise.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list[dict]:
        """
        Retrieves all tasks.

        Returns:
            list[dict]: A list of all tasks with their details.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Deletes all tasks from the manager.

        Returns:
            bool: True indicating that all tasks have been cleared.
        """
        self.tasks.clear()
        self.next_id = 1  # Reset task ID counter
        return True


def print_task(task: dict) -> None:
    """
    Prints a single task in a formatted manner.

    Args:
        task (dict): The task dictionary to display.
    """
    status = "Finished" if task["is_finished"] else "Pending"
    print(f"[ID: {task['id']}] {task['task_name']} - {task['task_description']} ({status})")


def display_all_tasks(manager: TaskManager) -> None:
    """
    Displays all existing tasks.

    Args:
        manager (TaskManager): The TaskManager instance.
    """
    tasks = manager.get_all()
    if not tasks:
        print("No tasks available.")
    else:
        for task in tasks:
            print_task(task)


def main() -> None:
    """
    Main function to run the console-based todo list application.
    """
    manager = TaskManager()
    print("Welcome to the Todo List App!")
    print("Available commands: add, remove, search, finish, get_all, clear_all, exit")

    while True:
        command = input("\nEnter command: ").strip().lower()
        try:
            if command == "add":
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")

            elif command == "remove":
                id_str = input("Enter task ID to remove: ").strip()
                if not id_str.isdigit():
                    print("Invalid input: Task ID must be a positive integer.")
                    continue
                task_id = int(id_str)
                if manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.")
                else:
                    print(f"No task found with ID {task_id}.")

            elif command == "search":
                term = input("Enter search term: ").strip()
                results = manager.search(term)
                if not results:
                    print("No matching tasks found.")
                else:
                    print("Matching tasks:")
                    for task in results:
                        print_task(task)

            elif command == "finish":
                id_str = input("Enter task ID to mark as finished: ").strip()
                if not id_str.isdigit():
                    print("Invalid input: Task ID must be a positive integer.")
                    continue
                task_id = int(id_str)
                if manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"No task found with ID {task_id}.")

            elif command == "get_all":
                print("All tasks:")
                display_all_tasks(manager)

            elif command == "clear_all":
                confirmation = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirmation == "yes":
                    manager.clear_all()
                    print("All tasks have been cleared.")
                else:
                    print("Clear operation cancelled.")

            elif command == "exit":
                print("Exiting the Todo List App. Goodbye!")
                break

            else:
                print("Unknown command. Please use one of the following: add, remove, search, finish, get_all, clear_all, exit")

        except ValueError as ve:
            print(f"Input Error: {ve}")
        except Exception as e:
            print(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
```