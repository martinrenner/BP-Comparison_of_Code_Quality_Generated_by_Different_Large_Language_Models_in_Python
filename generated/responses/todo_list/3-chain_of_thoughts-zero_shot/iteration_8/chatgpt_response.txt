```python
#!/usr/bin/env python3
"""
Console-based Todo List App
This application implements a task manager that meets the ISO/IEC 25010 quality requirements.
It provides functionalities to add, remove, search, mark tasks as finished, retrieve all tasks,
and clear all tasks, all implemented using an object-oriented design.

Author: OpenAI ChatGPT
Date: 2023-10
"""

class TaskManager:
    """
    TaskManager manages tasks with functionalities to add, remove, search, finish, list, and clear them.
    Tasks are stored in an in-memory dictionary with auto-incremented unique IDs.
    Each task is represented as a dictionary containing:
      - id: int
      - task_name: str
      - task_description: str
      - is_finished: bool
    """

    def __init__(self):
        """
        Initializes an empty TaskManager.
        """
        self._tasks = {}  # Internal storage: key = task_id, value = task details dictionary.
        self._next_id = 1  # Auto-incrementing task ID.

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with the given name and description.
        Raises:
            ValueError: If task_name or task_description is an empty string.
        Returns:
            int: The unique ID assigned to the new task.
        """
        if not task_name.strip() or not task_description.strip():
            raise ValueError("Task name and description cannot be empty.")

        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self._next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes the task with the given ID from the task manager.
        Args:
            task_id (int): The unique identifier of the task.
        Raises:
            ValueError: If task_id is not a positive integer.
        Returns:
            bool: True if the task was successfully removed, False if the task does not exist.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        else:
            return False

    def search(self, task_term: str) -> list:
        """
        Searches for tasks whose name or description contains the search term (case-insensitive).
        Args:
            task_term (str): The term to search for in tasks.
        Raises:
            ValueError: If the search term is an empty string.
        Returns:
            list: A list of task dictionaries that match the search criteria.
        """
        if not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.strip().lower()
        result = []
        for task in self._tasks.values():
            if term_lower in task["task_name"].lower() or term_lower in task["task_description"].lower():
                # Append a copy to prevent accidental external modifications.
                result.append(task.copy())
        return result

    def finish(self, task_id: int) -> bool:
        """
        Marks the task with the given ID as finished.
        Args:
            task_id (int): The unique identifier of the task.
        Raises:
            ValueError: If task_id is not a positive integer.
        Returns:
            bool: True if the task status was updated successfully, False if the task does not exist.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self._tasks:
            self._tasks[task_id]["is_finished"] = True
            return True
        else:
            return False

    def get_all(self) -> list:
        """
        Retrieves all tasks with their details.
        Returns:
            list: A list of all task dictionaries.
        """
        # Return copies of tasks to prevent external modifications.
        return [task.copy() for task in self._tasks.values()]

    def clear_all(self) -> bool:
        """
        Clears all tasks in the task manager.
        Returns:
            bool: True after successfully clearing all tasks.
        """
        self._tasks.clear()
        # Optionally reset the task id counter if desired.
        self._next_id = 1
        return True


def print_menu():
    """
    Prints the command menu for the todo list application.
    """
    menu = """
==================== Todo List App ====================
1. Add a new task
2. Remove a task by ID
3. Search tasks by term
4. Mark a task as finished
5. Get all tasks
6. Clear all tasks
7. Exit
========================================================
"""
    print(menu)


def main():
    """
    Main function that runs the console-based todo list app.
    It interacts with the user to perform different operations on tasks.
    """
    manager = TaskManager()

    while True:
        print_menu()
        choice = input("Enter your choice (1-7): ").strip()

        if choice == "1":
            # Add a new task
            try:
                task_name = input("Enter task name: ").strip()
                task_description = input("Enter task description: ").strip()
                task_id = manager.add(task_name, task_description)
                print(f"Task added successfully with ID: {task_id}\n")
            except ValueError as ve:
                print(f"Error: {ve}\n")

        elif choice == "2":
            # Remove a task
            try:
                task_id_str = input("Enter task ID to remove: ").strip()
                task_id = int(task_id_str)
                if manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.\n")
                else:
                    print(f"No task found with ID {task_id}.\n")
            except ValueError as ve:
                print(f"Invalid input: {ve}\n")
            except Exception as e:
                print(f"Unexpected error: {e}\n")

        elif choice == "3":
            # Search tasks
            try:
                search_term = input("Enter search term: ").strip()
                results = manager.search(search_term)
                if results:
                    print("Matching tasks:")
                    for task in results:
                        print(f"(ID: {task['id']}, Name: {task['task_name']}, Description: {task['task_description']}, Finished: {task['is_finished']})")
                else:
                    print("No matching tasks found.")
                print()
            except ValueError as ve:
                print(f"Error: {ve}\n")

        elif choice == "4":
            # Mark a task as finished
            try:
                task_id_str = input("Enter task ID to mark as finished: ").strip()
                task_id = int(task_id_str)
                if manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished successfully.\n")
                else:
                    print(f"No task found with ID {task_id}.\n")
            except ValueError as ve:
                print(f"Invalid input: {ve}\n")

        elif choice == "5":
            # Get all tasks
            tasks = manager.get_all()
            if tasks:
                print("All tasks:")
                for task in tasks:
                    print(f"(ID: {task['id']}, Name: {task['task_name']}, Description: {task['task_description']}, Finished: {task['is_finished']})")
            else:
                print("No tasks available.")
            print()

        elif choice == "6":
            # Clear all tasks
            confirm = input("Are you sure you want to clear all tasks? (y/n): ").strip().lower()
            if confirm == "y":
                manager.clear_all()
                print("All tasks have been cleared.\n")
            else:
                print("Clear all operation cancelled.\n")

        elif choice == "7":
            # Exit the application
            print("Exiting Todo List App. Goodbye!")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 7.\n")


if __name__ == '__main__':
    main()
```