```python
"""
Console-based Todo List App

This application implements a Todo List manager following the ISO/IEC 25010 quality requirements.
It provides functionality to add, remove, search, finish tasks, get all tasks, and clear all tasks.
The implementation uses object-oriented programming with validations, efficient in-memory storage,
and clear error handling to ensure a high level of correctness, performance, modularity, security,
and testability.

Usage:
    Run this script and follow the on-screen menu prompts to interact with your todo list.
"""

class TaskManager:
    """
    Manages todo tasks with the following functionalities:
        - add(task_name: str, task_description: str) -> int
        - remove(task_id: int) -> bool
        - search(task_term: str) -> list[dict]
        - finish(task_id: int) -> bool
        - get_all() -> list[dict]
        - clear_all() -> bool
        
    Each task is stored as a dictionary with the keys:
        (id, task_name, task_description, is_finished)
    """

    def __init__(self):
        # Dictionary to store tasks keyed by their unique IDs.
        self.tasks = {}
        # Counter to generate unique task IDs.
        self.next_id = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task with the given name and description.
        
        :param task_name: The name of the task (must be a non-empty string).
        :param task_description: The description of the task (must be a non-empty string).
        :return: The unique ID of the added task.
        :raises ValueError: If task_name or task_description is empty.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name must be a non-empty string.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description must be a non-empty string.")

        # Assign a unique ID to the task.
        task_id = self.next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False,
        }
        self.next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
        
        :param task_id: The unique ID of the task to be removed.
        :return: True if the task was successfully removed, False if task_id not found.
        :raises ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")
        if task_id in self.tasks:
            del self.tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> list:
        """
        Searches tasks by checking if the task name or description contains the search term.
        
        :param task_term: The string to search for (must be non-empty).
        :return: A list of task dictionaries that match the search term.
        :raises ValueError: If task_term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term cannot be an empty string.")
        task_term = task_term.strip().lower()
        results = [
            task for task in self.tasks.values()
            if task_term in task["task_name"].lower() or task_term in task["task_description"].lower()
        ]
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished by its unique ID.
        
        :param task_id: The unique ID of the task to be marked as finished.
        :return: True if the task was found and marked as finished, False otherwise.
        :raises ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")
        if task_id in self.tasks:
            self.tasks[task_id]["is_finished"] = True
            return True
        return False

    def get_all(self) -> list:
        """
        Retrieves all tasks.
        
        :return: A list of all task dictionaries sorted by ID.
        """
        return [self.tasks[task_id] for task_id in sorted(self.tasks.keys())]

    def clear_all(self) -> bool:
        """
        Clears all tasks from the manager.
        
        :return: True after all tasks are deleted.
        """
        self.tasks.clear()
        return True

def display_task(task: dict):
    """
    Displays a single task in a human-readable format.
    
    :param task: A dictionary representing a task.
    """
    status = "Finished" if task["is_finished"] else "Pending"
    print(f"ID: {task['id']} | Name: {task['task_name']} | Description: {task['task_description']} | Status: {status}")

def main():
    """
    Main interactive loop for the console-based Todo List App.
    Provides a menu to interact with tasks: add, remove, search, finish, list, and clear tasks.
    """
    manager = TaskManager()
    print("Welcome to the Console-based Todo List App!")
    print("===========================================")

    while True:
        print("\nPlease choose an option:")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Search Tasks")
        print("4. Mark Task as Finished")
        print("5. List All Tasks")
        print("6. Clear All Tasks")
        print("7. Exit")

        choice = input("Enter your choice (1-7): ").strip()

        if choice == "1":
            # Add Task
            try:
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as e:
                print(f"Error adding task: {e}")

        elif choice == "2":
            # Remove Task
            try:
                task_id_input = input("Enter task ID to remove: ").strip()
                task_id = int(task_id_input)
                if manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.")
                else:
                    print(f"Task with ID {task_id} not found.")
            except ValueError as e:
                print(f"Invalid input for task removal: {e}")

        elif choice == "3":
            # Search Tasks
            try:
                search_term = input("Enter search term: ").strip()
                results = manager.search(search_term)
                if results:
                    print(f"Found {len(results)} matching task(s):")
                    for task in results:
                        display_task(task)
                else:
                    print("No matching tasks found.")
            except ValueError as e:
                print(f"Error in search: {e}")

        elif choice == "4":
            # Mark Task as Finished
            try:
                task_id_input = input("Enter task ID to mark as finished: ").strip()
                task_id = int(task_id_input)
                if manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"Task with ID {task_id} not found.")
            except ValueError as e:
                print(f"Invalid input for finishing task: {e}")

        elif choice == "5":
            # List All Tasks
            tasks = manager.get_all()
            if tasks:
                print("Listing all tasks:")
                for task in tasks:
                    display_task(task)
            else:
                print("No tasks available.")

        elif choice == "6":
            # Clear All Tasks
            confirm = input("Are you sure you want to clear all tasks? (y/n): ").strip().lower()
            if confirm == "y":
                manager.clear_all()
                print("All tasks have been cleared.")
            else:
                print("Clear all tasks cancelled.")

        elif choice == "7":
            # Exit Application
            print("Exiting the application. Goodbye!")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 7.")

if __name__ == "__main__":
    main()
```