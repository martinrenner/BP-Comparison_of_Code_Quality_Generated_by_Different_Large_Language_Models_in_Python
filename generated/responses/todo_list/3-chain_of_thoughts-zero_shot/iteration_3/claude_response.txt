# Todo List Application

I'll create a console-based todo list app that meets the ISO/IEC 25010 requirements with a focus on functionality, maintainability, and performance.

```python
"""
Todo List Application

A console-based task management system implementing the ISO/IEC 25010 quality standards.
Features include adding, removing, searching, completing tasks and more with proper
validation and error handling.
"""

from datetime import datetime
from typing import Dict, List, Optional, Tuple, Union
import uuid


class TaskManager:
    """
    Task Management system that handles creation, retrieval, modification,
    and deletion of tasks with efficient data structures.
    
    Implements a complete interface for managing a todo list with proper
    validation and error handling.
    """
    
    def __init__(self):
        """Initialize the TaskManager with empty task storage."""
        # Main task storage using dictionary for O(1) lookups by ID
        self._tasks: Dict[int, Dict] = {}
        # Track the next available ID for task creation
        self._next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name: The name/title of the task
            task_description: A detailed description of the task
            
        Returns:
            int: The unique ID of the newly created task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Input validation
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string")
        
        # Create a new task with unique ID
        task_id = self._next_id
        self._next_id += 1
        
        # Store the task with all required details
        self._tasks[task_id] = {
            'id': task_id,
            'task_name': task_name,
            'task_description': task_description,
            'is_finished': False,
            'created_at': datetime.now(),
            'completed_at': None
        }
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The unique identifier of the task to remove
            
        Returns:
            bool: True if successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
            KeyError: If no task exists with the given ID
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists
        if task_id not in self._tasks:
            raise KeyError(f"No task found with ID: {task_id}")
        
        # Remove the task
        del self._tasks[task_id]
        return True
    
    def search(self, task_term: str) -> List[Dict]:
        """
        Search for tasks by name or description.
        
        Args:
            task_term: The search term to look for in task names and descriptions
            
        Returns:
            list[dict]: A list of matching tasks with their details
            
        Raises:
            ValueError: If task_term is empty or not a string
        """
        # Input validation
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
        
        # Convert search term to lowercase for case-insensitive search
        search_term = task_term.lower()
        
        # Find matching tasks
        results = []
        for task in self._tasks.values():
            if (search_term in task['task_name'].lower() or 
                search_term in task['task_description'].lower()):
                results.append(self._format_task(task))
        
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id: The unique identifier of the task to mark as completed
            
        Returns:
            bool: True if successfully marked as completed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
            KeyError: If no task exists with the given ID
        """
        # Input validation
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists
        if task_id not in self._tasks:
            raise KeyError(f"No task found with ID: {task_id}")
        
        # Check if already finished
        if self._tasks[task_id]['is_finished']:
            return False  # Task already completed
        
        # Mark task as finished and record completion time
        self._tasks[task_id]['is_finished'] = True
        self._tasks[task_id]['completed_at'] = datetime.now()
        
        return True
    
    def get_all(self) -> List[Dict]:
        """
        Retrieve all tasks.
        
        Returns:
            list[dict]: A list of all tasks with their details
        """
        return [self._format_task(task) for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Delete all tasks.
        
        Returns:
            bool: True if successfully cleared all tasks
        """
        self._tasks.clear()
        return True
    
    def _format_task(self, task: Dict) -> Dict:
        """
        Helper method to format task data for external consumption.
        
        Args:
            task: The full internal task dictionary
            
        Returns:
            dict: A formatted task dictionary with required fields
        """
        return {
            'id': task['id'],
            'task_name': task['task_name'],
            'task_description': task['task_description'],
            'is_finished': task['is_finished']
        }


def main():
    """
    Main function to demonstrate the TaskManager functionality.
    """
    task_manager = TaskManager()
    
    print("Todo List Application")
    print("=====================")
    
    # Adding sample tasks
    try:
        task1_id = task_manager.add("Complete project", "Finish the Python project by Friday")
        task2_id = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
        print(f"Added two tasks with IDs: {task1_id}, {task2_id}")
    except ValueError as e:
        print(f"Error adding tasks: {e}")
    
    # Display all tasks
    print("\nAll Tasks:")
    for task in task_manager.get_all():
        status = "Completed" if task['is_finished'] else "Pending"
        print(f"ID: {task['id']} | {task['task_name']} | Status: {status}")
    
    # Marking a task as complete
    try:
        task_manager.finish(task1_id)
        print(f"\nMarked task {task1_id} as completed")
    except (ValueError, KeyError) as e:
        print(f"Error completing task: {e}")
    
    # Searching for tasks
    try:
        search_results = task_manager.search("groceries")
        print("\nSearch Results for 'groceries':")
        for task in search_results:
            status = "Completed" if task['is_finished'] else "Pending"
            print(f"ID: {task['id']} | {task['task_name']} | Status: {status}")
    except ValueError as e:
        print(f"Error searching tasks: {e}")
    
    # Removing a task
    try:
        task_manager.remove(task2_id)
        print(f"\nRemoved task {task2_id}")
    except (ValueError, KeyError) as e:
        print(f"Error removing task: {e}")
    
    # Display all tasks after modifications
    print("\nRemaining Tasks:")
    for task in task_manager.get_all():
        status = "Completed" if task['is_finished'] else "Pending"
        print(f"ID: {task['id']} | {task['task_name']} | Status: {status}")
    
    # Clear all tasks
    task_manager.clear_all()
    print("\nCleared all tasks")
    print(f"Tasks remaining: {len(task_manager.get_all())}")


if __name__ == "__main__":
    main()
```

## Key Features of the Implementation

1. **Object-Oriented Design**: Implemented a `TaskManager` class with a clear interface
2. **Efficient Data Storage**: Using dictionaries for O(1) lookups by ID
3. **Comprehensive Validation**: Input validation with appropriate error types
4. **Complete Error Handling**: Using exceptions for proper error management
5. **Documentation**: Detailed docstrings and comments throughout
6. **Type Annotations**: Used typing hints for better code clarity and IDE support
7. **Timestamps**: Added creation and completion timestamps for future feature expansion
8. **Demo Function**: Included a main() function to demonstrate usage

The implementation follows the ISO/IEC 25010 quality attributes including:
- Functionality: All required functions implemented with proper signatures
- Performance: Efficient data structures for optimal lookups
- Usability: Clear interface and error messages
- Reliability: Proper error handling and validation
- Maintainability: Clean, modular, and well-documented code
- Security: Input validation to protect against invalid data