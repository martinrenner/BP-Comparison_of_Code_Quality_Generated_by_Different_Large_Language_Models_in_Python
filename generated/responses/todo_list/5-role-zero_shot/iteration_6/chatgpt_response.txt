```python
"""
Console-based To-Do List Application

This module implements a TaskManager class that manages tasks using in-memory storage.
Each task is represented as a dictionary with the following keys:
    - id: Unique task identifier (int)
    - task_name: Short description of the task (str)
    - task_description: Detailed description of the task (str)
    - is_finished: Boolean flag indicating if the task is completed (bool)

The TaskManager class implements the following interface:
    - add(task_name: str, task_description: str) -> int
    - remove(task_id: int) -> bool
    - search(task_term: str) -> list[dict]
    - finish(task_id: int) -> bool
    - get_all() -> list[dict]
    - clear_all() -> bool

A simple command-line interface is provided in the main function.
"""

from typing import List, Dict


class TaskManager:
    """
    Manages tasks with operations to add, remove, search, finish, list, and clear tasks.
    """

    def __init__(self) -> None:
        """
        Initializes a new instance of TaskManager with an empty task repository.
        """
        self._tasks: Dict[int, Dict] = {}
        self._next_id: int = 1

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the manager.

        Args:
            task_name (str): The short name/title of the task.
            task_description (str): The detailed description of the task.

        Returns:
            int: The unique ID assigned to the new task.

        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not isinstance(task_name, str) or not task_name.strip():
            raise ValueError("Task name cannot be empty.")
        if not isinstance(task_description, str) or not task_description.strip():
            raise ValueError("Task description cannot be empty.")

        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False,
        }
        self._next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.

        Args:
            task_id (int): The ID of the task to remove.

        Returns:
            bool: True if the task was successfully removed, False if the task does not exist.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False

    def search(self, task_term: str) -> List[Dict]:
        """
        Searches for tasks whose name or description contains the given search term.

        Args:
            task_term (str): The term to search for.

        Returns:
            list[dict]: A list of tasks matching the search term.

        Raises:
            ValueError: If task_term is an empty string.
        """
        if not isinstance(task_term, str) or not task_term.strip():
            raise ValueError("Search term cannot be empty.")

        term_lower = task_term.lower()
        results = []
        for task in self._tasks.values():
            if term_lower in task["task_name"].lower() or term_lower in task["task_description"].lower():
                results.append(task)
        return results

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.

        Args:
            task_id (int): The ID of the task to mark as finished.

        Returns:
            bool: True if the task was successfully marked as finished, False if the task does not exist.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer.")
        if task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")

        task = self._tasks.get(task_id)
        if task is None:
            return False

        task["is_finished"] = True
        return True

    def get_all(self) -> List[Dict]:
        """
        Retrieves all tasks.

        Returns:
            list[dict]: A list of all tasks, each represented as a dictionary.
        """
        # Optionally, sort tasks by ID for consistent ordering.
        return [self._tasks[task_id] for task_id in sorted(self._tasks.keys())]

    def clear_all(self) -> bool:
        """
        Clears all tasks from the manager.

        Returns:
            bool: True upon successful clearance.
        """
        self._tasks.clear()
        # Reset the task ID counter to 1 upon clearing.
        self._next_id = 1
        return True


def display_task(task: Dict) -> None:
    """
    Displays a task's details in a formatted way.

    Args:
        task (dict): The task dictionary to display.
    """
    status = "Completed" if task["is_finished"] else "Pending"
    print(f'ID: {task["id"]} | Name: {task["task_name"]} | Description: {task["task_description"]} | Status: {status}')


def main() -> None:
    """
    Entry point for the console-based to-do list application.
    """
    task_mgr = TaskManager()

    menu = """
Please choose an option:
1. Add a task
2. Remove a task
3. Search tasks
4. Mark a task as finished
5. Display all tasks
6. Clear all tasks
7. Exit
"""

    while True:
        print(menu)
        choice = input("Enter your choice (1-7): ").strip()

        try:
            if choice == "1":
                # Add a task
                name = input("Enter task name: ").strip()
                description = input("Enter task description: ").strip()
                task_id = task_mgr.add(name, description)
                print(f"Task added with ID: {task_id}\n")

            elif choice == "2":
                # Remove a task
                task_id_input = input("Enter the task ID to remove: ").strip()
                task_id = int(task_id_input)
                if task_mgr.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.\n")
                else:
                    print(f"Task with ID {task_id} does not exist.\n")

            elif choice == "3":
                # Search tasks
                term = input("Enter a term to search in tasks: ").strip()
                results = task_mgr.search(term)
                if results:
                    print("Search Results:")
                    for task in results:
                        display_task(task)
                    print()
                else:
                    print("No matching tasks found.\n")

            elif choice == "4":
                # Finish a task
                task_id_input = input("Enter the task ID to mark as finished: ").strip()
                task_id = int(task_id_input)
                if task_mgr.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.\n")
                else:
                    print(f"Task with ID {task_id} does not exist.\n")

            elif choice == "5":
                # Display all tasks
                tasks = task_mgr.get_all()
                if tasks:
                    print("All Tasks:")
                    for task in tasks:
                        display_task(task)
                    print()
                else:
                    print("No tasks available.\n")

            elif choice == "6":
                # Clear all tasks
                confirm = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
                if confirm == "yes":
                    task_mgr.clear_all()
                    print("All tasks have been cleared.\n")
                else:
                    print("Clear all cancelled.\n")

            elif choice == "7":
                # Exit
                print("Exiting the application. Goodbye!")
                break

            else:
                print("Invalid choice. Please select a number between 1 and 7.\n")

        except ValueError as ve:
            print(f"Input Error: {ve}\n")
        except Exception as e:
            print(f"An error occurred: {e}\n")


if __name__ == "__main__":
    main()
```