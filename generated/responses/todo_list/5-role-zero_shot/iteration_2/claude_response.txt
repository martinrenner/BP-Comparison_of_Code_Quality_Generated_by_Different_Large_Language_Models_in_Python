# Python To-Do List Application

I'll create a clean, modular, and efficient to-do list application following OOP principles and the specified requirements. The implementation will focus on maintainability, error handling, and performance.

```python
class TaskManager:
    """
    A class that manages a to-do list with the ability to add, remove, search, finish,
    retrieve all, and clear all tasks.
    
    Tasks are stored in memory with unique IDs and contain name, description, and completion status.
    """
    
    def __init__(self):
        """Initialize the TaskManager with empty task storage and ID counter."""
        self._tasks = {}  # Dictionary for efficient lookup, insertion, and deletion
        self._next_id = 1  # Counter for generating unique task IDs
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task list.
        
        Args:
            task_name: The name of the task (must be non-empty)
            task_description: The description of the task (must be non-empty)
            
        Returns:
            int: The unique ID of the newly added task
            
        Raises:
            ValueError: If task_name or task_description is empty
        """
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty and must be a string")
        
        if not task_description or not isinstance(task_description, str):
            raise ValueError("Task description cannot be empty and must be a string")
        
        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The ID of the task to remove
            
        Returns:
            bool: True if the task was successfully removed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        
        return False
    
    def search(self, task_term: str) -> list[dict]:
        """
        Search for tasks containing the given term in name or description.
        
        Args:
            task_term: The term to search for
            
        Returns:
            list[dict]: A list of tasks matching the search term
            
        Raises:
            ValueError: If task_term is empty or not a string
        """
        if not task_term or not isinstance(task_term, str):
            raise ValueError("Search term cannot be empty and must be a string")
        
        task_term = task_term.lower()
        matching_tasks = []
        
        for task in self._tasks.values():
            if (task_term in task["task_name"].lower() or 
                task_term in task["task_description"].lower()):
                matching_tasks.append(task.copy())
        
        return matching_tasks
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id: The ID of the task to mark as completed
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise
            
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
        
        if task_id in self._tasks:
            # Only update if not already finished
            if not self._tasks[task_id]["is_finished"]:
                self._tasks[task_id]["is_finished"] = True
                return True
            return False
        
        return False
    
    def get_all(self) -> list[dict]:
        """
        Retrieve all tasks.
        
        Returns:
            list[dict]: A list of all tasks
        """
        # Return a copy of each task to prevent direct modification of internal state
        return [task.copy() for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Delete all tasks.
        
        Returns:
            bool: True if tasks were cleared, False if there were no tasks to clear
        """
        if not self._tasks:
            return False
            
        self._tasks.clear()
        return True
```

The implementation provides:

1. **Efficiency**: Using a dictionary for O(1) lookups, insertions, and deletions by task ID
2. **Validation**: Comprehensive input validation with descriptive error messages
3. **Defensive Programming**: Protecting against invalid inputs and returning copies of task data
4. **Clean Interface**: Implementing the exact interface specified
5. **Documentation**: Complete docstrings with parameter descriptions and return values
6. **Error Handling**: Using appropriate exceptions for invalid inputs

This implementation is maintainable, testable, and follows OOP principles while meeting all the specified requirements.