```python
#!/usr/bin/env python3
"""
Console-based To-Do List Application

This application manages a to-do list by providing functionality to add, remove,
search, finish, list, and clear tasks. Each task has a unique ID, a name, a description,
and a completion status.

The design adheres to principles from the ISO/IEC 25010 standard focusing on proper architecture,
efficiency, maintainability, and security. The TaskManager class encapsulates all functionality
in a modular, testable, and efficient manner.
"""


class TaskManager:
    """
    A TaskManager class to manage to-do tasks in memory.
    
    Each task is stored as a dictionary with the following structure:
        {
            "id": int,
            "task_name": str,
            "task_description": str,
            "is_finished": bool
        }
    """
    def __init__(self):
        """
        Initialize the TaskManager with an empty tasks dictionary and a counter for unique IDs.
        """
        self.tasks = {}  # Store tasks as {task_id: task_dict}
        self._next_id = 1  # Start task IDs at 1 for readability

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the manager.

        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.

        Returns:
            int: The unique ID assigned to the newly added task.

        Raises:
            ValueError: If task_name or task_description is empty or only whitespace.
        """
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty or whitespace.")
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty or whitespace.")

        task_id = self._next_id
        self.tasks[task_id] = {
            "id": task_id,
            "task_name": task_name.strip(),
            "task_description": task_description.strip(),
            "is_finished": False
        }
        self._next_id += 1
        return task_id

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the manager by its ID.

        Args:
            task_id (int): The unique ID of the task to remove.

        Returns:
            bool: True if the task was removed, False if no task with the given ID exists.

        Raises:
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
            return False
        del self.tasks[task_id]
        return True

    def search(self, task_term: str) -> list[dict]:
        """
        Searches tasks by their name or description using a case-insensitive match.

        Args:
            task_term (str): The search term to match against task name or description.

        Returns:
            list[dict]: A list of tasks that match the search term.

        Raises:
            ValueError: If task_term is empty or only whitespace.
        """
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty or whitespace.")
        
        term = task_term.strip().lower()
        matching_tasks = []
        for task in self.tasks.values():
            if term in task["task_name"].lower() or term in task["task_description"].lower():
                matching_tasks.append(task)
        return matching_tasks

    def finish(self, task_id: int) -> bool:
        """
        Marks a specified task as finished.

        Args:
            task_id (int): The unique ID of the task to mark as finished.

        Returns:
            bool: True if the task status was updated, False if the task does not exist.

        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
            return False
        self.tasks[task_id]["is_finished"] = True
        return True

    def get_all(self) -> list[dict]:
        """
        Retrieves all tasks.

        Returns:
            list[dict]: A list of all tasks with their details.
        """
        return list(self.tasks.values())

    def clear_all(self) -> bool:
        """
        Clears all tasks from the manager.

        Returns:
            bool: True after all tasks have been deleted.
        """
        self.tasks.clear()
        return True


def print_task(task: dict) -> None:
    """
    Helper function to print a task's details.

    Args:
        task (dict): A task dictionary.
    """
    status = "Finished" if task["is_finished"] else "Pending"
    print(f'ID: {task["id"]} | Name: {task["task_name"]} | Description: {task["task_description"]} | Status: {status}')


def display_menu() -> None:
    """
    Prints the menu options for user interaction.
    """
    menu = """
    To-Do List Application
    -----------------------
    1. Add Task
    2. Remove Task
    3. Search Tasks
    4. Mark Task as Finished
    5. Get All Tasks
    6. Clear All Tasks
    7. Exit
    """
    print(menu)


def main() -> None:
    """
    Main function to run the console-based to-do list application.
    """
    task_manager = TaskManager()
    while True:
        display_menu()
        choice = input("Enter your choice (1-7): ").strip()

        if choice == "1":
            try:
                name = input("Enter task name: ")
                description = input("Enter task description: ")
                task_id = task_manager.add(name, description)
                print(f"Task added successfully with ID: {task_id}")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "2":
            try:
                task_id = int(input("Enter task ID to remove: "))
                if task_manager.remove(task_id):
                    print(f"Task with ID {task_id} removed successfully.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "3":
            try:
                term = input("Enter search term: ")
                matched_tasks = task_manager.search(term)
                if matched_tasks:
                    print("Matching tasks:")
                    for task in matched_tasks:
                        print_task(task)
                else:
                    print("No tasks match the search term.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "4":
            try:
                task_id = int(input("Enter task ID to mark as finished: "))
                if task_manager.finish(task_id):
                    print(f"Task with ID {task_id} marked as finished.")
                else:
                    print(f"No task found with ID {task_id}.")
            except ValueError as ve:
                print(f"Error: {ve}")

        elif choice == "5":
            all_tasks = task_manager.get_all()
            if all_tasks:
                print("Listing all tasks:")
                for task in all_tasks:
                    print_task(task)
            else:
                print("No tasks found.")

        elif choice == "6":
            confirmation = input("Are you sure you want to clear all tasks? (yes/no): ").strip().lower()
            if confirmation == "yes":
                task_manager.clear_all()
                print("All tasks have been cleared.")

        elif choice == "7":
            print("Exiting the application. Goodbye!")
            break

        else:
            print("Invalid choice. Please select a valid option (1-7).")


if __name__ == "__main__":
    main()
```