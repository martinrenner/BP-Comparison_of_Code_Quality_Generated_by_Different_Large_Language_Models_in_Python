# Python To-Do List Application

I'll create a clean, object-oriented implementation of the to-do list application following the requirements and best practices.

```python
class TaskManager:
    """
    A class to manage a collection of tasks with operations to add, remove, search,
    mark as finished, and retrieve tasks.
    
    Implements an in-memory storage solution with efficient operations for task management.
    """
    
    def __init__(self):
        """Initialize the TaskManager with an empty task dictionary and a task ID counter."""
        self._tasks = {}  # Using a dictionary for O(1) lookups by ID
        self._next_id = 1  # Task ID counter
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name: The name of the task (must not be empty).
            task_description: The description of the task (can be empty).
            
        Returns:
            int: The unique ID of the newly added task.
            
        Raises:
            ValueError: If task_name is empty or None.
        """
        if not task_name or not isinstance(task_name, str):
            raise ValueError("Task name cannot be empty")
            
        if not isinstance(task_description, str):
            raise ValueError("Task description must be a string")
        
        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False
        }
        self._next_id += 1
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
        
        Args:
            task_id: The unique ID of the task to remove.
            
        Returns:
            bool: True if the task was successfully removed, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        if task_id in self._tasks:
            del self._tasks[task_id]
            return True
        return False
    
    def search(self, task_term: str) -> list[dict]:
        """
        Search for tasks containing the given term in name or description.
        
        Args:
            task_term: The search term to look for in task names and descriptions.
            
        Returns:
            list[dict]: A list of tasks matching the search criteria.
            
        Raises:
            ValueError: If task_term is None.
        """
        if task_term is None:
            raise ValueError("Search term cannot be None")
            
        if not isinstance(task_term, str):
            raise ValueError("Search term must be a string")
            
        result = []
        term = task_term.lower()
        
        for task in self._tasks.values():
            if (term in task["task_name"].lower() or 
                term in task["task_description"].lower()):
                result.append(task.copy())
        
        return result
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as finished.
        
        Args:
            task_id: The unique ID of the task to mark as finished.
            
        Returns:
            bool: True if the task was successfully marked as finished, False otherwise.
            
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
            raise ValueError("Task ID must be a positive integer")
            
        if task_id in self._tasks:
            # Only update if not already finished to indicate a real change
            if not self._tasks[task_id]["is_finished"]:
                self._tasks[task_id]["is_finished"] = True
                return True
            return False  # Task already finished
        return False  # Task not found
    
    def get_all(self) -> list[dict]:
        """
        Retrieve all tasks.
        
        Returns:
            list[dict]: A list of all tasks in the system.
        """
        # Return deep copies of tasks to prevent external modification
        return [task.copy() for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Remove all tasks from the task manager.
        
        Returns:
            bool: True if tasks were cleared, False if there were no tasks to clear.
        """
        if not self._tasks:
            return False  # No tasks to clear
            
        self._tasks.clear()
        return True
```

The implementation focuses on:

1. **Correctness**: All required functionalities are implemented with proper validation.
2. **Performance**: Using a dictionary for O(1) lookups, insertions, and deletions by ID.
3. **Modularity**: Clean class design with single-responsibility methods.
4. **Security**: Input validation to protect against invalid inputs.
5. **Testability**: Pure functions with clear inputs and outputs, making testing straightforward.
6. **Readability & Documentation**: Comprehensive docstrings and meaningful variable names.

Each method returns exactly what's specified in the interface, including proper error handling for invalid inputs. The task data is stored in-memory using a dictionary for efficient operations.