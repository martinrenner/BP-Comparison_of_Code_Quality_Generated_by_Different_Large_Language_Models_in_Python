# To-Do List Application

I'll create a well-designed, efficient Python implementation for the console-based to-do list application that meets all the requirements.

```python
"""
Todo List Application

A console-based application that allows users to manage their tasks
with features including adding, removing, searching, and completing tasks.
"""
from typing import Dict, List, Optional, Any
from datetime import datetime


class TaskManager:
    """
    Manages tasks in a todo list with operations for adding, removing,
    searching, marking tasks as complete, and more.
    
    Implements the TaskManager interface with efficient in-memory storage.
    """
    
    def __init__(self):
        """Initialize an empty task manager with a task storage and ID counter."""
        # Dictionary for O(1) lookups by ID
        self._tasks: Dict[int, Dict[str, Any]] = {}
        # Counter for generating unique task IDs
        self._next_id: int = 1
    
    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
        
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
            
        Returns:
            int: The unique ID of the newly added task.
            
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Input validation
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
        if not task_description or not task_description.strip():
            raise ValueError("Task description cannot be empty")
        
        # Normalize inputs
        task_name = task_name.strip()
        task_description = task_description.strip()
        
        # Create task
        task_id = self._next_id
        self._tasks[task_id] = {
            "id": task_id,
            "task_name": task_name,
            "task_description": task_description,
            "is_finished": False,
            "created_at": datetime.now()
        }
        
        # Increment ID counter for next task
        self._next_id += 1
        
        return task_id
    
    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
        
        Args:
            task_id (int): The ID of the task to remove.
            
        Returns:
            bool: True if the task was successfully removed, False otherwise.
            
        Raises:
            ValueError: If task_id is negative.
        """
        # Input validation
        if task_id < 1:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists
        if task_id not in self._tasks:
            return False
        
        # Remove task
        del self._tasks[task_id]
        return True
    
    def search(self, task_term: str) -> List[Dict[str, Any]]:
        """
        Search for tasks by name or description containing the given term.
        
        Args:
            task_term (str): The search term to look for in task names and descriptions.
            
        Returns:
            list[dict]: A list of tasks (as dictionaries) that match the search term.
            
        Raises:
            ValueError: If task_term is empty.
        """
        # Input validation
        if not task_term or not task_term.strip():
            raise ValueError("Search term cannot be empty")
        
        # Normalize input
        task_term = task_term.lower().strip()
        
        # Search for matching tasks
        results = []
        for task in self._tasks.values():
            if (task_term in task["task_name"].lower() or 
                task_term in task["task_description"].lower()):
                results.append(self._format_task_output(task))
        
        return results
    
    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
        
        Args:
            task_id (int): The ID of the task to mark as completed.
            
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
            
        Raises:
            ValueError: If task_id is negative.
        """
        # Input validation
        if task_id < 1:
            raise ValueError("Task ID must be a positive integer")
        
        # Check if task exists
        if task_id not in self._tasks:
            return False
        
        # Mark as finished if not already finished
        task = self._tasks[task_id]
        if task["is_finished"]:
            return False  # Task already finished
        
        task["is_finished"] = True
        task["completed_at"] = datetime.now()
        return True
    
    def get_all(self) -> List[Dict[str, Any]]:
        """
        Get all tasks in the task manager.
        
        Returns:
            list[dict]: A list of all tasks with their details.
        """
        return [self._format_task_output(task) for task in self._tasks.values()]
    
    def clear_all(self) -> bool:
        """
        Clear all tasks from the task manager.
        
        Returns:
            bool: True if the operation was successful.
        """
        self._tasks.clear()
        return True
    
    def _format_task_output(self, task: Dict[str, Any]) -> Dict[str, Any]:
        """
        Format a task for output according to the specified format.
        
        Args:
            task (dict): The internal task representation.
            
        Returns:
            dict: The formatted task with the required fields.
        """
        return {
            "id": task["id"],
            "task_name": task["task_name"],
            "task_description": task["task_description"],
            "is_finished": task["is_finished"]
        }


def demo():
    """Demonstrate the functionality of the TaskManager class."""
    task_manager = TaskManager()
    
    # Add tasks
    task1_id = task_manager.add("Complete assignment", "Finish Python coding assignment by Friday")
    task2_id = task_manager.add("Buy groceries", "Milk, eggs, bread, and vegetables")
    task3_id = task_manager.add("Call John", "Discuss project timeline")
    
    print("All tasks:")
    for task in task_manager.get_all():
        print(f"ID: {task['id']}, Name: {task['task_name']}, "
              f"Completed: {task['is_finished']}")
    
    # Search for tasks
    print("\nSearch results for 'assignment':")
    for task in task_manager.search("assignment"):
        print(f"ID: {task['id']}, Name: {task['task_name']}")
    
    # Mark a task as finished
    task_manager.finish(task1_id)
    print("\nAfter marking task as finished:")
    for task in task_manager.get_all():
        if task["id"] == task1_id:
            print(f"ID: {task['id']}, Name: {task['task_name']}, "
                  f"Completed: {task['is_finished']}")
    
    # Remove a task
    task_manager.remove(task2_id)
    print("\nAfter removing task:")
    for task in task_manager.get_all():
        print(f"ID: {task['id']}, Name: {task['task_name']}")
    
    # Clear all tasks
    task_manager.clear_all()
    print("\nAfter clearing all tasks:")
    print(f"Number of tasks: {len(task_manager.get_all())}")


if __name__ == "__main__":
    demo()
```

## Implementation Notes

1. **Data Structure**: Used a dictionary (`self._tasks`) for O(1) lookups, insertions, and deletions by task ID.

2. **Validation**:
   - Input validation for empty strings, negative IDs, and other invalid inputs
   - Appropriate error messages with built-in error types (ValueError)

3. **Efficiency**:
   - Used a dictionary for constant-time access to tasks by ID
   - Optimized search by using the in-memory data structure efficiently
   - Normalized input strings to improve search accuracy

4. **Error Handling**:
   - Comprehensive validation with descriptive error messages
   - Return values indicate success/failure of operations

5. **Code Quality**:
   - Followed PEP 8 style guidelines
   - Clear, descriptive variable and method names
   - Comprehensive docstrings in Google style format
   - Type annotations for better code understanding and IDE support

6. **Additional Features**:
   - Added timestamps for task creation and completion
   - Included a demo function to show how the TaskManager works

This implementation meets all the requirements while providing a clean, efficient, and maintainable solution.