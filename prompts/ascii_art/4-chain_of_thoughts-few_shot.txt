Let's think step by step:

Generate high-quality Python code for console-based 2D ASCII ART app that meets the requirements of ISO/IEC 25010.

Functionality Requirements:
- Implement the following functions for drawing ASCII shapes: draw_square, draw_rectangle, draw_parallelogram, draw_triangle (right-angled), draw_pyramid

Implementation Requirements:
- Implement the code using OOP, define a class AsciiArt and implement following interface within this class
- Implement interface 
    - draw_square(width: int, symbol: str) -> str: Draws a square
    - draw_rectangle(width: int, height: int, symbol: str) -> str: Draws a rectangle
    - draw_parallelogram(width: int, height: int, symbol: str) -> str: Draws a parallelogram (grows diagonally to the right, starting from the top-left corner; each row is shifted by one space)
    - draw_triangle(width: int, height: int, symbol: str) -> str: Draws a right-angled triangle (grows diagonally to the right, starting from the top-left corner)
    - draw_pyramid(height: int, symbol: str) -> str: Draws a symmetrical pyramid
- Implement validation using built-in error types (e.g., invalid input - multichar symbol, whitespace symbol, negative width/height)
- User can choose printable symbol (only one character)
- Each shape must be completely filled with the chosen symbol
- Each function must return a multi-line string representing the ASCII art
- Format the outputted code using Markdown code blocks (```python ```)

Code Quality Requirements:
- Correctness: The code must produce expected results for various expressions
- Performance: The code must use an efficient algorithm
- Modularity: Logically separate parts of the code
- Safety: Protection against invalid inputs
- Testability: The code must be easily testable
- Readability and Documentation: Use docstrings, clearly named variables, and comments

Use the following examples as references for code quality and structure:

Example 1: Currency Converter
```python
def convert_currency(amount: float, rate: float) -> float:
    """
    Converts an amount using an exchange rate.

    Args:
        amount (float): The original amount in the source currency.
        rate (float): The exchange rate.

    Returns:
        float: The converted amount, rounded to two decimal places.
    """
    return round(amount * rate, 2)
```

Example 2: Normalizing a Mathematical Expression (Whitespace Removal & Character Validation)
```python
def normalize_expression(expression: str) -> str:
    """
    Normalizes a mathematical expression by removing spaces and validating characters.

    Args:
        expression (str): A mathematical expression as a string.

    Returns:
        str: The normalized expression without spaces.

    Raises:
        ValueError: If the expression contains invalid characters.
    """
    allowed_chars = set("0123456789+-*/(). ")
    if not all(char in allowed_chars for char in expression):
        raise ValueError("Expression contains invalid characters.")

    return expression.replace(" ", "")
```

Example 3: Parentheses Validation (Checking for Proper Pairing)
```python
def is_balanced(expression: str) -> bool:
    """
    Checks whether a mathematical expression has properly paired parentheses.

    Args:
        expression (str): A string containing the mathematical expression.
    
    Returns:
        bool: True if parentheses are correctly paired, otherwise False.
    """
    stack = []
    for char in expression:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if not stack:
                return False
            stack.pop()
    return not stack
```

The generated code must be clean, efficient, and easy to maintain.