Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x102b14740>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/chatgpt.py:27: in calculate
    tokens = self._tokenize(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/chatgpt.py:98: in _tokenize
    number_token, i = self._read_number(expression, i)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102b14740>, expression = '-(5+2)*3'
i = 1

    def _read_number(self, expression: str, i: int) -> (str, int):
        """
        Reads a number (which may include a unary sign and a decimal point)
        starting from the given index in the expression.
    
        Args:
            expression (str): The arithmetic expression.
            i (int): The current index in the expression.
    
        Returns:
            tuple: A tuple containing the number token (str) and the updated index (int).
    
        Raises:
            ValueError: If the number format is invalid.
        """
        num_str = ""
        # Process a unary sign if present.
        if expression[i] in "+-":
            num_str += expression[i]
            i += 1
    
        digit_found = False
        dot_found = False
        # Read the digit and dot characters.
        while i < len(expression) and (expression[i].isdigit() or expression[i] == "."):
            if expression[i] == ".":
                if dot_found:  # Second dot encountered; break out to let float() catch the error.
                    break
                dot_found = True
                num_str += expression[i]
            else:
                digit_found = True
                num_str += expression[i]
            i += 1
    
        if not digit_found:
>           raise ValueError(f"Invalid number format near: {num_str}")
E           ValueError: Invalid number format near: -

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/chatgpt.py:150: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x102b12780>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/chatgpt.py:27: in calculate
    tokens = self._tokenize(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/chatgpt.py:98: in _tokenize
    number_token, i = self._read_number(expression, i)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102b12780>
expression = '-((2+3)*((2+3)*2))', i = 1

    def _read_number(self, expression: str, i: int) -> (str, int):
        """
        Reads a number (which may include a unary sign and a decimal point)
        starting from the given index in the expression.
    
        Args:
            expression (str): The arithmetic expression.
            i (int): The current index in the expression.
    
        Returns:
            tuple: A tuple containing the number token (str) and the updated index (int).
    
        Raises:
            ValueError: If the number format is invalid.
        """
        num_str = ""
        # Process a unary sign if present.
        if expression[i] in "+-":
            num_str += expression[i]
            i += 1
    
        digit_found = False
        dot_found = False
        # Read the digit and dot characters.
        while i < len(expression) and (expression[i].isdigit() or expression[i] == "."):
            if expression[i] == ".":
                if dot_found:  # Second dot encountered; break out to let float() catch the error.
                    break
                dot_found = True
                num_str += expression[i]
            else:
                digit_found = True
                num_str += expression[i]
            i += 1
    
        if not digit_found:
>           raise ValueError(f"Invalid number format near: {num_str}")
E           ValueError: Invalid number format near: -

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/chatgpt.py:150: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.22s =========================
