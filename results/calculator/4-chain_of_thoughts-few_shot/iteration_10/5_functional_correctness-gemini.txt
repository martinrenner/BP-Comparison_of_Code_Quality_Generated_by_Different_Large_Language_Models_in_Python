Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py . [  1%]
.............FF......................FF................................. [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

self = <gemini.Calculator object at 0x1025353a0>, expression = '5-+3'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
                output_queue.append(float(num_str))
                i = j - 1  # Adjust index after number parsing
    
            elif char in precedence:
                # Handle operators
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], 0) >= precedence.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            elif char == '(':
                # Handle opening parenthesis
                operator_stack.append(char)
    
            elif char == ')':
                # Handle closing parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the '('
                else:
                     raise ValueError("Unbalanced parentheses") # Extra closing parenthesis
            i += 1
    
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':  # Check in case of missing closing parenthesis
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
    
        # Evaluate the postfix expression (Reverse Polish Notation)
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = evaluation_stack.pop()
>                   operand1 = evaluation_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:317: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025353a0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:199: in calculate
    return self._evaluate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025353a0>, expression = '5-+3'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
                output_queue.append(float(num_str))
                i = j - 1  # Adjust index after number parsing
    
            elif char in precedence:
                # Handle operators
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], 0) >= precedence.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            elif char == '(':
                # Handle opening parenthesis
                operator_stack.append(char)
    
            elif char == ')':
                # Handle closing parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the '('
                else:
                     raise ValueError("Unbalanced parentheses") # Extra closing parenthesis
            i += 1
    
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':  # Check in case of missing closing parenthesis
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
    
        # Evaluate the postfix expression (Reverse Polish Notation)
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = evaluation_stack.pop()
                    operand1 = evaluation_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression format.") # Not enough operands for operators.
E                   ValueError: Invalid expression format.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:319: ValueError
_________________________ test_subtract_negative_float _________________________

self = <gemini.Calculator object at 0x1025317c0>, expression = '5.5-+3.5'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
                output_queue.append(float(num_str))
                i = j - 1  # Adjust index after number parsing
    
            elif char in precedence:
                # Handle operators
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], 0) >= precedence.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            elif char == '(':
                # Handle opening parenthesis
                operator_stack.append(char)
    
            elif char == ')':
                # Handle closing parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the '('
                else:
                     raise ValueError("Unbalanced parentheses") # Extra closing parenthesis
            i += 1
    
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':  # Check in case of missing closing parenthesis
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
    
        # Evaluate the postfix expression (Reverse Polish Notation)
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = evaluation_stack.pop()
>                   operand1 = evaluation_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:317: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025317c0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:199: in calculate
    return self._evaluate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025317c0>, expression = '5.5-+3.5'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
                output_queue.append(float(num_str))
                i = j - 1  # Adjust index after number parsing
    
            elif char in precedence:
                # Handle operators
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], 0) >= precedence.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            elif char == '(':
                # Handle opening parenthesis
                operator_stack.append(char)
    
            elif char == ')':
                # Handle closing parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the '('
                else:
                     raise ValueError("Unbalanced parentheses") # Extra closing parenthesis
            i += 1
    
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':  # Check in case of missing closing parenthesis
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
    
        # Evaluate the postfix expression (Reverse Polish Notation)
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = evaluation_stack.pop()
                    operand1 = evaluation_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression format.") # Not enough operands for operators.
E                   ValueError: Invalid expression format.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:319: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x102531d30>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:199: in calculate
    return self._evaluate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102531d30>, expression = '5/0'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
                output_queue.append(float(num_str))
                i = j - 1  # Adjust index after number parsing
    
            elif char in precedence:
                # Handle operators
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], 0) >= precedence.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            elif char == '(':
                # Handle opening parenthesis
                operator_stack.append(char)
    
            elif char == ')':
                # Handle closing parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the '('
                else:
                     raise ValueError("Unbalanced parentheses") # Extra closing parenthesis
            i += 1
    
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':  # Check in case of missing closing parenthesis
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
    
        # Evaluate the postfix expression (Reverse Polish Notation)
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = evaluation_stack.pop()
                    operand1 = evaluation_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.") # Not enough operands for operators.
    
                if token == '+':
                    evaluation_stack.append(operand1 + operand2)
                elif token == '-':
                    evaluation_stack.append(operand1 - operand2)
                elif token == '*':
                    evaluation_stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero.")
E                       ValueError: Division by zero.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:329: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x102532ff0>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:199: in calculate
    return self._evaluate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102532ff0>, expression = '5.0/0.0'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
                output_queue.append(float(num_str))
                i = j - 1  # Adjust index after number parsing
    
            elif char in precedence:
                # Handle operators
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], 0) >= precedence.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            elif char == '(':
                # Handle opening parenthesis
                operator_stack.append(char)
    
            elif char == ')':
                # Handle closing parenthesis
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Discard the '('
                else:
                     raise ValueError("Unbalanced parentheses") # Extra closing parenthesis
            i += 1
    
        # Pop any remaining operators from the stack
        while operator_stack:
            if operator_stack[-1] == '(':  # Check in case of missing closing parenthesis
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
    
        # Evaluate the postfix expression (Reverse Polish Notation)
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = evaluation_stack.pop()
                    operand1 = evaluation_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.") # Not enough operands for operators.
    
                if token == '+':
                    evaluation_stack.append(operand1 + operand2)
                elif token == '-':
                    evaluation_stack.append(operand1 - operand2)
                elif token == '*':
                    evaluation_stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero.")
E                       ValueError: Division by zero.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:329: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x1025317f0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:199: in calculate
    return self._evaluate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025317f0>, expression = '-(5+2)*3'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
>               output_queue.append(float(num_str))
E               ValueError: could not convert string to float: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:278: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x102530740>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:199: in calculate
    return self._evaluate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102530740>
expression = '-((2+3)*((2+3)*2))'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluates a normalized mathematical expression using a modified
        Shunting Yard algorithm.
    
        Args:
            expression (str):  The normalized mathematical expression.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If there's a division by zero.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '+-*/(')):
                # Handle numbers (including decimals and negatives)
                j = i
                num_str = ""
                if char == '-':  # Negative sign handling
                    num_str += '-'
                    j += 1
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                if num_str.count('.') > 1:   # Check that number contains no more that 1 dot character
                    raise ValueError(f'Invalid number format:  {num_str}')
    
>               output_queue.append(float(num_str))
E               ValueError: could not convert string to float: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/gemini.py:278: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_10/5_functional_correctness-gemini.py::test_nested_parentheses
========================= 6 failed, 82 passed in 0.27s =========================
