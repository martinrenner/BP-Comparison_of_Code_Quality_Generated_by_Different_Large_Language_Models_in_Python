Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <chatgpt.Calculator object at 0x1028318b0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:39: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

postfix_tokens = [5.0, '-', 3.0, '+']

    @staticmethod
    def _evaluate_postfix(postfix_tokens: List[Union[float, str]]) -> float:
        """
        Evaluates an expression in postfix notation.
    
        Args:
            postfix_tokens (List[Union[float, str]]): The postfix (RPN) expression tokens.
    
        Returns:
            float: The evaluated result.
    
        Raises:
            ZeroDivisionError: If division by zero is encountered.
            ValueError: If the expression is malformed.
        """
        stack: List[float] = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:214: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <chatgpt.Calculator object at 0x10282e360>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:39: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

postfix_tokens = [5.5, '-', 3.5, '+']

    @staticmethod
    def _evaluate_postfix(postfix_tokens: List[Union[float, str]]) -> float:
        """
        Evaluates an expression in postfix notation.
    
        Args:
            postfix_tokens (List[Union[float, str]]): The postfix (RPN) expression tokens.
    
        Returns:
            float: The evaluated result.
    
        Raises:
            ZeroDivisionError: If division by zero is encountered.
            ValueError: If the expression is malformed.
        """
        stack: List[float] = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:214: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x10282f4d0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:39: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

postfix_tokens = [5.0, 2.0, '+', 3.0, '*', '-']

    @staticmethod
    def _evaluate_postfix(postfix_tokens: List[Union[float, str]]) -> float:
        """
        Evaluates an expression in postfix notation.
    
        Args:
            postfix_tokens (List[Union[float, str]]): The postfix (RPN) expression tokens.
    
        Returns:
            float: The evaluated result.
    
        Raises:
            ZeroDivisionError: If division by zero is encountered.
            ValueError: If the expression is malformed.
        """
        stack: List[float] = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:214: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x10282e150>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:39: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

postfix_tokens = [2.0, 3.0, '+', 2.0, 3.0, '+', ...]

    @staticmethod
    def _evaluate_postfix(postfix_tokens: List[Union[float, str]]) -> float:
        """
        Evaluates an expression in postfix notation.
    
        Args:
            postfix_tokens (List[Union[float, str]]): The postfix (RPN) expression tokens.
    
        Returns:
            float: The evaluated result.
    
        Raises:
            ZeroDivisionError: If division by zero is encountered.
            ValueError: If the expression is malformed.
        """
        stack: List[float] = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/chatgpt.py:214: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_1/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.41s =========================
