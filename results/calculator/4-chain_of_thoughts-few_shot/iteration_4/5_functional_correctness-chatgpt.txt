Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x101dc8470>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/chatgpt.py:31: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101dc8470>
tokens = [5.0, 2.0, '+', 3.0, '*', '-']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (Reverse Polish Notation) expression.
    
        Args:
            tokens (list): The list of tokens in postfix order.
    
        Returns:
            float: The evaluated result.
    
        Raises:
            ZeroDivisionError: If division by zero occurs.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in {'+', '-', '*', '/'}:
                if len(stack) < 2:
>                   raise ValueError("Insufficient values in the expression.")
E                   ValueError: Insufficient values in the expression.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/chatgpt.py:204: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x101dc5910>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/chatgpt.py:31: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101dc5910>
tokens = [2.0, 3.0, '+', 2.0, 3.0, '+', ...]

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (Reverse Polish Notation) expression.
    
        Args:
            tokens (list): The list of tokens in postfix order.
    
        Returns:
            float: The evaluated result.
    
        Raises:
            ZeroDivisionError: If division by zero occurs.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in {'+', '-', '*', '/'}:
                if len(stack) < 2:
>                   raise ValueError("Insufficient values in the expression.")
E                   ValueError: Insufficient values in the expression.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/chatgpt.py:204: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_4/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.21s =========================
