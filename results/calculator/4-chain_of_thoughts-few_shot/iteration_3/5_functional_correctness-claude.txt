Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py . [  1%]
...FF........FF........FFF.FF....FFFF........FF..FFFF..........FF....FF. [ 82%]
...FF..........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <claude.Calculator object at 0x1063ad220>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063ad220>, postfix = [1.0, '+', 2.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
___________________________ test_add_negative_float ____________________________

calc = <claude.Calculator object at 0x1063a9e80>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a9e80>, postfix = [1.5, '+', 2.5, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x1063b1d60>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063b1d60>, postfix = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x1063a84a0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a84a0>, postfix = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________________ test_multiply_negative ____________________________

calc = <claude.Calculator object at 0x1063ab980>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063ab980>, postfix = [2.0, '*', 3.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
______________________ test_multiply_negative_parentheses ______________________

calc = <claude.Calculator object at 0x1063a9b20>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a9b20>
postfix = [0.0, 999999999999999.0, '-', '*', 1.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_________________________ test_multiply_negative_float _________________________

calc = <claude.Calculator object at 0x1063a9520>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a9520>, postfix = [2.5, '*', 3.5, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________________ test_multiply_neutral _____________________________

calc = <claude.Calculator object at 0x1063a8890>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a8890>, postfix = [0.0, '*', 5.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_________________________ test_multiply_neutral_float __________________________

calc = <claude.Calculator object at 0x1063a8740>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a8740>, postfix = [0.0, '*', 5.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_____________________________ test_divide_negative _____________________________

calc = <claude.Calculator object at 0x1063a9be0>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a9be0>, postfix = [6.0, '/', 3.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
__________________________ test_divide_negative_float __________________________

calc = <claude.Calculator object at 0x1063a8f20>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a8f20>, postfix = [6.5, '/', 3.5, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_______________________ test_divide_negative_parentheses _______________________

calc = <claude.Calculator object at 0x1063a8e30>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063a8e30>
postfix = [999999999999999.0, '/', 1.0, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________ test_divide_negative_float_parentheses ____________________

calc = <claude.Calculator object at 0x106361c10>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106361c10>
postfix = [0.0, 999999999999999.0, '-', '/', 0.1, '-']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <claude.Calculator object at 0x106362240>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
        assert calc.calculate("-5+2*3") == 1
>       assert calc.calculate("-5*-2+3") == 13

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106362240>
postfix = [0.0, 5.0, '*', '-', 2.0, '-', ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <claude.Calculator object at 0x1063ab0e0>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
        assert calc.calculate("-5.5+2.5*3.5") == 3.25
>       assert calc.calculate("-5.5*-2.5+3.5") == 17.25

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:391: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063ab0e0>
postfix = [0.0, 5.5, '*', '-', 2.5, '-', ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <claude.Calculator object at 0x1077036b0>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1077036b0>
postfix = [999999999999999.0, '*', 1.0, '-', 999999999999999.0, '+']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <claude.Calculator object at 0x107702db0>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107702db0>
postfix = [999999999999999.5, '*', 1.0, '-', 999999999999999.0, '+']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_______________________________ test_add_divide ________________________________

calc = <claude.Calculator object at 0x107702450>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
        assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)
>       assert calc.calculate("-5+-2/3") == pytest.approx(-5.6666666, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107702450>
postfix = [0.0, 5.0, '-', '+', 2.0, 3.0, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________________ test_add_divide_float _____________________________

calc = <claude.Calculator object at 0x107701a60>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
        assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)
>       assert calc.calculate("-5.5+-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:456: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107701a60>
postfix = [0.0, 5.5, '-', '+', 2.5, 3.5, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <claude.Calculator object at 0x107700650>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107700650>
postfix = [0.0, 5.0, '/', '-', 2.0, 3.0, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <claude.Calculator object at 0x1063aa060>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063aa060>
postfix = [0.0, 5.5, '/', '-', 2.5, 3.5, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <claude.Calculator object at 0x1063aaed0>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
        assert calc.calculate("-5-2*3") == -11
>       assert calc.calculate("-5*-2*3") == 30

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:660: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1063aaed0>
postfix = [0.0, 5.0, '*', '-', 2.0, 3.0, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <claude.Calculator object at 0x107700320>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
        assert calc.calculate("-5.5-2.5*3.5") == -14.25
>       assert calc.calculate("-5.5*-2.5*3.5") == pytest.approx(48.125, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:671: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107700320>
postfix = [0.0, 5.5, '*', '-', 2.5, 3.5, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
_____________________________ test_all_operations ______________________________

calc = <claude.Calculator object at 0x1077016a0>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
        assert calc.calculate("-5*2+3/3") == -9
>       assert calc.calculate("-5*-2/3+5") == pytest.approx(8.33333333, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:725: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1077016a0>
postfix = [0.0, 5.0, '*', '-', 2.0, 3.0, ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x107703320>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
        assert calc.calculate("-(5+2)*3") == -21
>       assert calc.calculate("-(5+2)*-3") == 21

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py:736: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:48: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107703320>
postfix = [0.0, 5.0, 2.0, '+', '*', '-', ...]

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluates a postfix expression and returns the result.
    
        Args:
            postfix (list): The postfix expression as a list of tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero.
            Exception: For other calculation errors.
        """
        stack = []
    
        for token in postfix:
            # If the token is a number, push it to the stack
            if isinstance(token, (int, float)):
                stack.append(token)
            # If the token is an operator, pop two values from the stack, perform the operation, and push the result back
            elif self._is_operator(token):
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/claude.py:194: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_multiply_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_multiply_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_multiply_neutral
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_multiply_neutral_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_divide_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_divide_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_divide_negative_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_multiply_positive
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_multiply_positive_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_divide
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_add_divide_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_divide
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_divide_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_multiply
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_multiply_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_all_operations
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_3/5_functional_correctness-claude.py::test_general_parentheses
======================== 25 failed, 63 passed in 0.39s =========================
