Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
............F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x10462d520>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:30: in calculate
    result, remaining = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:106: in _evaluate_expression
    return self._parse_addition_subtraction(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:126: in _parse_addition_subtraction
    right_val, remaining = self._parse_multiplication_division(right_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:150: in _parse_multiplication_division
    left_val, remaining = self._parse_factor(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:203: in _parse_factor
    return self._parse_number(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10462d520>, expression = '+3'

    def _parse_number(self, expression: str) -> tuple[float, str]:
        """
        Parses a numeric value from the beginning of the expression.
    
        Args:
            expression (str): The expression to parse.
    
        Returns:
            tuple[float, str]: The numeric value and the remaining expression.
    
        Raises:
            ValueError: If no valid number is found at the beginning of the expression.
        """
        if not expression or not (expression[0].isdigit() or expression[0] == '.'):
>           raise ValueError(f"Expected a number, but got '{expression}'")
E           ValueError: Expected a number, but got '+3'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:219: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x104629970>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:30: in calculate
    result, remaining = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:106: in _evaluate_expression
    return self._parse_addition_subtraction(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:126: in _parse_addition_subtraction
    right_val, remaining = self._parse_multiplication_division(right_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:150: in _parse_multiplication_division
    left_val, remaining = self._parse_factor(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:203: in _parse_factor
    return self._parse_number(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x104629970>, expression = '+3.5'

    def _parse_number(self, expression: str) -> tuple[float, str]:
        """
        Parses a numeric value from the beginning of the expression.
    
        Args:
            expression (str): The expression to parse.
    
        Returns:
            tuple[float, str]: The numeric value and the remaining expression.
    
        Raises:
            ValueError: If no valid number is found at the beginning of the expression.
        """
        if not expression or not (expression[0].isdigit() or expression[0] == '.'):
>           raise ValueError(f"Expected a number, but got '{expression}'")
E           ValueError: Expected a number, but got '+3.5'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:219: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x10462a480>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10462a480>, expression = '5*(2+3'

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.
    
        Args:
            expression (str): A string containing the mathematical expression to evaluate.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ValueError: If the expression contains invalid characters or has syntax errors.
            ZeroDivisionError: If the expression attempts to divide by zero.
            SyntaxError: If the expression has unbalanced parentheses or other syntax issues.
        """
        # Validate and normalize the expression
        normalized_expr = self._normalize_expression(expression)
    
        # Check if parentheses are balanced
        if not self._is_balanced_parentheses(normalized_expr):
>           raise SyntaxError("Unbalanced parentheses in the expression")
E           SyntaxError: Unbalanced parentheses in the expression

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/claude.py:27: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 3 failed, 85 passed in 0.22s =========================
