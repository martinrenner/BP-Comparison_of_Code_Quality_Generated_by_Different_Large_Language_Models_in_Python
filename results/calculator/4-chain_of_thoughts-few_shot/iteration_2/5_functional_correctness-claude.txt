Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py . [  1%]
...FF........FF........FFF.FF....FFFF..FF.FF.FF..FFFF....FF....FF....FF. [ 82%]
...FFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <claude.Calculator object at 0x105d5c860>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
>       assert calc.calculate("-1+2") == 1

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d5c860>, expression = '-1+2', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
___________________________ test_add_negative_float ____________________________

calc = <claude.Calculator object at 0x105d586e0>

    def test_add_negative_float(calc):
        assert calc.calculate("1.5+-2.5") == -1
>       assert calc.calculate("-1.5+2.5") == 1

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d586e0>, expression = '-1.5+2.5'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x105d64b60>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:135: in _parse_addition_subtraction
    right_value, index = self._parse_multiplication_division(expression, index + 1)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d64b60>, expression = '5-+3', index = 2

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 2: '+'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x105d5a8d0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:135: in _parse_addition_subtraction
    right_value, index = self._parse_multiplication_division(expression, index + 1)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d5a8d0>, expression = '5.5-+3.5'
index = 4

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 4: '+'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
____________________________ test_multiply_negative ____________________________

calc = <claude.Calculator object at 0x105d58fb0>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6
E       AssertionError: assert -3.0 == -6
E        +  where -3.0 = calculate('2*-3')
E        +    where calculate = <claude.Calculator object at 0x105d58fb0>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:196: AssertionError
______________________ test_multiply_negative_parentheses ______________________

calc = <claude.Calculator object at 0x105d581a0>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999
E       AssertionError: assert -1.0 == 999999999999999
E        +  where -1.0 = calculate('(-999999999999999)*-1')
E        +    where calculate = <claude.Calculator object at 0x105d581a0>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:208: AssertionError
_________________________ test_multiply_negative_float _________________________

calc = <claude.Calculator object at 0x105d11e80>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75
E       AssertionError: assert -3.5 == -8.75
E        +  where -3.5 = calculate('2.5*-3.5')
E        +    where calculate = <claude.Calculator object at 0x105d11e80>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:212: AssertionError
____________________________ test_multiply_neutral _____________________________

calc = <claude.Calculator object at 0x105d11a60>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0
E       AssertionError: assert -5.0 == 0
E        +  where -5.0 = calculate('0*-5')
E        +    where calculate = <claude.Calculator object at 0x105d11a60>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:237: AssertionError
_________________________ test_multiply_neutral_float __________________________

calc = <claude.Calculator object at 0x105d13230>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0
E       AssertionError: assert -5.0 == 0
E        +  where -5.0 = calculate('0.0*-5.0')
E        +    where calculate = <claude.Calculator object at 0x105d13230>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:245: AssertionError
_____________________________ test_divide_negative _____________________________

calc = <claude.Calculator object at 0x105d10e90>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d10e90>, expression = '6/0-3'
index = 3

    def _parse_multiplication_division(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses multiplication and division operations.
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The result and the new position in the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
        """
        left_value, index = self._parse_term(expression, index)
    
        while index < len(expression):
            if expression[index] == '*':
                right_value, index = self._parse_term(expression, index + 1)
                left_value *= right_value
            elif expression[index] == '/':
                right_value, index = self._parse_term(expression, index + 1)
                if right_value == 0:
>                   raise ZeroDivisionError("Division by zero is not allowed.")
E                   ZeroDivisionError: Division by zero is not allowed.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:165: ZeroDivisionError
__________________________ test_divide_negative_float __________________________

calc = <claude.Calculator object at 0x105d129c0>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d129c0>, expression = '6.5/0-3.5'
index = 5

    def _parse_multiplication_division(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses multiplication and division operations.
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The result and the new position in the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
        """
        left_value, index = self._parse_term(expression, index)
    
        while index < len(expression):
            if expression[index] == '*':
                right_value, index = self._parse_term(expression, index + 1)
                left_value *= right_value
            elif expression[index] == '/':
                right_value, index = self._parse_term(expression, index + 1)
                if right_value == 0:
>                   raise ZeroDivisionError("Division by zero is not allowed.")
E                   ZeroDivisionError: Division by zero is not allowed.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:165: ZeroDivisionError
_______________________ test_divide_negative_parentheses _______________________

calc = <claude.Calculator object at 0x105d58320>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d58320>
expression = '(999999999999999)/0-1', index = 19

    def _parse_multiplication_division(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses multiplication and division operations.
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The result and the new position in the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
        """
        left_value, index = self._parse_term(expression, index)
    
        while index < len(expression):
            if expression[index] == '*':
                right_value, index = self._parse_term(expression, index + 1)
                left_value *= right_value
            elif expression[index] == '/':
                right_value, index = self._parse_term(expression, index + 1)
                if right_value == 0:
>                   raise ZeroDivisionError("Division by zero is not allowed.")
E                   ZeroDivisionError: Division by zero is not allowed.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:165: ZeroDivisionError
____________________ test_divide_negative_float_parentheses ____________________

calc = <claude.Calculator object at 0x105d5a060>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d5a060>
expression = '(00-999999999999999)/0-0.1', index = 22

    def _parse_multiplication_division(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses multiplication and division operations.
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The result and the new position in the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
        """
        left_value, index = self._parse_term(expression, index)
    
        while index < len(expression):
            if expression[index] == '*':
                right_value, index = self._parse_term(expression, index + 1)
                left_value *= right_value
            elif expression[index] == '/':
                right_value, index = self._parse_term(expression, index + 1)
                if right_value == 0:
>                   raise ZeroDivisionError("Division by zero is not allowed.")
E                   ZeroDivisionError: Division by zero is not allowed.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:165: ZeroDivisionError
_____________________ test_add_subtract_positive_negative ______________________

calc = <claude.Calculator object at 0x105d5f1a0>

    def test_add_subtract_positive_negative(calc):
        assert calc.calculate("5+2-3") == 4
        assert calc.calculate("5-2+3") == 6
        assert calc.calculate("1000000000+2000000000-3000000000") == 0
>       assert calc.calculate("-999999999999999-1+1000000000000000") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d5f1a0>
expression = '-999999999999999-1+1000000000000000', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <claude.Calculator object at 0x105d12750>

    def test_add_subtract_positive_float(calc):
        assert calc.calculate("5.5+2.5-3.5") == 4.5
        assert calc.calculate("5.5-2.5+3.5") == 6.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d12750>
expression = '-999999999999999-1.5+1000000000000000.5', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <claude.Calculator object at 0x105d13470>

    def test_add_subtract_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2-3") == 4.5
        assert calc.calculate("5.5+(2)-3") == 4.5
        assert calc.calculate("(5.5)+(2)-3") == 4.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d13470>
expression = '-999999999999999-1.5+1000000000000000.5', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <claude.Calculator object at 0x105d107d0>

    def test_add_subtract_negative_parenhesis(calc):
        assert calc.calculate("5+(-2)-3") == 0
        assert calc.calculate("(-5)+2-3") == -6
        assert calc.calculate("(-5)+(-2)-3") == -10
        assert calc.calculate("1000000000+2000000000+(-3000000000)") == 0
>       assert calc.calculate("-999999999999999+(-1)+1000000000000000") == 0

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:362: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d107d0>
expression = '-999999999999999+(00-1)+1000000000000000', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <claude.Calculator object at 0x1070b3650>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
>       assert calc.calculate("-5+2*3") == 1

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b3650>, expression = '-5+2*3'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <claude.Calculator object at 0x1070b2ff0>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
>       assert calc.calculate("-5.5+2.5*3.5") == 3.25

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b2ff0>, expression = '-5.5+2.5*3.5'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <claude.Calculator object at 0x1070b1fd0>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0
E       AssertionError: assert 999999999999998.0 == 0
E        +  where 999999999999998.0 = calculate('999999999999999*-1+999999999999999')
E        +    where calculate = <claude.Calculator object at 0x1070b1fd0>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:425: AssertionError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <claude.Calculator object at 0x1070b1460>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5
E       AssertionError: assert 999999999999998.0 == -0.5
E        +  where 999999999999998.0 = calculate('(999999999999999.5)*-1+999999999999999')
E        +    where calculate = <claude.Calculator object at 0x1070b1460>.calculate

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:435: AssertionError
_______________________________ test_add_divide ________________________________

calc = <claude.Calculator object at 0x1070b0890>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
>       assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b0890>, expression = '-5+2/3'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
____________________________ test_add_divide_float _____________________________

calc = <claude.Calculator object at 0x105d122d0>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
>       assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d122d0>, expression = '-5.5+2.5/3.5'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_____________________________ test_multiply_divide _____________________________

calc = <claude.Calculator object at 0x105d12360>

    def test_multiply_divide(calc):
        assert calc.calculate("5*2/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("5/2*3") == pytest.approx(7.5, rel=1e-6)
        assert calc.calculate("1000000000/2000000000*3000000000") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999/1*1000000000000000") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d12360>
expression = '-999999999999999/1*1000000000000000', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
__________________________ test_multiply_divide_float __________________________

calc = <claude.Calculator object at 0x1070b0530>

    def test_multiply_divide_float(calc):
        assert calc.calculate("5.5*2.5/3.5") == pytest.approx(3.9285714, rel=1e-6)
        assert calc.calculate("5.5/2.5*3.5") == pytest.approx(7.7, rel=1e-6)
        assert calc.calculate("1000000000.5/2000000000.5*3000000000.5") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999.5/1*1000000000000000.5") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:523: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b0530>
expression = '-999999999999999.5/1*1000000000000000.5', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <claude.Calculator object at 0x1070b0290>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
>       assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:582: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b0290>, expression = '-5-2/3'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <claude.Calculator object at 0x1070b35f0>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
>       assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b35f0>, expression = '-5.5-2.5/3.5'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <claude.Calculator object at 0x105d13a10>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
>       assert calc.calculate("-5-2*3") == -11

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:659: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d13a10>, expression = '-5-2*3'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <claude.Calculator object at 0x105d580e0>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
>       assert calc.calculate("-5.5-2.5*3.5") == -14.25

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:670: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d580e0>, expression = '-5.5-2.5*3.5'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_____________________________ test_all_operations ______________________________

calc = <claude.Calculator object at 0x105d679e0>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
>       assert calc.calculate("-5*2+3/3") == -9

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:724: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d679e0>, expression = '-5*2+3/3'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x105d58b30>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105d58b30>, expression = '-(5+2)*3'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1070b1790>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b1790>
expression = '-((2+3)*((2+3)*2))', index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
_____________________________ test_long_expression _____________________________

calc = <claude.Calculator object at 0x1070b0590>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:37: in calculate
    result = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:115: in _evaluate_expression
    return self._parse_addition_subtraction(expression, 0)[0]
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:128: in _parse_addition_subtraction
    left_value, index = self._parse_multiplication_division(expression, index)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:156: in _parse_multiplication_division
    left_value, index = self._parse_term(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1070b0590>
expression = '-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100'
index = 0

    def _parse_term(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parses a term (number or parenthesized expression).
    
        Args:
            expression (str): The expression to parse.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: The value of the term and the new position.
    
        Raises:
            ValueError: If the term is invalid.
        """
        # Skip whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we're at the end of the expression
        if index >= len(expression):
            raise ValueError("Unexpected end of expression.")
    
        # Handle opening parenthesis
        if expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # Skip the closing parenthesis
            if index < len(expression) and expression[index] == ')':
                return value, index + 1
            else:
                raise ValueError("Missing closing parenthesis.")
    
        # Handle numbers (including decimals and scientific notation)
        if expression[index].isdigit() or expression[index] == '.':
            # Extract the numeric string
            start = index
            has_decimal = expression[index] == '.'
            has_exponent = False
    
            index += 1
            while index < len(expression):
                if expression[index].isdigit():
                    index += 1
                elif expression[index] == '.' and not has_decimal:
                    has_decimal = True
                    index += 1
                elif expression[index].lower() == 'e' and not has_exponent:
                    # Handle scientific notation
                    has_exponent = True
                    index += 1
                    # Allow for +/- after the 'e'
                    if index < len(expression) and (expression[index] == '+' or expression[index] == '-'):
                        index += 1
                else:
                    break
    
            try:
                value = float(expression[start:index])
                return value, index
            except ValueError:
                raise ValueError(f"Invalid number format: {expression[start:index]}")
    
>       raise ValueError(f"Unexpected character at position {index}: '{expression[index]}'")
E       ValueError: Unexpected character at position 0: '-'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/claude.py:234: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_neutral
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_neutral_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_subtract_positive_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_positive
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_positive_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_divide
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_divide_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_divide
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_divide_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_divide
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_divide_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_multiply
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_multiply_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_all_operations
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-claude.py::test_long_expression
======================== 33 failed, 55 passed in 0.52s =========================
