Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-chatgpt.py . [  1%]
.....................................FF................................. [ 82%]
...............                                                          [100%]

=================================== FAILURES ===================================
_____________________________ test_divide_neutral ______________________________

calc = <chatgpt.Calculator object at 0x10293e6c0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-chatgpt.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10293e6c0>

    def _parse_term(self) -> float:
        """
        Parses a term based on the grammar:
            Term -> Factor { ('*' | '/') Factor }*
    
        Returns:
            float: The evaluated result of the term.
        """
        result = self._parse_factor()
        # Process multiplication and division operators
        while self.current < len(self.tokens) and self.tokens[self.current] in ('*', '/'):
            op = self.tokens[self.current]
            self.current += 1
            right = self._parse_factor()
            if op == '*':
                result *= right
            elif op == '/':
                if right == 0:
>                   raise ValueError("Division by zero error.")
E                   ValueError: Division by zero error.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/chatgpt.py:156: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <chatgpt.Calculator object at 0x102938650>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-chatgpt.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102938650>

    def _parse_term(self) -> float:
        """
        Parses a term based on the grammar:
            Term -> Factor { ('*' | '/') Factor }*
    
        Returns:
            float: The evaluated result of the term.
        """
        result = self._parse_factor()
        # Process multiplication and division operators
        while self.current < len(self.tokens) and self.tokens[self.current] in ('*', '/'):
            op = self.tokens[self.current]
            self.current += 1
            right = self._parse_factor()
            if op == '*':
                result *= right
            elif op == '/':
                if right == 0:
>                   raise ValueError("Division by zero error.")
E                   ValueError: Division by zero error.

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/chatgpt.py:156: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-chatgpt.py::test_divide_neutral
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-chatgpt.py::test_divide_neutral_float
========================= 2 failed, 86 passed in 0.22s =========================
