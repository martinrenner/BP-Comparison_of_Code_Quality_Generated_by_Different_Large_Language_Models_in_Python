Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
............F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x10258d1c0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:42: in calculate
    result, remaining = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:104: in _evaluate_expression
    return self._parse_addition_subtraction(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:122: in _parse_addition_subtraction
    right_value, expression = self._parse_multiplication_division(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:144: in _parse_multiplication_division
    left_value, expression = self._parse_number_or_parenthesis(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:195: in _parse_number_or_parenthesis
    return self._parse_number(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10258d1c0>, expression = '+3'

    def _parse_number(self, expression: str) -> tuple[float, str]:
        """
        Parses a number from the beginning of an expression.
    
        Args:
            expression (str): The expression to parse.
    
        Returns:
            tuple: (number as float, remaining expression as string)
    
        Raises:
            ValueError: If the expression doesn't start with a valid number.
        """
        if not expression or not (expression[0].isdigit() or expression[0] == '.'):
>           raise ValueError(f"Expected number, got '{expression}'")
E           ValueError: Expected number, got '+3'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:211: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x102588050>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:42: in calculate
    result, remaining = self._evaluate_expression(normalized_expr)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:104: in _evaluate_expression
    return self._parse_addition_subtraction(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:122: in _parse_addition_subtraction
    right_value, expression = self._parse_multiplication_division(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:144: in _parse_multiplication_division
    left_value, expression = self._parse_number_or_parenthesis(expression)
generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:195: in _parse_number_or_parenthesis
    return self._parse_number(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102588050>, expression = '+3.5'

    def _parse_number(self, expression: str) -> tuple[float, str]:
        """
        Parses a number from the beginning of an expression.
    
        Args:
            expression (str): The expression to parse.
    
        Returns:
            tuple: (number as float, remaining expression as string)
    
        Raises:
            ValueError: If the expression doesn't start with a valid number.
        """
        if not expression or not (expression[0].isdigit() or expression[0] == '.'):
>           raise ValueError(f"Expected number, got '{expression}'")
E           ValueError: Expected number, got '+3.5'

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:211: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x102589cd0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102589cd0>, expression = '5*(2+3'

    def calculate(self, expression: str) -> float:
        """
        Evaluates a mathematical expression and returns the result.
    
        Args:
            expression (str): The mathematical expression to evaluate.
    
        Returns:
            float: The result of the expression evaluation.
    
        Raises:
            ValueError: If the expression contains invalid characters or syntax.
            ZeroDivisionError: If the expression attempts division by zero.
            SyntaxError: If parentheses are unbalanced or expression is malformed.
        """
        # Normalize and validate the expression
        normalized_expr = self._normalize_expression(expression)
    
        # Check for balanced parentheses
        if not self._is_balanced_parentheses(normalized_expr):
>           raise SyntaxError("Unbalanced parentheses in the expression")
E           SyntaxError: Unbalanced parentheses in the expression

generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/claude.py:39: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/4-chain_of_thoughts-few_shot/iteration_5/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 3 failed, 85 passed in 0.23s =========================
