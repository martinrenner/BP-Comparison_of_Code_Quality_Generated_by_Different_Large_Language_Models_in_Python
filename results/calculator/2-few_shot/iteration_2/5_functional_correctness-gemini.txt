Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py F [  1%]
FFFFFFFFFFFFFFFFFFF..................FFFFFFFFFFFFFFFFFFFF......FFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_positive _______________________________

calc = <gemini.Calculator object at 0x107e20950>

    def test_add_positive(calc):
>       assert calc.calculate("1+2") == 3

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e20950>, tokens = ['1', '+2']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
___________________________ test_add_positive_float ____________________________

calc = <gemini.Calculator object at 0x107e1ec90>

    def test_add_positive_float(calc):
>       assert calc.calculate("1.5+2.5") == 4

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1ec90>, tokens = ['1.5', '+2.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
________________________ test_add__positive_parentheses ________________________

calc = <gemini.Calculator object at 0x107e215e0>

    def test_add__positive_parentheses(calc):
>       assert calc.calculate("(1)+2") == 3

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e215e0>, tokens = ['(', '1', ')', '+2']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________ test_add_positive_float_parentheses ______________________

calc = <gemini.Calculator object at 0x107e1e5a0>

    def test_add_positive_float_parentheses(calc):
>       assert calc.calculate("(1.5)+2") == pytest.approx(3.5, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1e5a0>
tokens = ['(', '1.5', ')', '+2']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x107e1f020>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
>       assert calc.calculate("-1+2") == 1

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1f020>, tokens = ['-1', '+2']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
___________________________ test_add_negative_float ____________________________

calc = <gemini.Calculator object at 0x107e1ea50>

    def test_add_negative_float(calc):
        assert calc.calculate("1.5+-2.5") == -1
>       assert calc.calculate("-1.5+2.5") == 1

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1ea50>, tokens = ['-1.5', '+2.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
________________________ test_add_negative_parantheses _________________________

calc = <gemini.Calculator object at 0x107e1dca0>

    def test_add_negative_parantheses(calc):
        assert calc.calculate("1+(-2)") == -1
>       assert calc.calculate("(-1)+2") == 1

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1dca0>
tokens = ['(', '-1', ')', '+2']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________ test_add_negative_float_parentheses ______________________

calc = <gemini.Calculator object at 0x107e1cef0>

    def test_add_negative_float_parentheses(calc):
        assert calc.calculate("(1.5)+(-2)") == -0.5
>       assert calc.calculate("(-1.5)+2") == 0.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1cef0>
tokens = ['(', '-1.5', ')', '+2']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_______________________________ test_add_neutral _______________________________

calc = <gemini.Calculator object at 0x107e1e8d0>

    def test_add_neutral(calc):
>       assert calc.calculate("0+0") == 0

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1e8d0>, tokens = ['0', '+0']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________________ test_add_neutral_float ____________________________

calc = <gemini.Calculator object at 0x107e1ecc0>

    def test_add_neutral_float(calc):
>       assert calc.calculate("0.0+0.0") == 0

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1ecc0>, tokens = ['0.0', '+0.0']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________________ test_subtract_positive ____________________________

calc = <gemini.Calculator object at 0x107e1f410>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1f410>, tokens = ['5', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________________ test_subtract_positive_float _________________________

calc = <gemini.Calculator object at 0x107e21370>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e21370>, tokens = ['5.5', '-3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x107dd4fb0>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd4fb0>, tokens = ['(', '5', ')', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x107dd48f0>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd48f0>
tokens = ['(', '5.5', ')', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x107e1c4a0>

    def test_subtract_negative(calc):
        assert calc.calculate("5-+3") == 2
>       assert calc.calculate("-5-3") == -8

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1c4a0>, tokens = ['-5', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x109173800>

    def test_subtract_negative_float(calc):
        assert calc.calculate("5.5-+3.5") == 2
>       assert calc.calculate("-5.5-3.5") == -9

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109173800>, tokens = ['-5.5', '-3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x109172f00>

    def test_subtract_negative_parentheses(calc):
        assert calc.calculate("5-(-3)") == 8
>       assert calc.calculate("(-5)-3") == -8

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109172f00>
tokens = ['(', '-5', ')', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x109172570>

    def test_subtract_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-3)") == 8.5
>       assert calc.calculate("(-5.5)-3") == -8.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109172570>
tokens = ['(', '-5.5', ')', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________________ test_subtract_neutral _____________________________

calc = <gemini.Calculator object at 0x109171a90>

    def test_subtract_neutral(calc):
>       assert calc.calculate("0-0") == 0

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109171a90>, tokens = ['0', '-0']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________________ test_subtract_neutral_float __________________________

calc = <gemini.Calculator object at 0x109170e00>

    def test_subtract_neutral_float(calc):
>       assert calc.calculate("0.0-0.0") == 0

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109170e00>, tokens = ['0.0', '-0.0']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x107e1d070>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_2/gemini.py:147: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list, values: list) -> None:
        """Applies an operator to the top two values on the value stack."""
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
>                   raise ValueError("Division by zero")
E                   ValueError: Division by zero

generated/code/calculator/2-few_shot/iteration_2/gemini.py:119: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x1091707d0>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_2/gemini.py:147: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list, values: list) -> None:
        """Applies an operator to the top two values on the value stack."""
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
>                   raise ValueError("Division by zero")
E                   ValueError: Division by zero

generated/code/calculator/2-few_shot/iteration_2/gemini.py:119: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x109172480>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109172480>, tokens = ['5', '+2', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x109172b10>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109172b10>
tokens = ['5.5', '+2.5', '-3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x107e1d2b0>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1d2b0>
tokens = ['(', '5', ')', '+2', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x107e1fe90>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1fe90>
tokens = ['(', '5.5', ')', '+2', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x107e259a0>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e259a0>
tokens = ['5', '+', '(', '-2', ')', '-3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x107e1e8a0>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1e8a0>
tokens = ['5.5', '+', '(', '-2.5', ')', '-3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x109172a50>

    def test_add_multiply_positive(calc):
>       assert calc.calculate("5+2*3") == 11

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:377: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109172a50>, tokens = ['5', '+2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x1091720f0>

    def test_add_multiply_positive_float(calc):
>       assert calc.calculate("5.5+2.5*3.5") == 14.25

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:388: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1091720f0>
tokens = ['5.5', '+2.5', '*', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________ test_add_multiply_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x107e23ef0>

    def test_add_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)+2*3") == 11

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e23ef0>
tokens = ['(', '5', ')', '+2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________ test_add_multiply_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x107dd65a0>

    def test_add_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2*3") == 11.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd65a0>
tokens = ['(', '5.5', ')', '+2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x107dd6ba0>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
>       assert calc.calculate("(-5)+2*3") == 1

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd6ba0>
tokens = ['(', '-5', ')', '+2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x109170e00>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
>       assert calc.calculate("(-5.5)+2.5*3.5") == 3.25

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109170e00>
tokens = ['(', '-5.5', ')', '+2.5', '*', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_______________________________ test_add_divide ________________________________

calc = <gemini.Calculator object at 0x107e1d310>

    def test_add_divide(calc):
>       assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1d310>, tokens = ['5', '+2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________________ test_add_divide_float _____________________________

calc = <gemini.Calculator object at 0x107dd6c60>

    def test_add_divide_float(calc):
>       assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:453: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd6c60>
tokens = ['5.5', '+2.5', '/', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________ test_add_divide_positive_parentheses _____________________

calc = <gemini.Calculator object at 0x107dd6960>

    def test_add_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)+2/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd6960>
tokens = ['(', '5', ')', '+2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
__________________ test_add_divide_positive_float_parentheses __________________

calc = <gemini.Calculator object at 0x107dd4b90>

    def test_add_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2/3") == pytest.approx(6.16666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd4b90>
tokens = ['(', '5.5', ')', '+2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________ test_add_divide_negative_parentheses _____________________

calc = <gemini.Calculator object at 0x107dd5160>

    def test_add_divide_negative_parentheses(calc):
        assert calc.calculate("5+(-2)/3") == pytest.approx(4.33333333, rel=1e-6)
>       assert calc.calculate("(-5)+2/3") == pytest.approx(-4.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd5160>
tokens = ['(', '-5', ')', '+2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
__________________ test_add_divide_negative_float_parentheses __________________

calc = <gemini.Calculator object at 0x107dd64b0>

    def test_add_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)/3.5") == pytest.approx(4.78571428, rel=1e-6)
>       assert calc.calculate("(-5.5)+2.5/3.5") == pytest.approx(-4.78571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd64b0>
tokens = ['(', '-5.5', ')', '+2.5', '/', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x107e1d6a0>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e1d6a0>, tokens = ['5', '-2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x109171c10>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x109171c10>
tokens = ['5.5', '-2.5', '/', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x107cec500>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cec500>
tokens = ['(', '5', ')', '-2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x107cef860>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cef860>
tokens = ['(', '5.5', ')', '-2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x107cefce0>

    def test_subtract_divide_negative_parentheses(calc):
        assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)
>       assert calc.calculate("(-5)-2/3") == pytest.approx(-5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:631: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cefce0>
tokens = ['(', '-5', ')', '-2', '/', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x1091729f0>

    def test_subtract_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)
>       assert calc.calculate("(-5.5)-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1091729f0>
tokens = ['(', '-5.5', ')', '-2.5', '/', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x107dd5c10>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:657: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd5c10>, tokens = ['5', '-2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x107ced220>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:668: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107ced220>
tokens = ['5.5', '-2.5', '*', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x107ceea20>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107ceea20>
tokens = ['(', '5', ')', '-2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x107cee180>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cee180>
tokens = ['(', '5.5', ')', '-2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x107cef230>

    def test_subtract_multiply_negative_parentheses(calc):
        assert calc.calculate("5-(-2)*3") == 11
>       assert calc.calculate("(-5)-2*3") == -11

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cef230>
tokens = ['(', '-5', ')', '-2', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x107cecf80>

    def test_subtract_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)*3.5") == 14.25
>       assert calc.calculate("(-5.5)-2.5*3.5") == -14.25

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cecf80>
tokens = ['(', '-5.5', ')', '-2.5', '*', '3.5']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x107cedeb0>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cedeb0>
tokens = ['5', '+2', '*', '3', '-4', '/', ...]

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x107dd4950>

    def test_general_parentheses(calc):
>       assert calc.calculate("(5+2)*3") == 21

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:733: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107dd4950>
tokens = ['(', '5', '+2', ')', '*', '3']

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x107e22480>

    def test_nested_parentheses(calc):
>       assert calc.calculate("((2+3)*2)") == 10

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107e22480>
tokens = ['(', '(', '2', '+3', ')', '*', ...]

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x107cebfb0>

    def test_long_expression(calc):
        assert (
>           calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )

generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py:757: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_2/gemini.py:27: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107cebfb0>
tokens = ['100', '+100', '+100', '+100', '+100', '+100', ...]

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the tokenized expression and evaluates it, respecting operator precedence.
        Uses the Shunting Yard algorithm to convert infix notation to postfix (RPN) and then evaluates RPN.
    
        Args:
           tokens (list): The list of tokens.
    
        Returns:
            float: The result of the expression.
        Raises:
            ValueError: If expression is invalid
        """
    
        def precedence(operator: str) -> int:
            """Returns the precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list, values: list) -> None:
            """Applies an operator to the top two values on the value stack."""
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ValueError("Division by zero")
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression format")
    
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"[-+]?\d*\.?\d+", token):  # Check if it's a number (including negative numbers)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                if not operators:
                    raise ValueError("Invalid expression: Mismatched parentheses")
                operators.pop()  # Pop the '('
            elif token in ('+', '-', '*', '/'):
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':
                raise ValueError("Invalid Expression: Mismatched parentheses")  # extra '('
            apply_operator(operators, values)
    
        if len(values) != 1:
>           raise ValueError("Invalid expression format")
E           ValueError: Invalid expression format

generated/code/calculator/2-few_shot/iteration_2/gemini.py:150: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_positive
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add__positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative_parantheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_neutral
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_neutral
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_2/5_functional_correctness-gemini.py::test_long_expression
======================== 56 failed, 32 passed in 0.70s =========================
