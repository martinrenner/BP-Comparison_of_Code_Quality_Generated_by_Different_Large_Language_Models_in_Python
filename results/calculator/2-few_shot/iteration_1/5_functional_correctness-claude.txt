Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x1046b54f0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_1/claude.py:49: in calculate
    result, _ = self._parse_expression(normalized_expr, 0)
generated/code/calculator/2-few_shot/iteration_1/claude.py:113: in _parse_expression
    right_term, index = self._parse_term(expression, index + 1)
generated/code/calculator/2-few_shot/iteration_1/claude.py:137: in _parse_term
    result, index = self._parse_factor(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1046b54f0>, expression = '5-+3', index = 2

    def _parse_factor(self, expression: str, index: int) -> tuple:
        """
        Parses and evaluates a factor in the expression (number or parenthesized expression).
    
        Args:
            expression (str): The expression being parsed.
            index (int): Current position in the expression.
    
        Returns:
            tuple: (result, new_index) where result is the evaluation result
                  and new_index is the position after parsing.
    
        Raises:
            ValueError: If the expression has invalid syntax.
        """
        if index >= len(expression):
            raise ValueError("Unexpected end of expression")
    
        char = expression[index]
    
        if char == '(':
            # Handle parenthesized expression
            result, index = self._parse_expression(expression, index + 1)
    
            # Ensure the closing parenthesis is present
            if index < len(expression) and expression[index] == ')':
                return result, index + 1
            else:
                raise ValueError("Expected closing parenthesis")
    
        elif char.isdigit() or char == '.' or (char == '-' and (index == 0 or expression[index-1] in '(+-*/')):
            # Handle number (including negative numbers)
            return self._parse_number(expression, index)
    
        else:
>           raise ValueError(f"Unexpected character '{char}' at position {index}")
E           ValueError: Unexpected character '+' at position 2

generated/code/calculator/2-few_shot/iteration_1/claude.py:194: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x1046b2de0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_1/claude.py:49: in calculate
    result, _ = self._parse_expression(normalized_expr, 0)
generated/code/calculator/2-few_shot/iteration_1/claude.py:113: in _parse_expression
    right_term, index = self._parse_term(expression, index + 1)
generated/code/calculator/2-few_shot/iteration_1/claude.py:137: in _parse_term
    result, index = self._parse_factor(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1046b2de0>, expression = '5.5-+3.5'
index = 4

    def _parse_factor(self, expression: str, index: int) -> tuple:
        """
        Parses and evaluates a factor in the expression (number or parenthesized expression).
    
        Args:
            expression (str): The expression being parsed.
            index (int): Current position in the expression.
    
        Returns:
            tuple: (result, new_index) where result is the evaluation result
                  and new_index is the position after parsing.
    
        Raises:
            ValueError: If the expression has invalid syntax.
        """
        if index >= len(expression):
            raise ValueError("Unexpected end of expression")
    
        char = expression[index]
    
        if char == '(':
            # Handle parenthesized expression
            result, index = self._parse_expression(expression, index + 1)
    
            # Ensure the closing parenthesis is present
            if index < len(expression) and expression[index] == ')':
                return result, index + 1
            else:
                raise ValueError("Expected closing parenthesis")
    
        elif char.isdigit() or char == '.' or (char == '-' and (index == 0 or expression[index-1] in '(+-*/')):
            # Handle number (including negative numbers)
            return self._parse_number(expression, index)
    
        else:
>           raise ValueError(f"Unexpected character '{char}' at position {index}")
E           ValueError: Unexpected character '+' at position 4

generated/code/calculator/2-few_shot/iteration_1/claude.py:194: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x1046b3200>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_1/claude.py:49: in calculate
    result, _ = self._parse_expression(normalized_expr, 0)
generated/code/calculator/2-few_shot/iteration_1/claude.py:104: in _parse_expression
    result, index = self._parse_term(expression, index)
generated/code/calculator/2-few_shot/iteration_1/claude.py:137: in _parse_term
    result, index = self._parse_factor(expression, index)
generated/code/calculator/2-few_shot/iteration_1/claude.py:191: in _parse_factor
    return self._parse_number(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1046b3200>, expression = '-(5+2)*3'
index = 1

    def _parse_number(self, expression: str, index: int) -> tuple:
        """
        Parses a numeric value from the expression.
    
        Args:
            expression (str): The expression being parsed.
            index (int): Current position in the expression.
    
        Returns:
            tuple: (number, new_index) where number is the parsed numeric value
                  and new_index is the position after the number.
    
        Raises:
            ValueError: If the number format is invalid.
        """
        # Check if the number is negative
        is_negative = False
        if index < len(expression) and expression[index] == '-':
            is_negative = True
            index += 1
    
        # Extract digits before decimal point
        start_index = index
        while index < len(expression) and (expression[index].isdigit() or expression[index] == '.'):
            index += 1
    
        # If we didn't find any digits, this is an error
        if index == start_index and not is_negative:
            raise ValueError(f"Expected a number at position {start_index}")
    
        # If we only found a negative sign with no digits, this is an error
        if index == start_index and is_negative:
>           raise ValueError(f"Expected a number after '-' at position {start_index - 1}")
E           ValueError: Expected a number after '-' at position 0

generated/code/calculator/2-few_shot/iteration_1/claude.py:228: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1046b2b40>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_1/claude.py:49: in calculate
    result, _ = self._parse_expression(normalized_expr, 0)
generated/code/calculator/2-few_shot/iteration_1/claude.py:104: in _parse_expression
    result, index = self._parse_term(expression, index)
generated/code/calculator/2-few_shot/iteration_1/claude.py:137: in _parse_term
    result, index = self._parse_factor(expression, index)
generated/code/calculator/2-few_shot/iteration_1/claude.py:191: in _parse_factor
    return self._parse_number(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1046b2b40>
expression = '-((2+3)*((2+3)*2))', index = 1

    def _parse_number(self, expression: str, index: int) -> tuple:
        """
        Parses a numeric value from the expression.
    
        Args:
            expression (str): The expression being parsed.
            index (int): Current position in the expression.
    
        Returns:
            tuple: (number, new_index) where number is the parsed numeric value
                  and new_index is the position after the number.
    
        Raises:
            ValueError: If the number format is invalid.
        """
        # Check if the number is negative
        is_negative = False
        if index < len(expression) and expression[index] == '-':
            is_negative = True
            index += 1
    
        # Extract digits before decimal point
        start_index = index
        while index < len(expression) and (expression[index].isdigit() or expression[index] == '.'):
            index += 1
    
        # If we didn't find any digits, this is an error
        if index == start_index and not is_negative:
            raise ValueError(f"Expected a number at position {start_index}")
    
        # If we only found a negative sign with no digits, this is an error
        if index == start_index and is_negative:
>           raise ValueError(f"Expected a number after '-' at position {start_index - 1}")
E           ValueError: Expected a number after '-' at position 0

generated/code/calculator/2-few_shot/iteration_1/claude.py:228: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_1/5_functional_correctness-claude.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.23s =========================
