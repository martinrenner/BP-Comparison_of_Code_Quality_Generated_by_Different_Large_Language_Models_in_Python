Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py . [  1%]
.FFFFFF....FFFFFF....FFFFFFFF..FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
________________________ test_add__positive_parentheses ________________________

calc = <gemini.Calculator object at 0x102554110>

    def test_add__positive_parentheses(calc):
>       assert calc.calculate("(1)+2") == 3

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102554110>, expression = '(*()+2'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_____________________ test_add_positive_float_parentheses ______________________

calc = <gemini.Calculator object at 0x102552780>

    def test_add_positive_float_parentheses(calc):
>       assert calc.calculate("(1.5)+2") == pytest.approx(3.5, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102552780>, expression = '(*()+2'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
______________________________ test_add_negative _______________________________

self = <gemini.Calculator object at 0x102554800>, tokens = ['1', '+', '2', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102554800>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102554800>, tokens = ['1', '+', '2', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
___________________________ test_add_negative_float ____________________________

self = <gemini.Calculator object at 0x102551010>
tokens = ['1.5', '+', '2.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102551010>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102551010>
tokens = ['1.5', '+', '2.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
________________________ test_add_negative_parantheses _________________________

self = <gemini.Calculator object at 0x102550aa0>, tokens = ['1', '2', '-', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102550aa0>

    def test_add_negative_parantheses(calc):
>       assert calc.calculate("1+(-2)") == -1

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102550aa0>, tokens = ['1', '2', '-', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_____________________ test_add_negative_float_parentheses ______________________

calc = <gemini.Calculator object at 0x102552660>

    def test_add_negative_float_parentheses(calc):
>       assert calc.calculate("(1.5)+(-2)") == -0.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102552660>, expression = '(*()+(-2)'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x102551bb0>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102551bb0>, expression = '(*()-3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x102550080>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102550080>, expression = '(*()-3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
____________________________ test_subtract_negative ____________________________

self = <gemini.Calculator object at 0x102550f20>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102550f20>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102550f20>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________________ test_subtract_negative_float _________________________

self = <gemini.Calculator object at 0x102552660>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102552660>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102552660>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
______________________ test_subtract_negative_parentheses ______________________

self = <gemini.Calculator object at 0x102551010>, tokens = ['5', '3', '-', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102551010>

    def test_subtract_negative_parentheses(calc):
>       assert calc.calculate("5-(-3)") == 8

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102551010>, tokens = ['5', '3', '-', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

self = <gemini.Calculator object at 0x10250b710>
tokens = ['5.5', '3', '-', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x10250b710>

    def test_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-3)") == 8.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10250b710>
tokens = ['5.5', '3', '-', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
______________________ test_multiply_positeve_parentheses ______________________

calc = <gemini.Calculator object at 0x102508470>

    def test_multiply_positeve_parentheses(calc):
>       assert calc.calculate("(2)*3") == 6

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102508470>, expression = '(*()*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
___________________ test_multiply_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x102508380>

    def test_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(2.5)*3") == 7.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102508380>, expression = '(*()*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
____________________________ test_multiply_negative ____________________________

self = <gemini.Calculator object at 0x1025533e0>, tokens = ['2', '*', '3', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025533e0>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025533e0>, tokens = ['2', '*', '3', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
______________________ test_multiply_negative_parentheses ______________________

self = <gemini.Calculator object at 0x1038a76e0>, tokens = ['2', '3', '-', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a76e0>

    def test_multiply_negative_parentheses(calc):
>       assert calc.calculate("2*(-3)") == -6

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a76e0>, tokens = ['2', '3', '-', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________________ test_multiply_negative_float _________________________

self = <gemini.Calculator object at 0x1038a7140>
tokens = ['2.5', '*', '3.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a7140>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a7140>
tokens = ['2.5', '*', '3.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
___________________ test_multiply_negative_float_parentheses ___________________

self = <gemini.Calculator object at 0x1038a6000>
tokens = ['2.5', '3.5', '-', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a6000>

    def test_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("2.5*(-3.5)") == -8.75

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a6000>
tokens = ['2.5', '3.5', '-', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
____________________________ test_multiply_neutral _____________________________

self = <gemini.Calculator object at 0x1038a5160>, tokens = ['0', '*', '5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a5160>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a5160>, tokens = ['0', '*', '5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________________ test_multiply_neutral_float __________________________

self = <gemini.Calculator object at 0x102551280>
tokens = ['0.0', '*', '5.0', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102551280>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102551280>
tokens = ['0.0', '*', '5.0', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________________ test_divide_positive_parentheses _______________________

calc = <gemini.Calculator object at 0x102550680>

    def test_divide_positive_parentheses(calc):
>       assert calc.calculate("(6)/3") == 2

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102550680>, expression = '(*()/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
____________________ test_divide_positive_float_parentheses ____________________

calc = <gemini.Calculator object at 0x10255caa0>

    def test_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(6.5)/3") == pytest.approx(2.1666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10255caa0>, expression = '(*()/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_____________________________ test_divide_negative _____________________________

self = <gemini.Calculator object at 0x1038a65a0>, tokens = ['6', '/', '3', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a65a0>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a65a0>, tokens = ['6', '/', '3', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________________ test_divide_negative_float __________________________

self = <gemini.Calculator object at 0x1038a5340>
tokens = ['6.5', '/', '3.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a5340>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a5340>
tokens = ['6.5', '/', '3.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________________ test_divide_negative_parentheses _______________________

self = <gemini.Calculator object at 0x1038a7080>, tokens = ['6', '3', '-', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a7080>

    def test_divide_negative_parentheses(calc):
>       assert calc.calculate("6/(-3)") == -2

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a7080>, tokens = ['6', '3', '-', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
____________________ test_divide_negative_float_parentheses ____________________

self = <gemini.Calculator object at 0x102508740>
tokens = ['6.5', '3.5', '-', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102508740>

    def test_divide_negative_float_parentheses(calc):
>       assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102508740>
tokens = ['6.5', '3.5', '-', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x10250b1a0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10250b1a0>, tokens = ['5', '0', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: insufficient operands")
    
                if token == '+':
                    operand_stack.append(operand1 + operand2)
                elif token == '-':
                    operand_stack.append(operand1 - operand2)
                elif token == '*':
                    operand_stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/2-few_shot/iteration_10/gemini.py:207: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x1038a7500>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a7500>, tokens = ['5.0', '0.0', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: insufficient operands")
    
                if token == '+':
                    operand_stack.append(operand1 + operand2)
                elif token == '-':
                    operand_stack.append(operand1 - operand2)
                elif token == '*':
                    operand_stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/2-few_shot/iteration_10/gemini.py:207: ValueError
_____________________ test_add_subtract_positive_negative ______________________

self = <gemini.Calculator object at 0x1038a4380>
tokens = ['999999999999999', '-', '1', '-', '1000000000000000', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a4380>

    def test_add_subtract_positive_negative(calc):
        assert calc.calculate("5+2-3") == 4
        assert calc.calculate("5-2+3") == 6
        assert calc.calculate("1000000000+2000000000-3000000000") == 0
>       assert calc.calculate("-999999999999999-1+1000000000000000") == 0

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a4380>
tokens = ['999999999999999', '-', '1', '-', '1000000000000000', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________________ test_add_subtract_positive_float _______________________

self = <gemini.Calculator object at 0x102557b90>
tokens = ['999999999999999', '-', '1.5', '-', '1000000000000000.5', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102557b90>

    def test_add_subtract_positive_float(calc):
        assert calc.calculate("5.5+2.5-3.5") == 4.5
        assert calc.calculate("5.5-2.5+3.5") == 6.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102557b90>
tokens = ['999999999999999', '-', '1.5', '-', '1000000000000000.5', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x10250aa80>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10250aa80>, expression = '(*()+2-3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x102508b90>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102508b90>, expression = '(*()+2-3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

self = <gemini.Calculator object at 0x10250ba40>
tokens = ['5', '2', '-', '+', '3', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x10250ba40>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10250ba40>
tokens = ['5', '2', '-', '+', '3', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

self = <gemini.Calculator object at 0x1025083b0>
tokens = ['5.5', '2.5', '-', '+', '3.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025083b0>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025083b0>
tokens = ['5.5', '2.5', '-', '+', '3.5', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________________ test_add_multiply_positive __________________________

self = <gemini.Calculator object at 0x10255c080>
tokens = ['5', '-', '2', '3', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x10255c080>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
>       assert calc.calculate("-5+2*3") == 1

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10255c080>
tokens = ['5', '-', '2', '3', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________________ test_add_multiply_positive_float _______________________

self = <gemini.Calculator object at 0x1038a7890>
tokens = ['5.5', '-', '2.5', '3.5', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a7890>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
>       assert calc.calculate("-5.5+2.5*3.5") == 3.25

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a7890>
tokens = ['5.5', '-', '2.5', '3.5', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
____________________ test_add_multiply_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x102501ee0>

    def test_add_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)+2*3") == 11

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102501ee0>, expression = '(*()+2*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_________________ test_add_multiply_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x1025030e0>

    def test_add_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2*3") == 11.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025030e0>, expression = '(*()+2*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

self = <gemini.Calculator object at 0x1025016d0>
tokens = ['5', '2', '-', '3', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025016d0>

    def test_add_multiply_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)*3") == -1

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:419: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025016d0>
tokens = ['5', '2', '-', '3', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

self = <gemini.Calculator object at 0x1038a70e0>
tokens = ['5.5', '2.5', '-', '3.5', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a70e0>

    def test_add_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)*3.5") == -3.25

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:429: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a70e0>
tokens = ['5.5', '2.5', '-', '3.5', '*', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________________________ test_add_divide ________________________________

self = <gemini.Calculator object at 0x102508da0>
tokens = ['5', '-', '2', '3', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102508da0>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
>       assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102508da0>
tokens = ['5', '-', '2', '3', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
____________________________ test_add_divide_float _____________________________

self = <gemini.Calculator object at 0x102502870>
tokens = ['5.5', '-', '2.5', '3.5', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102502870>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
>       assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102502870>
tokens = ['5.5', '-', '2.5', '3.5', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_____________________ test_add_divide_positive_parentheses _____________________

calc = <gemini.Calculator object at 0x102500230>

    def test_add_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)+2/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102500230>, expression = '(*()+2/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
__________________ test_add_divide_positive_float_parentheses __________________

calc = <gemini.Calculator object at 0x102502e70>

    def test_add_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2/3") == pytest.approx(6.16666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102502e70>, expression = '(*()+2/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_____________________ test_add_divide_negative_parentheses _____________________

self = <gemini.Calculator object at 0x1024fc980>
tokens = ['5', '2', '-', '3', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024fc980>

    def test_add_divide_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)/3") == pytest.approx(4.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fc980>
tokens = ['5', '2', '-', '3', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________ test_add_divide_negative_float_parentheses __________________

self = <gemini.Calculator object at 0x1025002f0>
tokens = ['5.5', '2.5', '-', '3.5', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025002f0>

    def test_add_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)/3.5") == pytest.approx(4.78571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025002f0>
tokens = ['5.5', '2.5', '-', '3.5', '/', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_____________________________ test_multiply_divide _____________________________

self = <gemini.Calculator object at 0x1025031d0>
tokens = ['999999999999999', '1', '/', '1000000000000000', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1025031d0>

    def test_multiply_divide(calc):
        assert calc.calculate("5*2/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("5/2*3") == pytest.approx(7.5, rel=1e-6)
        assert calc.calculate("1000000000/2000000000*3000000000") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999/1*1000000000000000") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1025031d0>
tokens = ['999999999999999', '1', '/', '1000000000000000', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________________ test_multiply_divide_float __________________________

self = <gemini.Calculator object at 0x1038a50a0>
tokens = ['999999999999999.5', '1', '/', '1000000000000000.5', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a50a0>

    def test_multiply_divide_float(calc):
        assert calc.calculate("5.5*2.5/3.5") == pytest.approx(3.9285714, rel=1e-6)
        assert calc.calculate("5.5/2.5*3.5") == pytest.approx(7.7, rel=1e-6)
        assert calc.calculate("1000000000.5/2000000000.5*3000000000.5") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999.5/1*1000000000000000.5") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:523: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a50a0>
tokens = ['999999999999999.5', '1', '/', '1000000000000000.5', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________ test_multiply_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x1024fd760>

    def test_multiply_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)*2/3") == pytest.approx(3.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:529: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fd760>, expression = '(*()*2/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_______________ test_multiply_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x1024fd550>

    def test_multiply_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)*2/3") == pytest.approx(3.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:541: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fd550>, expression = '(*()*2/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
__________________ test_multiply_divide_negative_parentheses ___________________

self = <gemini.Calculator object at 0x1024ffc50>
tokens = ['5', '2', '-', '*', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024ffc50>

    def test_multiply_divide_negative_parentheses(calc):
>       assert calc.calculate("5*(-2)/3") == pytest.approx(-3.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024ffc50>
tokens = ['5', '2', '-', '*', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________ test_multiply_divide_negative_float_parentheses ________________

self = <gemini.Calculator object at 0x102502d20>
tokens = ['5.5', '2.5', '-', '*', '3.5', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102502d20>

    def test_multiply_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5*(-2.5)/3.5") == pytest.approx(-3.928571, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:565: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102502d20>
tokens = ['5.5', '2.5', '-', '*', '3.5', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_____________________________ test_subtract_divide _____________________________

self = <gemini.Calculator object at 0x102502480>
tokens = ['5', '-', '2', '3', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x102502480>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
>       assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:582: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102502480>
tokens = ['5', '-', '2', '3', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________________ test_subtract_divide_float __________________________

self = <gemini.Calculator object at 0x1024fc2f0>
tokens = ['5.5', '-', '2.5', '3.5', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024fc2f0>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
>       assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fc2f0>
tokens = ['5.5', '-', '2.5', '3.5', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x1024fdfd0>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fdfd0>, expression = '(*()-2/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x1024fd460>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fd460>, expression = '(*()-2/3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

self = <gemini.Calculator object at 0x1024db6e0>
tokens = ['5', '2', '-', '3', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024db6e0>

    def test_subtract_divide_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024db6e0>
tokens = ['5', '2', '-', '3', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

self = <gemini.Calculator object at 0x1024fc770>
tokens = ['5.5', '2.5', '-', '3.5', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024fc770>

    def test_subtract_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fc770>
tokens = ['5.5', '2.5', '-', '3.5', '/', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
____________________________ test_subtract_multiply ____________________________

self = <gemini.Calculator object at 0x1024fdd00>
tokens = ['5', '-', '2', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024fdd00>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
>       assert calc.calculate("-5-2*3") == -11

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:659: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fdd00>
tokens = ['5', '-', '2', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________________ test_subtract_multiply_float _________________________

self = <gemini.Calculator object at 0x1038a5eb0>
tokens = ['5.5', '-', '2.5', '3.5', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1038a5eb0>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
>       assert calc.calculate("-5.5-2.5*3.5") == -14.25

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:670: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1038a5eb0>
tokens = ['5.5', '-', '2.5', '3.5', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x1024d82f0>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024d82f0>, expression = '(*()-2*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x1024dbce0>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024dbce0>, expression = '(*()-2*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

self = <gemini.Calculator object at 0x1024d83b0>
tokens = ['5', '2', '-', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024d83b0>

    def test_subtract_multiply_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)*3") == 11

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:699: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024d83b0>
tokens = ['5', '2', '-', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

self = <gemini.Calculator object at 0x1024db770>
tokens = ['5.5', '2.5', '-', '3.5', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024db770>

    def test_subtract_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)*3.5") == 14.25

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024db770>
tokens = ['5.5', '2.5', '-', '3.5', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
_____________________________ test_all_operations ______________________________

self = <gemini.Calculator object at 0x1024d9010>
tokens = ['5', '2', '*', '-', '3', '3', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024d9010>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
>       assert calc.calculate("-5*2+3/3") == -9

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:724: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024d9010>
tokens = ['5', '2', '*', '-', '3', '3', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x102502630>

    def test_general_parentheses(calc):
>       assert calc.calculate("(5+2)*3") == 21

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:733: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102502630>, expression = '(*(+2)*3'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x1024fc890>

    def test_nested_parentheses(calc):
>       assert calc.calculate("((2+3)*2)") == 10

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:33: in calculate
    self._validate_expression(normalized_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024fc890>, expression = '((*(+3)*2)'

    def _validate_expression(self, expression: str):
        """
        Validates the expression for balanced parentheses and allowed characters.
    
        Args:
           expression (str): The mathematical expression.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or
                invalid characters.
        """
        if not self._is_balanced(expression):
>           raise ValueError("Unbalanced parentheses.")
E           ValueError: Unbalanced parentheses.

generated/code/calculator/2-few_shot/iteration_10/gemini.py:96: ValueError
_____________________________ test_long_expression _____________________________

self = <gemini.Calculator object at 0x1024c2780>
tokens = ['100', '-', '100', '-', '100', '-', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_10/gemini.py:195: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1024c2780>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_10/gemini.py:36: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1024c2780>
tokens = ['100', '-', '100', '-', '100', '-', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (list[str]): The list of tokens in postfix order.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        operand_stack = []
    
        for token in tokens:
            if re.match(r"\d+\.?\d*", token): # If it's a number
                operand_stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_10/gemini.py:197: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add__positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_negative_parantheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_positeve_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_negative
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_neutral
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_negative
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_add_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_divide
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_multiply_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_10/5_functional_correctness-gemini.py::test_long_expression
======================== 68 failed, 20 passed in 1.00s =========================
