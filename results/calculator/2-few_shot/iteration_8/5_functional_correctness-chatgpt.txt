Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_8/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x107e9faa0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/2-few_shot/iteration_8/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_8/chatgpt.py:32: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x107e9faa0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the arithmetic expression into numbers and operator tokens.
        It also handles unary operators for negative (or positive) numbers.
    
        Args:
            expression (str): The normalized arithmetic expression.
    
        Returns:
            list: A list of tokens where numbers are of type float and operators/parentheses are str.
    
        Raises:
            ValueError: If an invalid token format is encountered.
        """
        tokens = []
        i = 0
        last_token_type = None  # Tracks the type of the last processed token: "number", "operator", or "(".
        length = len(expression)
    
        while i < length:
            char = expression[i]
    
            # Process numbers: integer or floating-point (including cases like "3.14")
            if char.isdigit() or char == ".":
                start = i
                dot_count = 0
                while i < length and (expression[i].isdigit() or expression[i] == "."):
                    if expression[i] == ".":
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimal points")
                    i += 1
                try:
                    number = float(expression[start:i])
                except ValueError:
                    raise ValueError("Invalid number format")
                tokens.append(number)
                last_token_type = "number"
    
            # Handle '+' or '-' which can be either unary or binary operators
            elif char in "+-":
                # Determine if operator is unary:
                if last_token_type in (None, "operator", "("):
                    # Unary operator detected.
                    sign = -1 if char == "-" else 1
                    i += 1
                    if i < length and (expression[i].isdigit() or expression[i] == "."):
                        start = i
                        dot_count = 0
                        while i < length and (expression[i].isdigit() or expression[i] == "."):
                            if expression[i] == ".":
                                dot_count += 1
                                if dot_count > 1:
                                    raise ValueError("Invalid number format: multiple decimal points")
                            i += 1
                        try:
                            number = float(expression[start:i])
                        except ValueError:
                            raise ValueError("Invalid number format after unary operator")
                        tokens.append(sign * number)
                        last_token_type = "number"
                    else:
>                       raise ValueError("Invalid expression: unary operator not followed by a number")
E                       ValueError: Invalid expression: unary operator not followed by a number

generated/code/calculator/2-few_shot/iteration_8/chatgpt.py:138: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x107e9eae0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/2-few_shot/iteration_8/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_8/chatgpt.py:32: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x107e9eae0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the arithmetic expression into numbers and operator tokens.
        It also handles unary operators for negative (or positive) numbers.
    
        Args:
            expression (str): The normalized arithmetic expression.
    
        Returns:
            list: A list of tokens where numbers are of type float and operators/parentheses are str.
    
        Raises:
            ValueError: If an invalid token format is encountered.
        """
        tokens = []
        i = 0
        last_token_type = None  # Tracks the type of the last processed token: "number", "operator", or "(".
        length = len(expression)
    
        while i < length:
            char = expression[i]
    
            # Process numbers: integer or floating-point (including cases like "3.14")
            if char.isdigit() or char == ".":
                start = i
                dot_count = 0
                while i < length and (expression[i].isdigit() or expression[i] == "."):
                    if expression[i] == ".":
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimal points")
                    i += 1
                try:
                    number = float(expression[start:i])
                except ValueError:
                    raise ValueError("Invalid number format")
                tokens.append(number)
                last_token_type = "number"
    
            # Handle '+' or '-' which can be either unary or binary operators
            elif char in "+-":
                # Determine if operator is unary:
                if last_token_type in (None, "operator", "("):
                    # Unary operator detected.
                    sign = -1 if char == "-" else 1
                    i += 1
                    if i < length and (expression[i].isdigit() or expression[i] == "."):
                        start = i
                        dot_count = 0
                        while i < length and (expression[i].isdigit() or expression[i] == "."):
                            if expression[i] == ".":
                                dot_count += 1
                                if dot_count > 1:
                                    raise ValueError("Invalid number format: multiple decimal points")
                            i += 1
                        try:
                            number = float(expression[start:i])
                        except ValueError:
                            raise ValueError("Invalid number format after unary operator")
                        tokens.append(sign * number)
                        last_token_type = "number"
                    else:
>                       raise ValueError("Invalid expression: unary operator not followed by a number")
E                       ValueError: Invalid expression: unary operator not followed by a number

generated/code/calculator/2-few_shot/iteration_8/chatgpt.py:138: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_8/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_8/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.20s =========================
