Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_7/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x1045db8c0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/2-few_shot/iteration_7/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_7/chatgpt.py:33: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1045db8c0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the normalized expression into numbers (as floats), operators, and parentheses.
        Supports negative (or positive) numbers as unary operators.
    
        Args:
            expression (str): The normalized mathematical expression.
    
        Returns:
            list: A list of tokens (floats for numbers and str for operators/parentheses).
    
        Raises:
            ValueError: If the syntax of the expression is invalid.
        """
        tokens = []
        i = 0
        n = len(expression)
    
        while i < n:
            char = expression[i]
    
            # Process numbers (integer or float)
            if char.isdigit() or char == '.':
                number_str = ""
                # Accumulate consecutive digits and at most one dot.
                dot_count = 0
                while i < n and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format with multiple decimals.")
                    number_str += expression[i]
                    i += 1
                try:
                    tokens.append(float(number_str))
                except ValueError:
                    raise ValueError(f"Invalid number literal: {number_str}")
    
            # Handle unary plus and minus for numbers.
            elif char in "+-" and (
                # At start of expression or preceded by an operator or left parenthesis
                (not tokens) or
                (isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")
            ):
                sign = char
                i += 1
                # After a unary sign, there must be a number (digit or dot)
                if i < n and (expression[i].isdigit() or expression[i] == '.'):
                    number_str = sign
                    dot_count = 0
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format with multiple decimals.")
                        number_str += expression[i]
                        i += 1
                    try:
                        tokens.append(float(number_str))
                    except ValueError:
                        raise ValueError(f"Invalid number literal: {number_str}")
                else:
>                   raise ValueError("Unary operator must be followed by a number.")
E                   ValueError: Unary operator must be followed by a number.

generated/code/calculator/2-few_shot/iteration_7/chatgpt.py:143: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x1045d8410>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/2-few_shot/iteration_7/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_7/chatgpt.py:33: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1045d8410>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the normalized expression into numbers (as floats), operators, and parentheses.
        Supports negative (or positive) numbers as unary operators.
    
        Args:
            expression (str): The normalized mathematical expression.
    
        Returns:
            list: A list of tokens (floats for numbers and str for operators/parentheses).
    
        Raises:
            ValueError: If the syntax of the expression is invalid.
        """
        tokens = []
        i = 0
        n = len(expression)
    
        while i < n:
            char = expression[i]
    
            # Process numbers (integer or float)
            if char.isdigit() or char == '.':
                number_str = ""
                # Accumulate consecutive digits and at most one dot.
                dot_count = 0
                while i < n and (expression[i].isdigit() or expression[i] == '.'):
                    if expression[i] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format with multiple decimals.")
                    number_str += expression[i]
                    i += 1
                try:
                    tokens.append(float(number_str))
                except ValueError:
                    raise ValueError(f"Invalid number literal: {number_str}")
    
            # Handle unary plus and minus for numbers.
            elif char in "+-" and (
                # At start of expression or preceded by an operator or left parenthesis
                (not tokens) or
                (isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")
            ):
                sign = char
                i += 1
                # After a unary sign, there must be a number (digit or dot)
                if i < n and (expression[i].isdigit() or expression[i] == '.'):
                    number_str = sign
                    dot_count = 0
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format with multiple decimals.")
                        number_str += expression[i]
                        i += 1
                    try:
                        tokens.append(float(number_str))
                    except ValueError:
                        raise ValueError(f"Invalid number literal: {number_str}")
                else:
>                   raise ValueError("Unary operator must be followed by a number.")
E                   ValueError: Unary operator must be followed by a number.

generated/code/calculator/2-few_shot/iteration_7/chatgpt.py:143: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_7/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_7/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.20s =========================
