Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py F [  1%]
FFFFFFFFFFFFFFFFFFF..................FFFFFFFFFFFFFFFFFFFF......FFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_positive _______________________________

calc = <gemini.Calculator object at 0x102698c20>

    def test_add_positive(calc):
>       assert calc.calculate("1+2") == 3

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102698c20>, tokens = ['1', '+2']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
___________________________ test_add_positive_float ____________________________

calc = <gemini.Calculator object at 0x1026980e0>

    def test_add_positive_float(calc):
>       assert calc.calculate("1.5+2.5") == 4

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026980e0>, tokens = ['1.5', '+2.5']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
________________________ test_add__positive_parentheses ________________________

calc = <gemini.Calculator object at 0x102698c20>

    def test_add__positive_parentheses(calc):
>       assert calc.calculate("(1)+2") == 3

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102698c20>, tokens = ['1', '+2']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________ test_add_positive_float_parentheses ______________________

calc = <gemini.Calculator object at 0x102696690>

    def test_add_positive_float_parentheses(calc):
>       assert calc.calculate("(1.5)+2") == pytest.approx(3.5, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102696690>, tokens = ['1.5', '+2']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x1026978c0>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
>       assert calc.calculate("-1+2") == 1

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026978c0>, tokens = ['-1', '+2']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
___________________________ test_add_negative_float ____________________________

calc = <gemini.Calculator object at 0x102697a40>

    def test_add_negative_float(calc):
        assert calc.calculate("1.5+-2.5") == -1
>       assert calc.calculate("-1.5+2.5") == 1

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102697a40>, tokens = ['-1.5', '+2.5']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
________________________ test_add_negative_parantheses _________________________

calc = <gemini.Calculator object at 0x1026965a0>

    def test_add_negative_parantheses(calc):
        assert calc.calculate("1+(-2)") == -1
>       assert calc.calculate("(-1)+2") == 1

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026965a0>, tokens = ['-1', '+2']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________ test_add_negative_float_parentheses ______________________

calc = <gemini.Calculator object at 0x1026956d0>

    def test_add_negative_float_parentheses(calc):
        assert calc.calculate("(1.5)+(-2)") == -0.5
>       assert calc.calculate("(-1.5)+2") == 0.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026956d0>, tokens = ['-1.5', '+2']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_______________________________ test_add_neutral _______________________________

calc = <gemini.Calculator object at 0x1026984d0>

    def test_add_neutral(calc):
>       assert calc.calculate("0+0") == 0

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026984d0>, tokens = ['0', '+0']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________________ test_add_neutral_float ____________________________

calc = <gemini.Calculator object at 0x102695b80>

    def test_add_neutral_float(calc):
>       assert calc.calculate("0.0+0.0") == 0

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102695b80>, tokens = ['0.0', '+0.0']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________________ test_subtract_positive ____________________________

calc = <gemini.Calculator object at 0x102696f00>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102696f00>, tokens = ['5', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________________ test_subtract_positive_float _________________________

calc = <gemini.Calculator object at 0x102697d70>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102697d70>, tokens = ['5.5', '-3.5']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x10264fbf0>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264fbf0>, tokens = ['5', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x10264cbc0>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264cbc0>, tokens = ['5.5', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x1026945f0>

    def test_subtract_negative(calc):
        assert calc.calculate("5-+3") == 2
>       assert calc.calculate("-5-3") == -8

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026945f0>, tokens = ['-5', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x103a0cbf0>

    def test_subtract_negative_float(calc):
        assert calc.calculate("5.5-+3.5") == 2
>       assert calc.calculate("-5.5-3.5") == -9

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0cbf0>, tokens = ['-5.5', '-3.5']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x103a0d640>

    def test_subtract_negative_parentheses(calc):
        assert calc.calculate("5-(-3)") == 8
>       assert calc.calculate("(-5)-3") == -8

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0d640>, tokens = ['-5', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x103a0e4b0>

    def test_subtract_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-3)") == 8.5
>       assert calc.calculate("(-5.5)-3") == -8.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0e4b0>, tokens = ['-5.5', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________________ test_subtract_neutral _____________________________

calc = <gemini.Calculator object at 0x103a0f2f0>

    def test_subtract_neutral(calc):
>       assert calc.calculate("0-0") == 0

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0f2f0>, tokens = ['0', '-0']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________________ test_subtract_neutral_float __________________________

calc = <gemini.Calculator object at 0x1039eb3e0>

    def test_subtract_neutral_float(calc):
>       assert calc.calculate("0.0-0.0") == 0

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039eb3e0>, tokens = ['0.0', '-0.0']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x1039eb860>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039eb860>, tokens = ['5', '0', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero.")
E                       ValueError: Division by zero.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:166: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x103a0f740>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0f740>, tokens = ['5.0', '0.0', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero.")
E                       ValueError: Division by zero.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:166: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x103a0c5c0>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0c5c0>, tokens = ['5', '+2', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x103a0cec0>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0cec0>
tokens = ['5.5', '+2.5', '-3.5']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x1039e8dd0>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039e8dd0>, tokens = ['5', '+2', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x1039ebec0>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039ebec0>, tokens = ['5.5', '+2', '-3']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x1039e8fe0>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039e8fe0>
tokens = ['5', '-2', '-3', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x1039e9d90>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039e9d90>
tokens = ['5.5', '-2.5', '-3.5', '+']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x103a0dc40>

    def test_add_multiply_positive(calc):
>       assert calc.calculate("5+2*3") == 11

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:377: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0dc40>, tokens = ['5', '+2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x103a0d9d0>

    def test_add_multiply_positive_float(calc):
>       assert calc.calculate("5.5+2.5*3.5") == 14.25

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:388: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0d9d0>
tokens = ['5.5', '+2.5', '3.5', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________ test_add_multiply_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x102695d30>

    def test_add_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)+2*3") == 11

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102695d30>, tokens = ['5', '+2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________ test_add_multiply_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x102697f50>

    def test_add_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2*3") == 11.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102697f50>
tokens = ['5.5', '+2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x10269b9e0>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
>       assert calc.calculate("(-5)+2*3") == 1

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:420: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10269b9e0>
tokens = ['-5', '+2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x1026945c0>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
>       assert calc.calculate("(-5.5)+2.5*3.5") == 3.25

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:430: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026945c0>
tokens = ['-5.5', '+2.5', '3.5', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_______________________________ test_add_divide ________________________________

calc = <gemini.Calculator object at 0x102697d10>

    def test_add_divide(calc):
>       assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102697d10>, tokens = ['5', '+2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________________ test_add_divide_float _____________________________

calc = <gemini.Calculator object at 0x103a0f050>

    def test_add_divide_float(calc):
>       assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:453: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0f050>
tokens = ['5.5', '+2.5', '3.5', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________ test_add_divide_positive_parentheses _____________________

calc = <gemini.Calculator object at 0x1039ea030>

    def test_add_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)+2/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039ea030>, tokens = ['5', '+2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
__________________ test_add_divide_positive_float_parentheses __________________

calc = <gemini.Calculator object at 0x1026a0a70>

    def test_add_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2/3") == pytest.approx(6.16666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026a0a70>
tokens = ['5.5', '+2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________ test_add_divide_negative_parentheses _____________________

calc = <gemini.Calculator object at 0x10264fd40>

    def test_add_divide_negative_parentheses(calc):
        assert calc.calculate("5+(-2)/3") == pytest.approx(4.33333333, rel=1e-6)
>       assert calc.calculate("(-5)+2/3") == pytest.approx(-4.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:485: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264fd40>
tokens = ['-5', '+2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
__________________ test_add_divide_negative_float_parentheses __________________

calc = <gemini.Calculator object at 0x1039e9700>

    def test_add_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)/3.5") == pytest.approx(4.78571428, rel=1e-6)
>       assert calc.calculate("(-5.5)+2.5/3.5") == pytest.approx(-4.78571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039e9700>
tokens = ['-5.5', '+2.5', '3.5', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x103a0d250>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103a0d250>, tokens = ['5', '-2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x1026953a0>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026953a0>
tokens = ['5.5', '-2.5', '3.5', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x10264f020>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264f020>, tokens = ['5', '-2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x10264cc80>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264cc80>
tokens = ['5.5', '-2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x10264f230>

    def test_subtract_divide_negative_parentheses(calc):
        assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)
>       assert calc.calculate("(-5)-2/3") == pytest.approx(-5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:631: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264f230>
tokens = ['-5', '-2', '3', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x1026976b0>

    def test_subtract_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)
>       assert calc.calculate("(-5.5)-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026976b0>
tokens = ['-5.5', '-2.5', '3.5', '/']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x1039ea0f0>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:657: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1039ea0f0>, tokens = ['5', '-2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x10264ee10>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:668: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264ee10>
tokens = ['5.5', '-2.5', '3.5', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x10264e480>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264e480>, tokens = ['5', '-2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x10264de80>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264de80>
tokens = ['5.5', '-2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x1026473e0>

    def test_subtract_multiply_negative_parentheses(calc):
        assert calc.calculate("5-(-2)*3") == 11
>       assert calc.calculate("(-5)-2*3") == -11

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1026473e0>
tokens = ['-5', '-2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x10264e000>

    def test_subtract_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)*3.5") == 14.25
>       assert calc.calculate("(-5.5)-2.5*3.5") == -14.25

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264e000>
tokens = ['-5.5', '-2.5', '3.5', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x10264ee10>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10264ee10>
tokens = ['5', '+2', '3', '-4', '*', '2', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x102697fe0>

    def test_general_parentheses(calc):
>       assert calc.calculate("(5+2)*3") == 21

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:733: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102697fe0>, tokens = ['5', '+2', '3', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x102647e00>

    def test_nested_parentheses(calc):
>       assert calc.calculate("((2+3)*2)") == 10

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102647e00>, tokens = ['2', '+3', '2', '*']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x102646480>

    def test_long_expression(calc):
        assert (
>           calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )

generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py:757: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_5/gemini.py:33: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x102646480>
tokens = ['100', '+100', '+100', '+100', '+100', '+100', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a postfix expression (represented as a list of tokens).
    
        Args:
            tokens (list[str]): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ValueError: If the expression attempts division by zero or contains invalid operators.
        """
        stack = []
        for token in tokens:
            if re.match(r"[-+]?\d*\.\d+|[-+]?\d+", token):
                stack.append(float(token))  # Convert to float to handle decimals
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Insufficient operands.")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero.")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator: {token}")
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands.")
E           ValueError: Invalid expression: Too many operands.

generated/code/calculator/2-few_shot/iteration_5/gemini.py:172: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_positive
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add__positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_negative_parantheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_neutral
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_positive
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_neutral
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_add_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_5/5_functional_correctness-gemini.py::test_long_expression
======================== 56 failed, 32 passed in 0.66s =========================
