Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py . [  1%]
...FFFF......FFFF......FFFFFF....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.FFFFFF [ 82%]
FFFFFFF.FFFF.FF                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x106b29460>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
___________________________ test_add_negative_float ____________________________

calc = <gemini.Calculator object at 0x106b24350>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
________________________ test_add_negative_parantheses _________________________

calc = <gemini.Calculator object at 0x106b29730>

    def test_add_negative_parantheses(calc):
>       assert calc.calculate("1+(-2)") == -1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________ test_add_negative_float_parentheses ______________________

calc = <gemini.Calculator object at 0x106b27b90>

    def test_add_negative_float_parentheses(calc):
>       assert calc.calculate("(1.5)+(-2)") == -0.5

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x106b26b70>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x106b26b10>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x106b24ec0>

    def test_subtract_negative_parentheses(calc):
>       assert calc.calculate("5-(-3)") == 8

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x106b24410>

    def test_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-3)") == 8.5

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________________ test_multiply_negative ____________________________

calc = <gemini.Calculator object at 0x106b250a0>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
______________________ test_multiply_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x106b25460>

    def test_multiply_negative_parentheses(calc):
>       assert calc.calculate("2*(-3)") == -6

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________________ test_multiply_negative_float _________________________

calc = <gemini.Calculator object at 0x106b24bc0>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
___________________ test_multiply_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x106adf1d0>

    def test_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("2.5*(-3.5)") == -8.75

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________________ test_multiply_neutral _____________________________

calc = <gemini.Calculator object at 0x106adc080>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________________ test_multiply_neutral_float __________________________

calc = <gemini.Calculator object at 0x106adcf20>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________________ test_divide_negative _____________________________

calc = <gemini.Calculator object at 0x106b26000>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________________ test_divide_negative_float __________________________

calc = <gemini.Calculator object at 0x107e7b6b0>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________________ test_divide_negative_parentheses _______________________

calc = <gemini.Calculator object at 0x107e7abd0>

    def test_divide_negative_parentheses(calc):
>       assert calc.calculate("6/(-3)") == -2

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________ test_divide_negative_float_parentheses ____________________

calc = <gemini.Calculator object at 0x107e7a000>

    def test_divide_negative_float_parentheses(calc):
>       assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x107e791c0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
        left = values.pop()
        if operator == '+':
            values.append(left + right)
        elif operator == '-':
            values.append(left - right)
        elif operator == '*':
            values.append(left * right)
        elif operator == '/':
            if right == 0:
>               raise ValueError("Division by zero.")
E               ValueError: Division by zero.

generated/code/calculator/2-few_shot/iteration_3/gemini.py:136: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x106b26840>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
        left = values.pop()
        if operator == '+':
            values.append(left + right)
        elif operator == '-':
            values.append(left - right)
        elif operator == '*':
            values.append(left * right)
        elif operator == '/':
            if right == 0:
>               raise ValueError("Division by zero.")
E               ValueError: Division by zero.

generated/code/calculator/2-few_shot/iteration_3/gemini.py:136: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x106b26270>

    def test_add_subtract_positive_negative(calc):
        assert calc.calculate("5+2-3") == 4
        assert calc.calculate("5-2+3") == 6
        assert calc.calculate("1000000000+2000000000-3000000000") == 0
>       assert calc.calculate("-999999999999999-1+1000000000000000") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x106b248c0>

    def test_add_subtract_positive_float(calc):
        assert calc.calculate("5.5+2.5-3.5") == 4.5
        assert calc.calculate("5.5-2.5+3.5") == 6.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x107e79460>

    def test_add_subtract_positive_parentheses(calc):
        assert calc.calculate("(5)+2-3") == 4
        assert calc.calculate("5+(2)-3") == 4
        assert calc.calculate("(5)+(2)-3") == 4
        assert calc.calculate("(1000000000)+2000000000-(3000000000)") == 0
>       assert calc.calculate("(-999999999999999)-1+(1000000000000000)") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x107e79be0>

    def test_add_subtract_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2-3") == 4.5
        assert calc.calculate("5.5+(2)-3") == 4.5
        assert calc.calculate("(5.5)+(2)-3") == 4.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x107e7b470>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x106add040>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x106ade330>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
>       assert calc.calculate("-5+2*3") == 1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x107e7a540>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
>       assert calc.calculate("-5.5+2.5*3.5") == 3.25

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________ test_add_multiply_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x106b253a0>

    def test_add_multiply_positive_parentheses(calc):
        assert calc.calculate("(5)+2*3") == 11
        assert calc.calculate("5+(2)*3") == 11
        assert calc.calculate("(5)+(2)*3") == 11
        assert calc.calculate("(1000000000)*2000000000+3000000000") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)*1+(999999999999999)") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_add_multiply_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x106adcf20>

    def test_add_multiply_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2*3") == 11.5
        assert calc.calculate("5.5+(2)*3") == 11.5
        assert calc.calculate("(5.5)+(2)*3") == 11.5
        assert calc.calculate("(1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999.5)*1+999999999999999") == -0.5

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:415: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x106adee10>

    def test_add_multiply_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)*3") == -1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:419: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x106adf1d0>

    def test_add_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)*3.5") == -3.25

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:429: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________________________ test_add_divide ________________________________

calc = <gemini.Calculator object at 0x106ad5940>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
>       assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________________ test_add_divide_float _____________________________

calc = <gemini.Calculator object at 0x106ade720>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
>       assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________ test_add_divide_positive_parentheses _____________________

calc = <gemini.Calculator object at 0x106adfb00>

    def test_add_divide_positive_parentheses(calc):
        assert calc.calculate("(5)+2/3") == pytest.approx(5.66666666, rel=1e-6)
        assert calc.calculate("5+(2)/3") == pytest.approx(5.66666666, rel=1e-6)
        assert calc.calculate("(5)+(2)/3") == pytest.approx(5.66666666, rel=1e-6)
        assert calc.calculate("(1000000000)/2000000000+(3000000000)") == pytest.approx(
            3e9, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)/1+(1000000000000000)") == 1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:470: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________ test_add_divide_positive_float_parentheses __________________

calc = <gemini.Calculator object at 0x107e78d40>

    def test_add_divide_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2/3") == pytest.approx(6.16666666, rel=1e-6)
        assert calc.calculate("5.5+(2)/3") == pytest.approx(6.16666666, rel=1e-6)
        assert calc.calculate("(5.5)+(2)/3") == pytest.approx(6.16666666, rel=1e-6)
        assert calc.calculate(
            "(1000000000.5)/2000000000.5+(3000000000.5)"
        ) == pytest.approx(3e9, rel=1e-6)
>       assert calc.calculate("(-999999999999999.5)/1+(1000000000000000.5)") == 1

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:480: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________ test_add_divide_negative_parentheses _____________________

calc = <gemini.Calculator object at 0x106ad6a50>

    def test_add_divide_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)/3") == pytest.approx(4.33333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________ test_add_divide_negative_float_parentheses __________________

calc = <gemini.Calculator object at 0x106ad4650>

    def test_add_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)/3.5") == pytest.approx(4.78571428, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________________ test_multiply_divide _____________________________

calc = <gemini.Calculator object at 0x106ad4dd0>

    def test_multiply_divide(calc):
        assert calc.calculate("5*2/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("5/2*3") == pytest.approx(7.5, rel=1e-6)
        assert calc.calculate("1000000000/2000000000*3000000000") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999/1*1000000000000000") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________________ test_multiply_divide_float __________________________

calc = <gemini.Calculator object at 0x106b262a0>

    def test_multiply_divide_float(calc):
        assert calc.calculate("5.5*2.5/3.5") == pytest.approx(3.9285714, rel=1e-6)
        assert calc.calculate("5.5/2.5*3.5") == pytest.approx(7.7, rel=1e-6)
        assert calc.calculate("1000000000.5/2000000000.5*3000000000.5") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999.5/1*1000000000000000.5") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:523: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________ test_multiply_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x106adce30>

    def test_multiply_divide_positive_parentheses(calc):
        assert calc.calculate("(5)*2/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("5*(2)/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("(5)*(2)/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("(1000000000)/2000000000*(3000000000)") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)/1*(1000000000000000)") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:535: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________ test_multiply_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x106ad4da0>

    def test_multiply_divide_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)*2/3") == pytest.approx(3.66666666, rel=1e-6)
        assert calc.calculate("5.5*(2)/3") == pytest.approx(3.66666666, rel=1e-6)
        assert calc.calculate("(5.5)*(2)/3") == pytest.approx(3.66666666, rel=1e-6)
        assert calc.calculate(
            "(1000000000.5)/2000000000.5*(3000000000.5)"
        ) == pytest.approx(1500000000, rel=1e-6)
>       assert calc.calculate(
            "(-999999999999999.5)/1*(1000000000000000.5)"
        ) == pytest.approx(-1e30, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:547: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________ test_multiply_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x106ad60f0>

    def test_multiply_divide_negative_parentheses(calc):
>       assert calc.calculate("5*(-2)/3") == pytest.approx(-3.3333333, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________ test_multiply_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x106ad2420>

    def test_multiply_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5*(-2.5)/3.5") == pytest.approx(-3.928571, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:565: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x106ad3770>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
>       assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:582: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x106ad6a50>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
>       assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x106b27410>

    def test_subtract_divide_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)
        assert calc.calculate("5.5-(2)/3") == pytest.approx(4.83333333, rel=1e-6)
        assert calc.calculate("(5.5)-(2)/3") == pytest.approx(4.83333333, rel=1e-6)
>       assert calc.calculate(
            "(1000000000.5)-2000000000.5/(-3000000000.5)"
        ) == pytest.approx(1000000000.5, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:621: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x106ad3dd0>

    def test_subtract_divide_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x106ad3350>

    def test_subtract_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x106ad0110>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
>       assert calc.calculate("-5-2*3") == -11

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:659: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x106ad1c40>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
>       assert calc.calculate("-5.5-2.5*3.5") == -14.25

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:670: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x106ad09b0>

    def test_subtract_multiply_positive_parentheses(calc):
        assert calc.calculate("(5)-2*3") == -1
        assert calc.calculate("5-(2)*3") == -1
        assert calc.calculate("(5)-(2)*3") == -1
        assert calc.calculate("(1000000000)*2000000000-3000000000") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)*1+999999999999999") == 0

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:685: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x106ad0b60>

    def test_subtract_multiply_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)-2*3") == -0.5
        assert calc.calculate("5.5-(2)*3") == -0.5
        assert calc.calculate("(5.5)-(2)*3") == -0.5
        assert calc.calculate("(1000000000.5)*2000000000-3000000000.5") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999.5)*1+999999999999999") == -0.5

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:695: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:150: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = ['('], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x106b256a0>

    def test_subtract_multiply_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)*3") == 11

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:699: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x1061b63c0>

    def test_subtract_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)*3.5") == 14.25

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x1061b4290>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
>       assert calc.calculate("-5*2+3/3") == -9

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:724: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x1061b66c0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x106b325d0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x106ad1040>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________ test_invalid_expression_incomplete_addition __________________

calc = <gemini.Calculator object at 0x1061b5310>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <gemini.Calculator object at 0x1061b4860>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:158: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_______________________________ test_empty_input _______________________________

calc = <gemini.Calculator object at 0x1061b6060>

    def test_empty_input(calc):
        with pytest.raises(ValueError):
>           calc.calculate("")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:788: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1061b6060>, tokens = []

    def _parse_expression(self, tokens: list[str]) -> float:
        """
        Parses the tokenized expression and evaluates it using operator precedence.
        Uses the Shunting Yard algorithm.
    
        Args:
            tokens (list[str]): The list of tokens.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: On division by zero.
        """
        def precedence(operator: str) -> int:
            """Helper function to get precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list[str], values: list[float]):
            """Helper function to apply an operator to two values."""
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
                    raise ValueError("Division by zero.")
                values.append(left / right)
    
    
        values = []
        operators = []
    
        for token in tokens:
            if token.replace('.', '', 1).lstrip('-').isdigit():  # Check if it's a number (including floats and negatives)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                operators.pop()  # Pop the '('
            else:  # It's an operator
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            apply_operator(operators, values)
    
>       return values[0]  # Final result
E       IndexError: list index out of range

generated/code/calculator/2-few_shot/iteration_3/gemini.py:160: IndexError
____________________________ test_empty_parentheses ____________________________

calc = <gemini.Calculator object at 0x10619d5e0>

    def test_empty_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("()")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10619d5e0>, tokens = ['(', ')']

    def _parse_expression(self, tokens: list[str]) -> float:
        """
        Parses the tokenized expression and evaluates it using operator precedence.
        Uses the Shunting Yard algorithm.
    
        Args:
            tokens (list[str]): The list of tokens.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ValueError: On division by zero.
        """
        def precedence(operator: str) -> int:
            """Helper function to get precedence of an operator."""
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators: list[str], values: list[float]):
            """Helper function to apply an operator to two values."""
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
                    raise ValueError("Division by zero.")
                values.append(left / right)
    
    
        values = []
        operators = []
    
        for token in tokens:
            if token.replace('.', '', 1).lstrip('-').isdigit():  # Check if it's a number (including floats and negatives)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                while operators and operators[-1] != '(':
                    apply_operator(operators, values)
                operators.pop()  # Pop the '('
            else:  # It's an operator
                while operators and operators[-1] != '(' and precedence(operators[-1]) >= precedence(token):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            apply_operator(operators, values)
    
>       return values[0]  # Final result
E       IndexError: list index out of range

generated/code/calculator/2-few_shot/iteration_3/gemini.py:160: IndexError
__________________________ test_invalid_double_slash ___________________________

calc = <gemini.Calculator object at 0x1061b5be0>

    def test_invalid_double_slash(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5//2")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:803: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
_________________________ test_invalid_exponentiation __________________________

calc = <gemini.Calculator object at 0x1061b4320>

    def test_invalid_exponentiation(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5**2")

generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_3/gemini.py:31: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/2-few_shot/iteration_3/gemini.py:154: in _parse_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators: list[str], values: list[float]):
        """Helper function to apply an operator to two values."""
        operator = operators.pop()
        right = values.pop()
>       left = values.pop()
E       IndexError: pop from empty list

generated/code/calculator/2-few_shot/iteration_3/gemini.py:127: IndexError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_negative_parantheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_negative
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_neutral
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_divide_negative
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_divide_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_add_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_divide
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_divide_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_multiply_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_long_expression
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_invalid_expression_incomplete_multiplication
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_empty_input
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_empty_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_invalid_double_slash
FAILED generated/code/calculator/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_invalid_exponentiation
======================== 65 failed, 23 passed in 0.80s =========================
