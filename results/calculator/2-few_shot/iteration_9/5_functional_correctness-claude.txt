Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_9/5_functional_correctness-claude.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x10745bef0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/2-few_shot/iteration_9/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_9/claude.py:57: in calculate
    return self._evaluate_rpn(rpn)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10745bef0>, rpn = [5, 2, '+', 3, '*', '-']

    def _evaluate_rpn(self, rpn: list) -> float:
        """
        Evaluates an expression in Reverse Polish Notation.
    
        Args:
            rpn (list): The expression in RPN form.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ArithmeticError: For other calculation errors.
        """
        if not rpn:
            raise ValueError("Empty expression")
    
        stack = []
    
        for token in rpn:
            if isinstance(token, (int, float)):
                stack.append(token)
            else:
                # Need at least two operands for any operation
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_9/claude.py:252: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x107458c80>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/2-few_shot/iteration_9/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_9/claude.py:57: in calculate
    return self._evaluate_rpn(rpn)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107458c80>
rpn = [2, 3, '+', 2, 3, '+', ...]

    def _evaluate_rpn(self, rpn: list) -> float:
        """
        Evaluates an expression in Reverse Polish Notation.
    
        Args:
            rpn (list): The expression in RPN form.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ArithmeticError: For other calculation errors.
        """
        if not rpn:
            raise ValueError("Empty expression")
    
        stack = []
    
        for token in rpn:
            if isinstance(token, (int, float)):
                stack.append(token)
            else:
                # Need at least two operands for any operation
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/2-few_shot/iteration_9/claude.py:252: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_9/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_9/5_functional_correctness-claude.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.20s =========================
