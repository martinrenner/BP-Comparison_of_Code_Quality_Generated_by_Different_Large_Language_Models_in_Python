Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <chatgpt.Calculator object at 0x10269d8e0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:42: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10269d8e0>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (Reverse Polish Notation) expression.
    
        Args:
            tokens (list): The postfix token list.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If a division by zero occurs.
            ValueError: If the expression is malformed.
        """
        stack = []
        for token in tokens:
            if self._is_number(token):
                stack.append(float(token))
            elif token in {'+', '-', '*', '/'}:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient values in the expression.")
E                   ValueError: Invalid expression: insufficient values in the expression.

generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:216: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <chatgpt.Calculator object at 0x10269ab10>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:42: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10269ab10>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (Reverse Polish Notation) expression.
    
        Args:
            tokens (list): The postfix token list.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If a division by zero occurs.
            ValueError: If the expression is malformed.
        """
        stack = []
        for token in tokens:
            if self._is_number(token):
                stack.append(float(token))
            elif token in {'+', '-', '*', '/'}:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient values in the expression.")
E                   ValueError: Invalid expression: insufficient values in the expression.

generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:216: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x10269b680>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:36: in calculate
    tokens = self._tokenize(normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10269b680>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the normalized expression into a list of tokens (numbers, operators, and parentheses).
    
        Args:
            expression (str): The normalized arithmetic expression.
    
        Returns:
            list: A list of tokens as strings.
    
        Raises:
            ValueError: If a number is improperly formatted or if an operator is used incorrectly.
        """
        tokens = []
        i = 0
        n = len(expression)
    
        while i < n:
            char = expression[i]
    
            # If the character is a digit or a decimal point, accumulate the complete number.
            if char.isdigit() or char == '.':
                number_str = char
                i += 1
                while i < n and (expression[i].isdigit() or expression[i] == '.'):
                    number_str += expression[i]
                    i += 1
                if number_str.count('.') > 1:
                    raise ValueError("Invalid number format: too many decimal points.")
                tokens.append(number_str)
            # Handle the '-' operator: may be unary (negative number) or binary (subtraction).
            elif char == '-':
                # Determine if the '-' is a unary minus.
                if i == 0 or (tokens and tokens[-1] in {'+', '-', '*', '/', '('}):
                    # It is a unary minus; the following characters must form a valid number.
                    i += 1
                    if i < n and (expression[i].isdigit() or expression[i] == '.'):
                        number_str = '-' + expression[i]
                        i += 1
                        while i < n and (expression[i].isdigit() or expression[i] == '.'):
                            number_str += expression[i]
                            i += 1
                        if number_str.count('.') > 1:
                            raise ValueError("Invalid number format: too many decimal points.")
                        tokens.append(number_str)
                    else:
>                       raise ValueError("Invalid use of unary minus: no number follows '-'.")
E                       ValueError: Invalid use of unary minus: no number follows '-'.

generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:130: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x10269adb0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:36: in calculate
    tokens = self._tokenize(normalized)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10269adb0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the normalized expression into a list of tokens (numbers, operators, and parentheses).
    
        Args:
            expression (str): The normalized arithmetic expression.
    
        Returns:
            list: A list of tokens as strings.
    
        Raises:
            ValueError: If a number is improperly formatted or if an operator is used incorrectly.
        """
        tokens = []
        i = 0
        n = len(expression)
    
        while i < n:
            char = expression[i]
    
            # If the character is a digit or a decimal point, accumulate the complete number.
            if char.isdigit() or char == '.':
                number_str = char
                i += 1
                while i < n and (expression[i].isdigit() or expression[i] == '.'):
                    number_str += expression[i]
                    i += 1
                if number_str.count('.') > 1:
                    raise ValueError("Invalid number format: too many decimal points.")
                tokens.append(number_str)
            # Handle the '-' operator: may be unary (negative number) or binary (subtraction).
            elif char == '-':
                # Determine if the '-' is a unary minus.
                if i == 0 or (tokens and tokens[-1] in {'+', '-', '*', '/', '('}):
                    # It is a unary minus; the following characters must form a valid number.
                    i += 1
                    if i < n and (expression[i].isdigit() or expression[i] == '.'):
                        number_str = '-' + expression[i]
                        i += 1
                        while i < n and (expression[i].isdigit() or expression[i] == '.'):
                            number_str += expression[i]
                            i += 1
                        if number_str.count('.') > 1:
                            raise ValueError("Invalid number format: too many decimal points.")
                        tokens.append(number_str)
                    else:
>                       raise ValueError("Invalid use of unary minus: no number follows '-'.")
E                       ValueError: Invalid use of unary minus: no number follows '-'.

generated/code/calculator/2-few_shot/iteration_6/chatgpt.py:130: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/2-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.22s =========================
