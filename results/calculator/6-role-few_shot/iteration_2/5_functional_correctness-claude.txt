Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py . [  1%]
...FF........FF........FFF.FF....FFFF........FF..FFFF..........FF....FF. [ 82%]
...FFF..FF.F...                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <claude.Calculator object at 0x1068652e0>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1068652e0>, expression = '1+-2'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
___________________________ test_add_negative_float ____________________________

calc = <claude.Calculator object at 0x1068628d0>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1068628d0>, expression = '1.5+-2.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x1068616d0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1068616d0>, expression = '5-+3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x106861ee0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106861ee0>, expression = '5.5-+3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________________ test_multiply_negative ____________________________

calc = <claude.Calculator object at 0x1068633e0>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1068633e0>, expression = '2*-3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
______________________ test_multiply_negative_parentheses ______________________

calc = <claude.Calculator object at 0x106860290>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106860290>
expression = '(-999999999999999)*-1'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_________________________ test_multiply_negative_float _________________________

calc = <claude.Calculator object at 0x10681a390>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10681a390>, expression = '2.5*-3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________________ test_multiply_neutral _____________________________

calc = <claude.Calculator object at 0x10681a360>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10681a360>, expression = '0*-5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_________________________ test_multiply_neutral_float __________________________

calc = <claude.Calculator object at 0x106860500>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106860500>, expression = '0.0*-5.0'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_____________________________ test_divide_negative _____________________________

calc = <claude.Calculator object at 0x1068624e0>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1068624e0>, expression = '6/-3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
__________________________ test_divide_negative_float __________________________

calc = <claude.Calculator object at 0x106867410>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106867410>, expression = '6.5/-3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_______________________ test_divide_negative_parentheses _______________________

calc = <claude.Calculator object at 0x106818b30>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106818b30>
expression = '(999999999999999)/-1'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________ test_divide_negative_float_parentheses ____________________

calc = <claude.Calculator object at 0x106818530>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106818530>
expression = '(-999999999999999)/-0.1'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <claude.Calculator object at 0x10681a9c0>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
        assert calc.calculate("-5+2*3") == 1
>       assert calc.calculate("-5*-2+3") == 13

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10681a9c0>, expression = '-5*-2+3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <claude.Calculator object at 0x106861d00>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
        assert calc.calculate("-5.5+2.5*3.5") == 3.25
>       assert calc.calculate("-5.5*-2.5+3.5") == 17.25

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:391: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106861d00>, expression = '-5.5*-2.5+3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <claude.Calculator object at 0x107bbb6b0>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bbb6b0>
expression = '999999999999999*-1+999999999999999'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <claude.Calculator object at 0x107bbad80>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bbad80>
expression = '(999999999999999.5)*-1+999999999999999'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_______________________________ test_add_divide ________________________________

calc = <claude.Calculator object at 0x107bba4b0>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
        assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)
>       assert calc.calculate("-5+-2/3") == pytest.approx(-5.6666666, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bba4b0>, expression = '-5+-2/3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________________ test_add_divide_float _____________________________

calc = <claude.Calculator object at 0x107bb9c70>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
        assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)
>       assert calc.calculate("-5.5+-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:456: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bb9c70>, expression = '-5.5+-2.5/3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <claude.Calculator object at 0x107bb84a0>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bb84a0>, expression = '-5/-2/3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <claude.Calculator object at 0x106867200>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106867200>, expression = '-5.5/-2.5/3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <claude.Calculator object at 0x1068651c0>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
        assert calc.calculate("-5-2*3") == -11
>       assert calc.calculate("-5*-2*3") == 30

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:660: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1068651c0>, expression = '-5*-2*3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <claude.Calculator object at 0x107bb8410>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
        assert calc.calculate("-5.5-2.5*3.5") == -14.25
>       assert calc.calculate("-5.5*-2.5*3.5") == pytest.approx(48.125, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:671: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bb8410>, expression = '-5.5*-2.5*3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
_____________________________ test_all_operations ______________________________

calc = <claude.Calculator object at 0x107bb88c0>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
        assert calc.calculate("-5*2+3/3") == -9
>       assert calc.calculate("-5*-2/3+5") == pytest.approx(8.33333333, rel=1e-6)

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:725: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:301: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107bb88c0>, expression = '-5*-2/3+5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and allowed characters.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters or has unbalanced parentheses.
        """
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().\t\n ")
        if not all(char in allowed_chars for char in expression):
            invalid_chars = [char for char in expression if char not in allowed_chars]
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Check for balanced parentheses
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
                stack.pop()
    
        if stack:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for empty expression or only whitespace
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid sequences of operators
        if re.search(r'[+\-*/]{2,}', expression.replace(" ", "")):
>           raise ValueError("Invalid sequence of operators")
E           ValueError: Invalid sequence of operators

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:283: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x107bbb650>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:306: in calculate
    result = parser.expr()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:224: in expr
    result = self.term()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:199: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x107bbb7d0>

    def factor(self) -> float:
        """
        Parse a factor in the expression grammar.
    
        factor : NUMBER | LPAREN expr RPAREN
    
        Returns:
            float: The value of the factor.
        """
        token = self.current_token
    
        if token.type == TokenType.NUMBER:
            self.eat(TokenType.NUMBER)
            return token.value
        elif token.type == TokenType.LEFT_PAREN:
            self.eat(TokenType.LEFT_PAREN)
            result = self.expr()
            self.eat(TokenType.RIGHT_PAREN)
            return result
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: Token(TokenType.MINUS)

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:188: SyntaxError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1068624e0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:306: in calculate
    result = parser.expr()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:224: in expr
    result = self.term()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:199: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x106860410>

    def factor(self) -> float:
        """
        Parse a factor in the expression grammar.
    
        factor : NUMBER | LPAREN expr RPAREN
    
        Returns:
            float: The value of the factor.
        """
        token = self.current_token
    
        if token.type == TokenType.NUMBER:
            self.eat(TokenType.NUMBER)
            return token.value
        elif token.type == TokenType.LEFT_PAREN:
            self.eat(TokenType.LEFT_PAREN)
            result = self.expr()
            self.eat(TokenType.RIGHT_PAREN)
            return result
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: Token(TokenType.MINUS)

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:188: SyntaxError
_________________ test_invalid_expression_incomplete_addition __________________

calc = <claude.Calculator object at 0x10681ad80>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:306: in calculate
    result = parser.expr()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:230: in expr
    result += self.term()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:199: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x106818a10>

    def factor(self) -> float:
        """
        Parse a factor in the expression grammar.
    
        factor : NUMBER | LPAREN expr RPAREN
    
        Returns:
            float: The value of the factor.
        """
        token = self.current_token
    
        if token.type == TokenType.NUMBER:
            self.eat(TokenType.NUMBER)
            return token.value
        elif token.type == TokenType.LEFT_PAREN:
            self.eat(TokenType.LEFT_PAREN)
            result = self.expr()
            self.eat(TokenType.RIGHT_PAREN)
            return result
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: Token(TokenType.EOF)

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:188: SyntaxError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <claude.Calculator object at 0x106865e80>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:306: in calculate
    result = parser.expr()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:224: in expr
    result = self.term()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:208: in term
    divisor = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x106864da0>

    def factor(self) -> float:
        """
        Parse a factor in the expression grammar.
    
        factor : NUMBER | LPAREN expr RPAREN
    
        Returns:
            float: The value of the factor.
        """
        token = self.current_token
    
        if token.type == TokenType.NUMBER:
            self.eat(TokenType.NUMBER)
            return token.value
        elif token.type == TokenType.LEFT_PAREN:
            self.eat(TokenType.LEFT_PAREN)
            result = self.expr()
            self.eat(TokenType.RIGHT_PAREN)
            return result
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: Token(TokenType.EOF)

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:188: SyntaxError
____________________________ test_empty_parentheses ____________________________

calc = <claude.Calculator object at 0x107bbb3b0>

    def test_empty_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("()")

generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:306: in calculate
    result = parser.expr()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:224: in expr
    result = self.term()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:199: in term
    result = self.factor()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:184: in factor
    result = self.expr()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:224: in expr
    result = self.term()
generated/code/calculator/6-role-few_shot/iteration_2/claude.py:199: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x107bbbe60>

    def factor(self) -> float:
        """
        Parse a factor in the expression grammar.
    
        factor : NUMBER | LPAREN expr RPAREN
    
        Returns:
            float: The value of the factor.
        """
        token = self.current_token
    
        if token.type == TokenType.NUMBER:
            self.eat(TokenType.NUMBER)
            return token.value
        elif token.type == TokenType.LEFT_PAREN:
            self.eat(TokenType.LEFT_PAREN)
            result = self.expr()
            self.eat(TokenType.RIGHT_PAREN)
            return result
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: Token(TokenType.RIGHT_PAREN)

generated/code/calculator/6-role-few_shot/iteration_2/claude.py:188: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_neutral
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_multiply_neutral_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_positive
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_positive_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_divide
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_add_divide_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_divide
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_divide_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_multiply
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_multiply_float
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_all_operations
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_invalid_expression_incomplete_multiplication
FAILED generated/code/calculator/6-role-few_shot/iteration_2/5_functional_correctness-claude.py::test_empty_parentheses
======================== 29 failed, 59 passed in 0.49s =========================
