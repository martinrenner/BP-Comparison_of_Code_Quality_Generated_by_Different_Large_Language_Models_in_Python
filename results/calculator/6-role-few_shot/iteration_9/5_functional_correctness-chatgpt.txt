Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

self = <chatgpt.Calculator object at 0x104061a30>, tokens = ['5', '-', '3', '+']

    def _evaluate_rpn(self, tokens: list) -> float:
        """
        Evaluates an expression written in Reverse Polish Notation (RPN).
    
        Args:
            tokens (list): The RPN tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If a division by zero occurs.
            ValueError: If the expression format is invalid.
        """
        stack = []
        for token in tokens:
            try:
                # If token is a number, push it onto the stack.
>               number = float(token)
E               ValueError: could not convert string to float: '-'

generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:205: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x104061a30>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:27: in calculate
    result = self._evaluate_rpn(rpn)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x104061a30>, tokens = ['5', '-', '3', '+']

    def _evaluate_rpn(self, tokens: list) -> float:
        """
        Evaluates an expression written in Reverse Polish Notation (RPN).
    
        Args:
            tokens (list): The RPN tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If a division by zero occurs.
            ValueError: If the expression format is invalid.
        """
        stack = []
        for token in tokens:
            try:
                # If token is a number, push it onto the stack.
                number = float(token)
                stack.append(number)
            except ValueError:
                # The token is assumed to be an operator.
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:210: ValueError
_________________________ test_subtract_negative_float _________________________

self = <chatgpt.Calculator object at 0x10405e510>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_rpn(self, tokens: list) -> float:
        """
        Evaluates an expression written in Reverse Polish Notation (RPN).
    
        Args:
            tokens (list): The RPN tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If a division by zero occurs.
            ValueError: If the expression format is invalid.
        """
        stack = []
        for token in tokens:
            try:
                # If token is a number, push it onto the stack.
>               number = float(token)
E               ValueError: could not convert string to float: '-'

generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:205: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x10405e510>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:27: in calculate
    result = self._evaluate_rpn(rpn)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10405e510>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_rpn(self, tokens: list) -> float:
        """
        Evaluates an expression written in Reverse Polish Notation (RPN).
    
        Args:
            tokens (list): The RPN tokens.
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ZeroDivisionError: If a division by zero occurs.
            ValueError: If the expression format is invalid.
        """
        stack = []
        for token in tokens:
            try:
                # If token is a number, push it onto the stack.
                number = float(token)
                stack.append(number)
            except ValueError:
                # The token is assumed to be an operator.
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:210: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x10405f4a0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:25: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10405f4a0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Breaks the normalized expression into tokens (numbers, operators, parentheses).
    
        This method handles negative numbers as well by checking if a '-' sign is
        used as a unary operator (e.g., at the start of the expression or after an opening
        parenthesis or another operator) and merging it with the subsequent number.
    
        Args:
            expression (str): The normalized mathematical expression.
    
        Returns:
            list: The list of tokens.
    
        Raises:
            ValueError: If an invalid token or malformed number is encountered.
        """
        tokens = []
        i = 0
        n = len(expression)
        while i < n:
            char = expression[i]
    
            # Detect a unary minus indicating a negative number.
            if char == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                num_str = char
                i += 1
                if i < n and (expression[i].isdigit() or expression[i] == '.'):
                    dot_count = 0
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimal points in a number.")
                        num_str += expression[i]
                        i += 1
                    tokens.append(num_str)
                else:
>                   raise ValueError("Invalid usage of '-' for negative number: expected digit after '-'")
E                   ValueError: Invalid usage of '-' for negative number: expected digit after '-'

generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:109: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x10405e1e0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:25: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10405e1e0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Breaks the normalized expression into tokens (numbers, operators, parentheses).
    
        This method handles negative numbers as well by checking if a '-' sign is
        used as a unary operator (e.g., at the start of the expression or after an opening
        parenthesis or another operator) and merging it with the subsequent number.
    
        Args:
            expression (str): The normalized mathematical expression.
    
        Returns:
            list: The list of tokens.
    
        Raises:
            ValueError: If an invalid token or malformed number is encountered.
        """
        tokens = []
        i = 0
        n = len(expression)
        while i < n:
            char = expression[i]
    
            # Detect a unary minus indicating a negative number.
            if char == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                num_str = char
                i += 1
                if i < n and (expression[i].isdigit() or expression[i] == '.'):
                    dot_count = 0
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimal points in a number.")
                        num_str += expression[i]
                        i += 1
                    tokens.append(num_str)
                else:
>                   raise ValueError("Invalid usage of '-' for negative number: expected digit after '-'")
E                   ValueError: Invalid usage of '-' for negative number: expected digit after '-'

generated/code/calculator/6-role-few_shot/iteration_9/chatgpt.py:109: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_9/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.23s =========================
