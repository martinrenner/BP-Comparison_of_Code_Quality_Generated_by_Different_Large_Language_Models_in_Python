Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF..FF.....                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x102d81160>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:306: in calculate
    result = parser.parse()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:169: in parse
    return self.expression()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:189: in expression
    result -= self.term()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:202: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x102d814f0>

    def factor(self) -> float:
        """
        Parse and evaluate a factor.
    
        Grammar rule: factor -> NUMBER | (PLUS | MINUS) factor | LEFT_PAREN expression RIGHT_PAREN
    
        Returns:
            The result of the factor evaluation.
        """
        if self.current_token.type == TokenType.NUMBER:
            result = self.current_token.value
            self.advance()
            return result
        elif self.current_token.type == TokenType.LEFT_PAREN:
            self.advance()
            result = self.expression()
    
            if self.current_token is None or self.current_token.type != TokenType.RIGHT_PAREN:
                raise ValueError("Unbalanced parentheses")
    
            self.advance()
            return result
        else:
>           raise ValueError(f"Unexpected token: {self.current_token}")
E           ValueError: Unexpected token: PLUS

generated/code/calculator/6-role-few_shot/iteration_5/claude.py:241: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x102d7e870>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:306: in calculate
    result = parser.parse()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:169: in parse
    return self.expression()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:189: in expression
    result -= self.term()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:202: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x102d7e450>

    def factor(self) -> float:
        """
        Parse and evaluate a factor.
    
        Grammar rule: factor -> NUMBER | (PLUS | MINUS) factor | LEFT_PAREN expression RIGHT_PAREN
    
        Returns:
            The result of the factor evaluation.
        """
        if self.current_token.type == TokenType.NUMBER:
            result = self.current_token.value
            self.advance()
            return result
        elif self.current_token.type == TokenType.LEFT_PAREN:
            self.advance()
            result = self.expression()
    
            if self.current_token is None or self.current_token.type != TokenType.RIGHT_PAREN:
                raise ValueError("Unbalanced parentheses")
    
            self.advance()
            return result
        else:
>           raise ValueError(f"Unexpected token: {self.current_token}")
E           ValueError: Unexpected token: PLUS

generated/code/calculator/6-role-few_shot/iteration_5/claude.py:241: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x102d7ed50>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:299: in calculate
    tokens = lexer.tokenize()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Lexer object at 0x102d7eb10>

    def tokenize(self) -> List[Token]:
        """
        Tokenize the expression.
    
        Returns:
            A list of Token objects representing the expression.
    
        Raises:
            ValueError: If invalid characters are found in the expression.
        """
        tokens = []
    
        while self.current_char is not None:
            if self.current_char.isspace():
                self.skip_whitespace()
                continue
    
            if self.current_char.isdigit() or self.current_char == '.':
                tokens.append(Token(TokenType.NUMBER, self.number()))
            elif self.current_char == '+':
                tokens.append(Token(TokenType.PLUS))
                self.advance()
            elif self.current_char == '-':
                # Check if it's a negative number or a subtraction operation
                if (not tokens or tokens[-1].type in
                    [TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY,
                     TokenType.DIVIDE, TokenType.LEFT_PAREN]):
                    self.advance()
                    if self.current_char is None or not (self.current_char.isdigit() or self.current_char == '.'):
>                       raise ValueError("Invalid negative number format")
E                       ValueError: Invalid negative number format

generated/code/calculator/6-role-few_shot/iteration_5/claude.py:113: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x102d7e630>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:299: in calculate
    tokens = lexer.tokenize()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Lexer object at 0x102d7dbe0>

    def tokenize(self) -> List[Token]:
        """
        Tokenize the expression.
    
        Returns:
            A list of Token objects representing the expression.
    
        Raises:
            ValueError: If invalid characters are found in the expression.
        """
        tokens = []
    
        while self.current_char is not None:
            if self.current_char.isspace():
                self.skip_whitespace()
                continue
    
            if self.current_char.isdigit() or self.current_char == '.':
                tokens.append(Token(TokenType.NUMBER, self.number()))
            elif self.current_char == '+':
                tokens.append(Token(TokenType.PLUS))
                self.advance()
            elif self.current_char == '-':
                # Check if it's a negative number or a subtraction operation
                if (not tokens or tokens[-1].type in
                    [TokenType.PLUS, TokenType.MINUS, TokenType.MULTIPLY,
                     TokenType.DIVIDE, TokenType.LEFT_PAREN]):
                    self.advance()
                    if self.current_char is None or not (self.current_char.isdigit() or self.current_char == '.'):
>                       raise ValueError("Invalid negative number format")
E                       ValueError: Invalid negative number format

generated/code/calculator/6-role-few_shot/iteration_5/claude.py:113: ValueError
_________________ test_invalid_expression_incomplete_addition __________________

calc = <claude.Calculator object at 0x102d7d2b0>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:306: in calculate
    result = parser.parse()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:169: in parse
    return self.expression()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:186: in expression
    result += self.term()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:202: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x102d7d550>

    def factor(self) -> float:
        """
        Parse and evaluate a factor.
    
        Grammar rule: factor -> NUMBER | (PLUS | MINUS) factor | LEFT_PAREN expression RIGHT_PAREN
    
        Returns:
            The result of the factor evaluation.
        """
>       if self.current_token.type == TokenType.NUMBER:
E       AttributeError: 'NoneType' object has no attribute 'type'

generated/code/calculator/6-role-few_shot/iteration_5/claude.py:227: AttributeError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <claude.Calculator object at 0x102d7c110>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:306: in calculate
    result = parser.parse()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:169: in parse
    return self.expression()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:180: in expression
    result = self.term()
generated/code/calculator/6-role-few_shot/iteration_5/claude.py:211: in term
    divisor = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x102d7c230>

    def factor(self) -> float:
        """
        Parse and evaluate a factor.
    
        Grammar rule: factor -> NUMBER | (PLUS | MINUS) factor | LEFT_PAREN expression RIGHT_PAREN
    
        Returns:
            The result of the factor evaluation.
        """
>       if self.current_token.type == TokenType.NUMBER:
E       AttributeError: 'NoneType' object has no attribute 'type'

generated/code/calculator/6-role-few_shot/iteration_5/claude.py:227: AttributeError
=========================== short test summary info ============================
FAILED generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/6-role-few_shot/iteration_5/5_functional_correctness-claude.py::test_invalid_expression_incomplete_multiplication
========================= 6 failed, 82 passed in 0.28s =========================
