Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x106ce1760>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_3/claude.py:73: in calculate
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106ce1760>
postfix = [Token(TokenType.NUMBER, 5.0), Token(TokenType.OPERATOR, -), Token(TokenType.NUMBER, 3.0), Token(TokenType.OPERATOR, +)]

    def _evaluate_postfix(self, postfix: List[Token]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            postfix (List[Token]): The expression in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is malformed.
        """
        if not postfix:
            raise ValueError("Empty expression.")
    
        stack = []
    
        for token in postfix:
            if token.type == TokenType.NUMBER:
                stack.append(token.value)
            elif token.type == TokenType.OPERATOR:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:246: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x106cde720>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_3/claude.py:73: in calculate
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106cde720>
postfix = [Token(TokenType.NUMBER, 5.5), Token(TokenType.OPERATOR, -), Token(TokenType.NUMBER, 3.5), Token(TokenType.OPERATOR, +)]

    def _evaluate_postfix(self, postfix: List[Token]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            postfix (List[Token]): The expression in postfix notation.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is malformed.
        """
        if not postfix:
            raise ValueError("Empty expression.")
    
        stack = []
    
        for token in postfix:
            if token.type == TokenType.NUMBER:
                stack.append(token.value)
            elif token.type == TokenType.OPERATOR:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:246: ValueError
___________________________ test_general_parentheses ___________________________

self = <claude.Calculator object at 0x106cdef90>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> List[Token]:
        """
        Converts an expression string into a list of tokens.
    
        Args:
            expression (str): The normalized expression string.
    
        Returns:
            List[Token]: A list of tokens representing the expression.
    
        Raises:
            ValueError: If tokenization fails due to invalid syntax.
        """
        tokens = []
        i = 0
    
        while i < len(expression):
            char = expression[i]
    
            # Handle numbers (including decimals and scientific notation)
            if char.isdigit() or char == '.' or (char == '-' and (i == 0 or expression[i-1] in '(+-*/')):
                # For negative numbers or a decimal point starting a number
                start = i
                # Special handling for negative numbers
                if char == '-':
                    i += 1
    
                # Scan past digits, decimal point, and scientific notation
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.' or
                                              expression[i].lower() == 'e' or
                                              (expression[i] in '+-' and i > 0 and expression[i-1].lower() == 'e')):
                    i += 1
    
                num_str = expression[start:i]
                try:
>                   value = float(num_str)
E                   ValueError: could not convert string to float: '-'

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:160: ValueError

During handling of the above exception, another exception occurred:

calc = <claude.Calculator object at 0x106cdef90>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_3/claude.py:67: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106cdef90>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> List[Token]:
        """
        Converts an expression string into a list of tokens.
    
        Args:
            expression (str): The normalized expression string.
    
        Returns:
            List[Token]: A list of tokens representing the expression.
    
        Raises:
            ValueError: If tokenization fails due to invalid syntax.
        """
        tokens = []
        i = 0
    
        while i < len(expression):
            char = expression[i]
    
            # Handle numbers (including decimals and scientific notation)
            if char.isdigit() or char == '.' or (char == '-' and (i == 0 or expression[i-1] in '(+-*/')):
                # For negative numbers or a decimal point starting a number
                start = i
                # Special handling for negative numbers
                if char == '-':
                    i += 1
    
                # Scan past digits, decimal point, and scientific notation
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.' or
                                              expression[i].lower() == 'e' or
                                              (expression[i] in '+-' and i > 0 and expression[i-1].lower() == 'e')):
                    i += 1
    
                num_str = expression[start:i]
                try:
                    value = float(num_str)
                    tokens.append(Token(TokenType.NUMBER, value))
                except ValueError:
>                   raise ValueError(f"Invalid number format: {num_str}")
E                   ValueError: Invalid number format: -

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:163: ValueError
___________________________ test_nested_parentheses ____________________________

self = <claude.Calculator object at 0x106cdc0b0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> List[Token]:
        """
        Converts an expression string into a list of tokens.
    
        Args:
            expression (str): The normalized expression string.
    
        Returns:
            List[Token]: A list of tokens representing the expression.
    
        Raises:
            ValueError: If tokenization fails due to invalid syntax.
        """
        tokens = []
        i = 0
    
        while i < len(expression):
            char = expression[i]
    
            # Handle numbers (including decimals and scientific notation)
            if char.isdigit() or char == '.' or (char == '-' and (i == 0 or expression[i-1] in '(+-*/')):
                # For negative numbers or a decimal point starting a number
                start = i
                # Special handling for negative numbers
                if char == '-':
                    i += 1
    
                # Scan past digits, decimal point, and scientific notation
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.' or
                                              expression[i].lower() == 'e' or
                                              (expression[i] in '+-' and i > 0 and expression[i-1].lower() == 'e')):
                    i += 1
    
                num_str = expression[start:i]
                try:
>                   value = float(num_str)
E                   ValueError: could not convert string to float: '-'

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:160: ValueError

During handling of the above exception, another exception occurred:

calc = <claude.Calculator object at 0x106cdc0b0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_3/claude.py:67: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106cdc0b0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> List[Token]:
        """
        Converts an expression string into a list of tokens.
    
        Args:
            expression (str): The normalized expression string.
    
        Returns:
            List[Token]: A list of tokens representing the expression.
    
        Raises:
            ValueError: If tokenization fails due to invalid syntax.
        """
        tokens = []
        i = 0
    
        while i < len(expression):
            char = expression[i]
    
            # Handle numbers (including decimals and scientific notation)
            if char.isdigit() or char == '.' or (char == '-' and (i == 0 or expression[i-1] in '(+-*/')):
                # For negative numbers or a decimal point starting a number
                start = i
                # Special handling for negative numbers
                if char == '-':
                    i += 1
    
                # Scan past digits, decimal point, and scientific notation
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.' or
                                              expression[i].lower() == 'e' or
                                              (expression[i] in '+-' and i > 0 and expression[i-1].lower() == 'e')):
                    i += 1
    
                num_str = expression[start:i]
                try:
                    value = float(num_str)
                    tokens.append(Token(TokenType.NUMBER, value))
                except ValueError:
>                   raise ValueError(f"Invalid number format: {num_str}")
E                   ValueError: Invalid number format: -

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:163: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x106cddac0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_3/claude.py:64: in calculate
    normalized_expr = self._normalize_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106cddac0>, expression = '5*(2+3'

    def _normalize_expression(self, expression: str) -> str:
        """
        Normalizes an expression by removing spaces and validating characters.
    
        Args:
            expression (str): The arithmetic expression.
    
        Returns:
            str: The normalized expression.
    
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        if not expression:
            raise ValueError("Expression cannot be empty.")
    
        # Remove all spaces
        normalized = expression.replace(" ", "")
    
        # Check for valid characters
        allowed_chars = set("0123456789+-*/().eE")
        if not all(char in allowed_chars for char in normalized):
            raise ValueError("Expression contains invalid characters.")
    
        # Check for balanced parentheses
        if not self._is_balanced_parentheses(normalized):
>           raise SyntaxError("Unbalanced parentheses in the expression.")
E           SyntaxError: Unbalanced parentheses in the expression.

generated/code/calculator/6-role-few_shot/iteration_3/claude.py:101: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_3/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.25s =========================
