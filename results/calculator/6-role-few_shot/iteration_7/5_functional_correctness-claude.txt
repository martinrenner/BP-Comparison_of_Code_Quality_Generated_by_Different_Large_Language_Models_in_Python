Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x1069c5730>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_7/claude.py:47: in calculate
    result = self._evaluate_postfix(self._infix_to_postfix(tokens))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069c5730>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: List[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (List[str]): List of tokens in postfix notation
    
        Returns:
            float: Result of the evaluation
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is invalid
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        value_stack = []
    
        for token in tokens:
            # If token is a number
            if token not in self.operators:
                try:
                    value_stack.append(float(token))
                except ValueError:
                    raise ValueError(f"Invalid number format: {token}")
            # If token is an operator
            else:
                if len(value_stack) < 2:
>                   raise ValueError("Invalid expression format")
E                   ValueError: Invalid expression format

generated/code/calculator/6-role-few_shot/iteration_7/claude.py:217: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x1069c2d20>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_7/claude.py:47: in calculate
    result = self._evaluate_postfix(self._infix_to_postfix(tokens))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069c2d20>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: List[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (List[str]): List of tokens in postfix notation
    
        Returns:
            float: Result of the evaluation
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is invalid
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        value_stack = []
    
        for token in tokens:
            # If token is a number
            if token not in self.operators:
                try:
                    value_stack.append(float(token))
                except ValueError:
                    raise ValueError(f"Invalid number format: {token}")
            # If token is an operator
            else:
                if len(value_stack) < 2:
>                   raise ValueError("Invalid expression format")
E                   ValueError: Invalid expression format

generated/code/calculator/6-role-few_shot/iteration_7/claude.py:217: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x1069c2570>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_7/claude.py:47: in calculate
    result = self._evaluate_postfix(self._infix_to_postfix(tokens))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069c2570>
tokens = ['5', '2', '+', '3', '*', '-']

    def _evaluate_postfix(self, tokens: List[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (List[str]): List of tokens in postfix notation
    
        Returns:
            float: Result of the evaluation
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is invalid
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        value_stack = []
    
        for token in tokens:
            # If token is a number
            if token not in self.operators:
                try:
                    value_stack.append(float(token))
                except ValueError:
                    raise ValueError(f"Invalid number format: {token}")
            # If token is an operator
            else:
                if len(value_stack) < 2:
>                   raise ValueError("Invalid expression format")
E                   ValueError: Invalid expression format

generated/code/calculator/6-role-few_shot/iteration_7/claude.py:217: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1069c2000>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_7/claude.py:47: in calculate
    result = self._evaluate_postfix(self._infix_to_postfix(tokens))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069c2000>
tokens = ['2', '3', '+', '2', '3', '+', ...]

    def _evaluate_postfix(self, tokens: List[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens (List[str]): List of tokens in postfix notation
    
        Returns:
            float: Result of the evaluation
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is invalid
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        value_stack = []
    
        for token in tokens:
            # If token is a number
            if token not in self.operators:
                try:
                    value_stack.append(float(token))
                except ValueError:
                    raise ValueError(f"Invalid number format: {token}")
            # If token is an operator
            else:
                if len(value_stack) < 2:
>                   raise ValueError("Invalid expression format")
E                   ValueError: Invalid expression format

generated/code/calculator/6-role-few_shot/iteration_7/claude.py:217: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x1069c1fa0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069c1fa0>, expression = '5*(2+3'

    def calculate(self, expression: str) -> float:
        """
        Evaluates the arithmetic expression and returns the result.
    
        Args:
            expression (str): The arithmetic expression as a string
    
        Returns:
            float: The result of the evaluated expression
    
        Raises:
            ValueError: If the expression contains invalid characters or syntax
            ZeroDivisionError: If division by zero is attempted
            SyntaxError: If the expression has unbalanced parentheses
        """
        # Validate and normalize the expression
        processed_expression = self._normalize_expression(expression)
    
        # Check for balanced parentheses
        if not self._is_parentheses_balanced(processed_expression):
>           raise SyntaxError("Unbalanced parentheses in the expression")
E           SyntaxError: Unbalanced parentheses in the expression

generated/code/calculator/6-role-few_shot/iteration_7/claude.py:41: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_7/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.24s =========================
