Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <chatgpt.Calculator object at 0x1048b5d90>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:31: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1048b5d90>, tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates the postfix expression (Reverse Polish Notation) and returns
        the computed result.
    
        Args:
            tokens (list): The list of tokens in postfix order.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If division by zero occurs.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Insufficient values for operation.")
E                   ValueError: Insufficient values for operation.

generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:191: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <chatgpt.Calculator object at 0x1048b0fb0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:31: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1048b0fb0>, tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates the postfix expression (Reverse Polish Notation) and returns
        the computed result.
    
        Args:
            tokens (list): The list of tokens in postfix order.
    
        Returns:
            float: The result of the evaluation.
    
        Raises:
            ZeroDivisionError: If division by zero occurs.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Insufficient values for operation.")
E                   ValueError: Insufficient values for operation.

generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:191: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x1048b2cc0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:29: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1048b2cc0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression into numbers and operators.
    
        This function supports negative numbers by treating a '-' as a unary
        negative sign when it occurs at the start of the expression or immediately
        after an opening parenthesis or another operator.
    
        Args:
            expression (str): The normalized mathematical expression.
    
        Returns:
            list: A list of tokens where numbers are floats and operators/parentheses
                  are represented as strings.
    
        Raises:
            ValueError: If an invalid number format or character misuse is detected.
        """
        tokens = []
        idx = 0
        n = len(expression)
    
        while idx < n:
            ch = expression[idx]
            # Check for start of a number or unary minus
            if ch.isdigit() or ch == '.' or (ch == '-' and (idx == 0 or expression[idx - 1] in "(+-*/")):
                num_str = ""
                # If the current '-' is a unary operator, include it in the number
                if ch == '-' and (idx == 0 or expression[idx - 1] in "(+-*/"):
                    num_str += ch
                    idx += 1
                    if idx >= n or (not expression[idx].isdigit() and expression[idx] != '.'):
>                       raise ValueError("Invalid use of '-' sign.")
E                       ValueError: Invalid use of '-' sign.

generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:106: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x1048b27e0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:29: in calculate
    tokens = self._tokenize(normalized_expr)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1048b27e0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression into numbers and operators.
    
        This function supports negative numbers by treating a '-' as a unary
        negative sign when it occurs at the start of the expression or immediately
        after an opening parenthesis or another operator.
    
        Args:
            expression (str): The normalized mathematical expression.
    
        Returns:
            list: A list of tokens where numbers are floats and operators/parentheses
                  are represented as strings.
    
        Raises:
            ValueError: If an invalid number format or character misuse is detected.
        """
        tokens = []
        idx = 0
        n = len(expression)
    
        while idx < n:
            ch = expression[idx]
            # Check for start of a number or unary minus
            if ch.isdigit() or ch == '.' or (ch == '-' and (idx == 0 or expression[idx - 1] in "(+-*/")):
                num_str = ""
                # If the current '-' is a unary operator, include it in the number
                if ch == '-' and (idx == 0 or expression[idx - 1] in "(+-*/"):
                    num_str += ch
                    idx += 1
                    if idx >= n or (not expression[idx].isdigit() and expression[idx] != '.'):
>                       raise ValueError("Invalid use of '-' sign.")
E                       ValueError: Invalid use of '-' sign.

generated/code/calculator/6-role-few_shot/iteration_8/chatgpt.py:106: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/6-role-few_shot/iteration_8/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.23s =========================
