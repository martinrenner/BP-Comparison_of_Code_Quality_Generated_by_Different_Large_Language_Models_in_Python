Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py . [  1%]
...F.....FFFFFFFFFF....................FFFFFF..................FFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <chatgpt.Calculator object at 0x101c78f50>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
        assert calc.calculate("-1+2") == 1
        assert calc.calculate("-1+-2") == -3
        assert calc.calculate("-1000000000+2000000000") == 1000000000
>       assert calc.calculate("999999999999999-1") == 999999999999998

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c78f50>
expression = '999999999999999-1'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
____________________________ test_subtract_positive ____________________________

calc = <chatgpt.Calculator object at 0x101c782f0>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c782f0>, expression = '5-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________________ test_subtract_positive_float _________________________

calc = <chatgpt.Calculator object at 0x101c79a00>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c79a00>, expression = '5.5-3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <chatgpt.Calculator object at 0x101c75520>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c75520>, expression = '(5)-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <chatgpt.Calculator object at 0x101c74ce0>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c74ce0>, expression = '(5.5)-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
____________________________ test_subtract_negative ____________________________

calc = <chatgpt.Calculator object at 0x101c74080>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c74080>, expression = '5-+3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <chatgpt.Calculator object at 0x101c79df0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c79df0>, expression = '5.5-+3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <chatgpt.Calculator object at 0x101c74770>

    def test_subtract_negative_parentheses(calc):
>       assert calc.calculate("5-(-3)") == 8

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c74770>, expression = '5-(-3)'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <chatgpt.Calculator object at 0x101c751f0>

    def test_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-3)") == 8.5

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c751f0>, expression = '5.5-(-3)'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
____________________________ test_subtract_neutral _____________________________

calc = <chatgpt.Calculator object at 0x101c762a0>

    def test_subtract_neutral(calc):
>       assert calc.calculate("0-0") == 0

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c762a0>, expression = '0-0'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________________ test_subtract_neutral_float __________________________

calc = <chatgpt.Calculator object at 0x1030ab860>

    def test_subtract_neutral_float(calc):
>       assert calc.calculate("0.0-0.0") == 0

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030ab860>, expression = '0.0-0.0'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <chatgpt.Calculator object at 0x1030aa360>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030aa360>, expression = '5+2-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <chatgpt.Calculator object at 0x1030a97f0>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030a97f0>, expression = '5.5+2.5-3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <chatgpt.Calculator object at 0x1030a8980>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030a8980>, expression = '(5)+2-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <chatgpt.Calculator object at 0x1030a94c0>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030a94c0>, expression = '(5.5)+2-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <chatgpt.Calculator object at 0x1030aba70>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030aba70>, expression = '5+(-2)-3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <chatgpt.Calculator object at 0x101c7dc70>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c7dc70>, expression = '5.5+(-2.5)-3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <chatgpt.Calculator object at 0x101c77560>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c77560>, expression = '5-2/3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <chatgpt.Calculator object at 0x101c78a10>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c78a10>, expression = '5.5-2.5/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <chatgpt.Calculator object at 0x1030aa360>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030aa360>, expression = '(5)-2/3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <chatgpt.Calculator object at 0x101c74770>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c74770>, expression = '(5.5)-2/3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <chatgpt.Calculator object at 0x101c769f0>

    def test_subtract_divide_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c769f0>, expression = '5-(-2)/3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <chatgpt.Calculator object at 0x1030a9640>

    def test_subtract_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030a9640>, expression = '5.5-(-2.5)/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <chatgpt.Calculator object at 0x101c7c110>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:657: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c7c110>, expression = '5-2*3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <chatgpt.Calculator object at 0x101c74110>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:668: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c74110>, expression = '5.5-2.5*3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <chatgpt.Calculator object at 0x101c2d610>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c2d610>, expression = '(5)-2*3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <chatgpt.Calculator object at 0x101c77b90>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c77b90>, expression = '(5.5)-2*3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <chatgpt.Calculator object at 0x1030a9640>

    def test_subtract_multiply_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)*3") == 11

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:699: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1030a9640>, expression = '5-(-2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <chatgpt.Calculator object at 0x101c2fb00>

    def test_subtract_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)*3.5") == 14.25

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c2fb00>, expression = '5.5-(-2.5)*3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
_____________________________ test_all_operations ______________________________

calc = <chatgpt.Calculator object at 0x101c2ee10>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c2ee10>, expression = '5+2*3-4/2'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x101c75280>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:37: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c75280>
tokens = [5.0, 2.0, '+', 3.0, '*', '-']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluate a postfix expression represented as a list of tokens.
    
        Parameters:
            tokens (list): The postfix expression tokens (numbers and operators).
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ValueError: If the expression format is invalid.
            ZeroDivisionError: If a division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in {'+', '-', '*', '/'}:
                if len(stack) < 2:
>                   raise ValueError("Insufficient values in the expression for the operation.")
E                   ValueError: Insufficient values in the expression for the operation.

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:203: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x101c7c1a0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:37: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c7c1a0>
tokens = [2.0, 3.0, '+', 2.0, 3.0, '+', ...]

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluate a postfix expression represented as a list of tokens.
    
        Parameters:
            tokens (list): The postfix expression tokens (numbers and operators).
    
        Returns:
            float: The result of the evaluated expression.
    
        Raises:
            ValueError: If the expression format is invalid.
            ZeroDivisionError: If a division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in {'+', '-', '*', '/'}:
                if len(stack) < 2:
>                   raise ValueError("Insufficient values in the expression for the operation.")
E                   ValueError: Insufficient values in the expression for the operation.

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:203: ValueError
_____________________________ test_long_expression _____________________________

calc = <chatgpt.Calculator object at 0x101c2ec00>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x101c2ec00>
expression = '-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens.
        Tokens can be floats (numbers), operators, or parentheses.
        Handles negative numbers by distinguishing unary minus
        from the subtraction operator.
    
        Parameters:
            expression (str): The arithmetic expression string.
    
        Returns:
            list: A list of tokens where numbers are converted to floats.
    
        Raises:
            ValueError: If an invalid character is encountered
                        or if the number format is incorrect.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_characters = "0123456789.+-*/() "  # Define allowed characters
    
        # Validate characters up-front for security and correctness.
        for ch in expression:
            if ch not in allowed_characters:
                raise ValueError(f"Invalid character encountered: {ch}")
    
        while i < n:
            ch = expression[i]
            if ch.isspace():
                i += 1
                continue
            # Check for unary minus: if '-' is at the beginning or preceded by an operator or '('.
            if ch == '-' and (i == 0 or expression[i - 1] in "(+-*/"):
                # Peek ahead to see if a number follows the unary minus.
                j = i + 1
                if j < n and (expression[j].isdigit() or expression[j] == '.'):
                    num_str = '-'  # Include the negative sign.
                    dot_count = 0
                    while j < n and (expression[j].isdigit() or expression[j] == '.'):
                        if expression[j] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid number format: multiple decimals in a number.")
                        num_str += expression[j]
                        j += 1
                    try:
                        number = float(num_str)
                    except ValueError:
                        raise ValueError("Invalid number format encountered.")
                    tokens.append(number)
                    i = j
                    continue
                else:
                    # If no number follows, treat '-' as a subtraction operator.
                    tokens.append(ch)
                    i += 1
                    continue
            # Parse a positive number if the character is a digit or a dot.
            elif ch.isdigit() or ch == '.':
                j = i
                num_str = ""
                dot_count = 0
                while j < n and (expression[j].isdigit() or expression[j] == '.'):
                    if expression[j] == '.':
                        dot_count += 1
                        if dot_count > 1:
                            raise ValueError("Invalid number format: multiple decimals in a number.")
                    num_str += expression[j]
                    j += 1
                try:
                    number = float(num_str)
                except ValueError:
                    raise ValueError("Invalid number format encountered.")
                tokens.append(number)
                i = j
                continue
            elif ch in "+*/":
                tokens.append(ch)
                i += 1
                continue
            elif ch in "()":
                tokens.append(ch)
                i += 1
                continue
            else:
                # This else should never be reached because of the allowed characters check.
>               raise ValueError(f"Invalid character encountered: {ch}")
E               ValueError: Invalid character encountered: -

generated/code/calculator/1-zero_shot/iteration_5/chatgpt.py:127: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_negative
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_positive
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_subtract_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_divide
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_multiply
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_multiply_float
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_all_operations
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_nested_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_long_expression
======================== 33 failed, 55 passed in 0.67s =========================
