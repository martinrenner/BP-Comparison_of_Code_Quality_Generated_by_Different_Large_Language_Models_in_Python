Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py . [  1%]
.............FF........FFF.FF....FFFF........FF..FF............FF....FF. [ 82%]
...FFF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x1056a0830>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1056a0830>
postfix_tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
>                   raise ValueError("Insufficient operands for operator")
E                   ValueError: Insufficient operands for operator

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:176: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x105699130>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105699130>
postfix_tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
>                   raise ValueError("Insufficient operands for operator")
E                   ValueError: Insufficient operands for operator

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:176: ValueError
____________________________ test_multiply_negative ____________________________

calc = <gemini.Calculator object at 0x1056a1460>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6
E       AssertionError: assert -3.0 == -6
E        +  where -3.0 = calculate('2*-3')
E        +    where calculate = <gemini.Calculator object at 0x1056a1460>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:196: AssertionError
______________________ test_multiply_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x10569bf20>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999
E       AssertionError: assert -1.0 == 999999999999999
E        +  where -1.0 = calculate('(-999999999999999)*-1')
E        +    where calculate = <gemini.Calculator object at 0x10569bf20>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:208: AssertionError
_________________________ test_multiply_negative_float _________________________

calc = <gemini.Calculator object at 0x10569a4e0>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75
E       AssertionError: assert -3.5 == -8.75
E        +  where -3.5 = calculate('2.5*-3.5')
E        +    where calculate = <gemini.Calculator object at 0x10569a4e0>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:212: AssertionError
____________________________ test_multiply_neutral _____________________________

calc = <gemini.Calculator object at 0x105699340>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0
E       AssertionError: assert -5.0 == 0
E        +  where -5.0 = calculate('0*-5')
E        +    where calculate = <gemini.Calculator object at 0x105699340>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:237: AssertionError
_________________________ test_multiply_neutral_float __________________________

calc = <gemini.Calculator object at 0x105699040>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0
E       AssertionError: assert -5.0 == 0
E        +  where -5.0 = calculate('0.0*-5.0')
E        +    where calculate = <gemini.Calculator object at 0x105699040>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:245: AssertionError
_____________________________ test_divide_negative _____________________________

calc = <gemini.Calculator object at 0x105651070>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105651070>
postfix_tokens = [6.0, 0.0, '/', 3.0, '-']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ZeroDivisionError("Division by zero.")
E                       ZeroDivisionError: Division by zero.

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:191: ZeroDivisionError
__________________________ test_divide_negative_float __________________________

calc = <gemini.Calculator object at 0x1056523f0>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1056523f0>
postfix_tokens = [6.5, 0.0, '/', 3.5, '-']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ZeroDivisionError("Division by zero.")
E                       ZeroDivisionError: Division by zero.

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:191: ZeroDivisionError
_______________________ test_divide_negative_parentheses _______________________

calc = <gemini.Calculator object at 0x105650e60>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105650e60>
postfix_tokens = [999999999999999.0, 0.0, '/', 1.0, '-']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ZeroDivisionError("Division by zero.")
E                       ZeroDivisionError: Division by zero.

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:191: ZeroDivisionError
____________________ test_divide_negative_float_parentheses ____________________

calc = <gemini.Calculator object at 0x105653c50>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105653c50>
postfix_tokens = [0.0, 999999999999999.0, '-', 0.0, '/', 0.1, ...]

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ZeroDivisionError("Division by zero.")
E                       ZeroDivisionError: Division by zero.

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:191: ZeroDivisionError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x105698b00>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
        assert calc.calculate("-5+2*3") == 1
>       assert calc.calculate("-5*-2+3") == 13
E       AssertionError: assert 1.0 == 13
E        +  where 1.0 = calculate('-5*-2+3')
E        +    where calculate = <gemini.Calculator object at 0x105698b00>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:380: AssertionError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x10569b770>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
        assert calc.calculate("-5.5+2.5*3.5") == 3.25
>       assert calc.calculate("-5.5*-2.5+3.5") == 17.25
E       AssertionError: assert 1.0 == 17.25
E        +  where 1.0 = calculate('-5.5*-2.5+3.5')
E        +    where calculate = <gemini.Calculator object at 0x10569b770>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:391: AssertionError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x1056a1190>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0
E       AssertionError: assert 999999999999998.0 == 0
E        +  where 999999999999998.0 = calculate('999999999999999*-1+999999999999999')
E        +    where calculate = <gemini.Calculator object at 0x1056a1190>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:425: AssertionError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x10569ffe0>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5
E       AssertionError: assert 999999999999998.0 == -0.5
E        +  where 999999999999998.0 = calculate('(999999999999999.5)*-1+999999999999999')
E        +    where calculate = <gemini.Calculator object at 0x10569ffe0>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:435: AssertionError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x105651970>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105651970>
postfix_tokens = [0.0, 5.0, 0.0, '/', '-', 2.0, ...]

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ZeroDivisionError("Division by zero.")
E                       ZeroDivisionError: Division by zero.

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:191: ZeroDivisionError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x1056524e0>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:45: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1056524e0>
postfix_tokens = [0.0, 5.5, 0.0, '/', '-', 2.5, ...]

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens: A list of tokens in postfix notation.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., division by zero).
        """
    
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):  # Already converted to float
                operand_stack.append(token)
    
            elif token in {'+', '-', '*', '/'}:
                 # Check enough opernads are present
                if len(operand_stack) < 2:
                    raise ValueError("Insufficient operands for operator")
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression format.")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ZeroDivisionError("Division by zero.")
E                       ZeroDivisionError: Division by zero.

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:191: ZeroDivisionError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x105652600>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
        assert calc.calculate("-5-2*3") == -11
>       assert calc.calculate("-5*-2*3") == 30
E       AssertionError: assert -6.0 == 30
E        +  where -6.0 = calculate('-5*-2*3')
E        +    where calculate = <gemini.Calculator object at 0x105652600>.calculate

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:660: AssertionError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x105650d10>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
        assert calc.calculate("-5.5-2.5*3.5") == -14.25
>       assert calc.calculate("-5.5*-2.5*3.5") == pytest.approx(48.125, rel=1e-6)
E       assert -8.75 == 48.125 ± 4.8e-05
E         
E         comparison failed
E         Obtained: -8.75
E         Expected: 48.125 ± 4.8e-05

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:671: AssertionError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x105649d30>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
        assert calc.calculate("-5*2+3/3") == -9
>       assert calc.calculate("-5*-2/3+5") == pytest.approx(8.33333333, rel=1e-6)
E       assert 4.333333333333333 == 8.33333333 ± 8.3e-06
E         
E         comparison failed
E         Obtained: 4.333333333333333
E         Expected: 8.33333333 ± 8.3e-06

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:725: AssertionError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x1056528d0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:43: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1056528d0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens.
    
        Args:
            expression: The mathematical expression string.
    
        Returns:
            A list of tokens (numbers, operators, parentheses).
    
        Raises:
            ValueError: If the expression contains invalid characters.
        """
    
        # Remove all whitespace
        expression = expression.replace(" ", "")
    
        # Use regex to split into tokens. Allows for integers, floats, and operators.
        tokens = re.findall(r"(\d+\.\d+|\d+|[+\-*/()]|[-+]?\d+\.\d+|[-+]?\d+)", expression)
    
        # Validate all character are allowed
        valid_pattern = r"^(\d+\.\d+|\d+|[+\-*/()]|[-+]?\d+\.\d+|[-+]?\d+)+$"
        if not re.match(valid_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # --- Handle unary minus ---
        # Convert '--' to '+' and insert "0" when unary minus is encountered.
        processed_tokens = []
        i = 0
    
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i-1] in '*/(+'):
                # Unary minus
                if tokens[i+1].replace('.', '', 1).isdigit(): # Check to avoid IndexError
                    processed_tokens.append('0')
                    processed_tokens.append('-')
                    processed_tokens.append(tokens[i+1])
                    i += 2
                else:
>                   raise ValueError("Invalid use of unary operator")
E                   ValueError: Invalid use of unary operator

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:92: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x1072cf740>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:48: in calculate
    raise e  # Re-raise the exception after handling.
generated/code/calculator/1-zero_shot/iteration_6/gemini.py:43: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1072cf740>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens.
    
        Args:
            expression: The mathematical expression string.
    
        Returns:
            A list of tokens (numbers, operators, parentheses).
    
        Raises:
            ValueError: If the expression contains invalid characters.
        """
    
        # Remove all whitespace
        expression = expression.replace(" ", "")
    
        # Use regex to split into tokens. Allows for integers, floats, and operators.
        tokens = re.findall(r"(\d+\.\d+|\d+|[+\-*/()]|[-+]?\d+\.\d+|[-+]?\d+)", expression)
    
        # Validate all character are allowed
        valid_pattern = r"^(\d+\.\d+|\d+|[+\-*/()]|[-+]?\d+\.\d+|[-+]?\d+)+$"
        if not re.match(valid_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # --- Handle unary minus ---
        # Convert '--' to '+' and insert "0" when unary minus is encountered.
        processed_tokens = []
        i = 0
    
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i-1] in '*/(+'):
                # Unary minus
                if tokens[i+1].replace('.', '', 1).isdigit(): # Check to avoid IndexError
                    processed_tokens.append('0')
                    processed_tokens.append('-')
                    processed_tokens.append(tokens[i+1])
                    i += 2
                else:
>                   raise ValueError("Invalid use of unary operator")
E                   ValueError: Invalid use of unary operator

generated/code/calculator/1-zero_shot/iteration_6/gemini.py:92: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_negative
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_nested_parentheses
======================== 22 failed, 66 passed in 0.38s =========================
