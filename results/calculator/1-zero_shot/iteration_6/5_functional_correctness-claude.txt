Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x103ef61e0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/claude.py:54: in calculate
    result, _ = self._parse_expression(tokens, 0)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:150: in _parse_expression
    return self._parse_addition_subtraction(tokens, start_pos)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:167: in _parse_addition_subtraction
    right, pos = self._parse_multiplication_division(tokens, pos + 1)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:190: in _parse_multiplication_division
    left, pos = self._parse_factor(tokens, pos)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103ef61e0>, tokens = ['5', '-', '+', '3']
pos = 2

    def _parse_factor(self, tokens: List[str], pos: int) -> Tuple[float, int]:
        """
        Parse a factor (number or parenthesized expression).
    
        Args:
            tokens: List of tokens to parse
            pos: Current position in the token list
    
        Returns:
            (result, new_position): The value of the factor and the new position
    
        Raises:
            ValueError: If the expression has invalid syntax
        """
        if pos >= len(tokens):
            raise ValueError("Unexpected end of expression")
    
        token = tokens[pos]
    
        # Handle parenthesized expression
        if token == '(':
            result, pos = self._parse_expression(tokens, pos + 1)
    
            if pos >= len(tokens) or tokens[pos] != ')':
                raise ValueError("Missing closing parenthesis")
    
            return result, pos + 1
    
        # Handle numbers
        elif re.match(self.NUMBER_PATTERN, token):
            return float(token), pos + 1
    
>       raise ValueError(f"Unexpected token: {token}")
E       ValueError: Unexpected token: +

generated/code/calculator/1-zero_shot/iteration_6/claude.py:237: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x103ef2e70>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/claude.py:54: in calculate
    result, _ = self._parse_expression(tokens, 0)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:150: in _parse_expression
    return self._parse_addition_subtraction(tokens, start_pos)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:167: in _parse_addition_subtraction
    right, pos = self._parse_multiplication_division(tokens, pos + 1)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:190: in _parse_multiplication_division
    left, pos = self._parse_factor(tokens, pos)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103ef2e70>
tokens = ['5.5', '-', '+', '3.5'], pos = 2

    def _parse_factor(self, tokens: List[str], pos: int) -> Tuple[float, int]:
        """
        Parse a factor (number or parenthesized expression).
    
        Args:
            tokens: List of tokens to parse
            pos: Current position in the token list
    
        Returns:
            (result, new_position): The value of the factor and the new position
    
        Raises:
            ValueError: If the expression has invalid syntax
        """
        if pos >= len(tokens):
            raise ValueError("Unexpected end of expression")
    
        token = tokens[pos]
    
        # Handle parenthesized expression
        if token == '(':
            result, pos = self._parse_expression(tokens, pos + 1)
    
            if pos >= len(tokens) or tokens[pos] != ')':
                raise ValueError("Missing closing parenthesis")
    
            return result, pos + 1
    
        # Handle numbers
        elif re.match(self.NUMBER_PATTERN, token):
            return float(token), pos + 1
    
>       raise ValueError(f"Unexpected token: {token}")
E       ValueError: Unexpected token: +

generated/code/calculator/1-zero_shot/iteration_6/claude.py:237: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x103ef3170>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/claude.py:54: in calculate
    result, _ = self._parse_expression(tokens, 0)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:150: in _parse_expression
    return self._parse_addition_subtraction(tokens, start_pos)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:163: in _parse_addition_subtraction
    left, pos = self._parse_multiplication_division(tokens, pos)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:190: in _parse_multiplication_division
    left, pos = self._parse_factor(tokens, pos)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103ef3170>
tokens = ['-', '(', '5', '+', '2', ')', ...], pos = 0

    def _parse_factor(self, tokens: List[str], pos: int) -> Tuple[float, int]:
        """
        Parse a factor (number or parenthesized expression).
    
        Args:
            tokens: List of tokens to parse
            pos: Current position in the token list
    
        Returns:
            (result, new_position): The value of the factor and the new position
    
        Raises:
            ValueError: If the expression has invalid syntax
        """
        if pos >= len(tokens):
            raise ValueError("Unexpected end of expression")
    
        token = tokens[pos]
    
        # Handle parenthesized expression
        if token == '(':
            result, pos = self._parse_expression(tokens, pos + 1)
    
            if pos >= len(tokens) or tokens[pos] != ')':
                raise ValueError("Missing closing parenthesis")
    
            return result, pos + 1
    
        # Handle numbers
        elif re.match(self.NUMBER_PATTERN, token):
            return float(token), pos + 1
    
>       raise ValueError(f"Unexpected token: {token}")
E       ValueError: Unexpected token: -

generated/code/calculator/1-zero_shot/iteration_6/claude.py:237: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x103ef2ab0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_6/claude.py:54: in calculate
    result, _ = self._parse_expression(tokens, 0)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:150: in _parse_expression
    return self._parse_addition_subtraction(tokens, start_pos)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:163: in _parse_addition_subtraction
    left, pos = self._parse_multiplication_division(tokens, pos)
generated/code/calculator/1-zero_shot/iteration_6/claude.py:190: in _parse_multiplication_division
    left, pos = self._parse_factor(tokens, pos)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103ef2ab0>
tokens = ['-', '(', '(', '2', '+', '3', ...], pos = 0

    def _parse_factor(self, tokens: List[str], pos: int) -> Tuple[float, int]:
        """
        Parse a factor (number or parenthesized expression).
    
        Args:
            tokens: List of tokens to parse
            pos: Current position in the token list
    
        Returns:
            (result, new_position): The value of the factor and the new position
    
        Raises:
            ValueError: If the expression has invalid syntax
        """
        if pos >= len(tokens):
            raise ValueError("Unexpected end of expression")
    
        token = tokens[pos]
    
        # Handle parenthesized expression
        if token == '(':
            result, pos = self._parse_expression(tokens, pos + 1)
    
            if pos >= len(tokens) or tokens[pos] != ')':
                raise ValueError("Missing closing parenthesis")
    
            return result, pos + 1
    
        # Handle numbers
        elif re.match(self.NUMBER_PATTERN, token):
            return float(token), pos + 1
    
>       raise ValueError(f"Unexpected token: {token}")
E       ValueError: Unexpected token: -

generated/code/calculator/1-zero_shot/iteration_6/claude.py:237: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_6/5_functional_correctness-claude.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.24s =========================
