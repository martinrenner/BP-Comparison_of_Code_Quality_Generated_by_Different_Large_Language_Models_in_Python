Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_4/5_functional_correctness-claude.py . [  1%]
........................................................................ [ 82%]
............F..                                                          [100%]

=================================== FAILURES ===================================
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x101b87d10>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/1-zero_shot/iteration_4/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_4/claude.py:33: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x101b87d10>, expression = '5*(2+3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate the input expression for basic syntax errors.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression contains invalid characters.
            SyntaxError: If the expression has unbalanced parentheses.
        """
        # Check for empty expressions
        if not expression.strip():
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid characters
        for char in expression:
            if not char.isdigit() and char not in self.valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if paren_count > 0:
>           raise SyntaxError("Unbalanced parentheses: missing closing parentheses")
E           SyntaxError: Unbalanced parentheses: missing closing parentheses

generated/code/calculator/1-zero_shot/iteration_4/claude.py:73: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 1 failed, 87 passed in 0.19s =========================
