Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
........FFFFFFF                                                          [100%]

=================================== FAILURES ===================================
_________________ test_invalid_expression_incomplete_addition __________________

calc = <chatgpt.Calculator object at 0x102138410>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:105: in _parse_expression
    next_term = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:122: in _parse_term
    result = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102138410>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
>           raise SyntaxError("Unexpected end of expression.")
E           SyntaxError: Unexpected end of expression.

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:150: SyntaxError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <chatgpt.Calculator object at 0x102134cb0>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:126: in _parse_term
    next_factor = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102134cb0>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
>           raise SyntaxError("Unexpected end of expression.")
E           SyntaxError: Unexpected end of expression.

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:150: SyntaxError
_______________________________ test_empty_input _______________________________

calc = <chatgpt.Calculator object at 0x1021381a0>

    def test_empty_input(calc):
        with pytest.raises(ValueError):
>           calc.calculate("")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:788: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:122: in _parse_term
    result = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1021381a0>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
>           raise SyntaxError("Unexpected end of expression.")
E           SyntaxError: Unexpected end of expression.

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:150: SyntaxError
____________________________ test_empty_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x102136fc0>

    def test_empty_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("()")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:122: in _parse_term
    result = self._parse_factor()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:165: in _parse_factor
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:122: in _parse_term
    result = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102136fc0>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
            raise SyntaxError("Unexpected end of expression.")
    
        token = self.tokens[self.index]
    
        # Handle unary plus and minus
        if token == '+':
            self.index += 1
            return self._parse_factor()
        elif token == '-':
            self.index += 1
            return -self._parse_factor()
    
        # Handle parentheses - evaluate the expression inside them
        if token == '(':
            self.index += 1  # consume '('
            result = self._parse_expression()
            if self.index >= len(self.tokens) or self.tokens[self.index] != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self.index += 1  # consume ')'
            return result
    
        # The token should be a number at this point
        if isinstance(token, (int, float)):
            self.index += 1
            return token
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: )

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:176: SyntaxError
__________________________ test_unmatched_parentheses __________________________

calc = <chatgpt.Calculator object at 0x102136240>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:126: in _parse_term
    next_factor = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102136240>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
            raise SyntaxError("Unexpected end of expression.")
    
        token = self.tokens[self.index]
    
        # Handle unary plus and minus
        if token == '+':
            self.index += 1
            return self._parse_factor()
        elif token == '-':
            self.index += 1
            return -self._parse_factor()
    
        # Handle parentheses - evaluate the expression inside them
        if token == '(':
            self.index += 1  # consume '('
            result = self._parse_expression()
            if self.index >= len(self.tokens) or self.tokens[self.index] != ')':
>               raise SyntaxError("Unbalanced parentheses: missing ')'.")
E               SyntaxError: Unbalanced parentheses: missing ')'.

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:167: SyntaxError
__________________________ test_invalid_double_slash ___________________________

calc = <chatgpt.Calculator object at 0x1021356d0>

    def test_invalid_double_slash(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5//2")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:803: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:126: in _parse_term
    next_factor = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1021356d0>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
            raise SyntaxError("Unexpected end of expression.")
    
        token = self.tokens[self.index]
    
        # Handle unary plus and minus
        if token == '+':
            self.index += 1
            return self._parse_factor()
        elif token == '-':
            self.index += 1
            return -self._parse_factor()
    
        # Handle parentheses - evaluate the expression inside them
        if token == '(':
            self.index += 1  # consume '('
            result = self._parse_expression()
            if self.index >= len(self.tokens) or self.tokens[self.index] != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self.index += 1  # consume ')'
            return result
    
        # The token should be a number at this point
        if isinstance(token, (int, float)):
            self.index += 1
            return token
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: /

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:176: SyntaxError
_________________________ test_invalid_exponentiation __________________________

calc = <chatgpt.Calculator object at 0x102134290>

    def test_invalid_exponentiation(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5**2")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:32: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:101: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:126: in _parse_term
    next_factor = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x102134290>

    def _parse_factor(self):
        """
        Parse and evaluate a factor.
    
        Grammar:
            factor = [ ("+" | "-") ] primary
            primary = NUMBER | "(" expression ")"
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            SyntaxError: If the expression syntax is invalid.
        """
        if self.index >= len(self.tokens):
            raise SyntaxError("Unexpected end of expression.")
    
        token = self.tokens[self.index]
    
        # Handle unary plus and minus
        if token == '+':
            self.index += 1
            return self._parse_factor()
        elif token == '-':
            self.index += 1
            return -self._parse_factor()
    
        # Handle parentheses - evaluate the expression inside them
        if token == '(':
            self.index += 1  # consume '('
            result = self._parse_expression()
            if self.index >= len(self.tokens) or self.tokens[self.index] != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self.index += 1  # consume ')'
            return result
    
        # The token should be a number at this point
        if isinstance(token, (int, float)):
            self.index += 1
            return token
    
>       raise SyntaxError(f"Unexpected token: {token}")
E       SyntaxError: Unexpected token: *

generated/code/calculator/1-zero_shot/iteration_2/chatgpt.py:176: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_invalid_expression_incomplete_multiplication
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_empty_input
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_empty_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_unmatched_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_invalid_double_slash
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-chatgpt.py::test_invalid_exponentiation
========================= 7 failed, 81 passed in 0.25s =========================
