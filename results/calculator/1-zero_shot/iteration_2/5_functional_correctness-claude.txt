Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x105f79880>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/claude.py:59: in calculate
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105f79880>, tokens = [5, '-', 3, '+']

    def _evaluate_postfix(self, tokens: List[Union[float, str]]) -> float:
        """
        Evaluate a postfix expression.
    
        Args:
            tokens (List[Union[float, str]]): Tokens in postfix notation.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is invalid.
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        operand_stack = []
    
        for token in tokens:
            # If token is a number, push to stack
            if isinstance(token, (int, float)):
                operand_stack.append(token)
    
            # If token is an operator, pop operands and apply operator
            elif token in self.operators:
                if len(operand_stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/1-zero_shot/iteration_2/claude.py:251: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x105f76600>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/claude.py:59: in calculate
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105f76600>, tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, tokens: List[Union[float, str]]) -> float:
        """
        Evaluate a postfix expression.
    
        Args:
            tokens (List[Union[float, str]]): Tokens in postfix notation.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is invalid.
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        operand_stack = []
    
        for token in tokens:
            # If token is a number, push to stack
            if isinstance(token, (int, float)):
                operand_stack.append(token)
    
            # If token is an operator, pop operands and apply operator
            elif token in self.operators:
                if len(operand_stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/1-zero_shot/iteration_2/claude.py:251: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x105f77410>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/claude.py:59: in calculate
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105f77410>
tokens = [5, 2, '+', 3, '*', '-']

    def _evaluate_postfix(self, tokens: List[Union[float, str]]) -> float:
        """
        Evaluate a postfix expression.
    
        Args:
            tokens (List[Union[float, str]]): Tokens in postfix notation.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is invalid.
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        operand_stack = []
    
        for token in tokens:
            # If token is a number, push to stack
            if isinstance(token, (int, float)):
                operand_stack.append(token)
    
            # If token is an operator, pop operands and apply operator
            elif token in self.operators:
                if len(operand_stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/1-zero_shot/iteration_2/claude.py:251: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x105f76ea0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/claude.py:59: in calculate
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105f76ea0>
tokens = [2, 3, '+', 2, 3, '+', ...]

    def _evaluate_postfix(self, tokens: List[Union[float, str]]) -> float:
        """
        Evaluate a postfix expression.
    
        Args:
            tokens (List[Union[float, str]]): Tokens in postfix notation.
    
        Returns:
            float: The result of the expression.
    
        Raises:
            ZeroDivisionError: If division by zero is attempted.
            ValueError: If the expression is invalid.
        """
        if not tokens:
            raise ValueError("Empty expression")
    
        operand_stack = []
    
        for token in tokens:
            # If token is a number, push to stack
            if isinstance(token, (int, float)):
                operand_stack.append(token)
    
            # If token is an operator, pop operands and apply operator
            elif token in self.operators:
                if len(operand_stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/1-zero_shot/iteration_2/claude.py:251: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-claude.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.22s =========================
