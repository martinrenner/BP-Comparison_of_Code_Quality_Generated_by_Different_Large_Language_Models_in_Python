Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py F [  1%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_positive _______________________________

calc = <gemini.Calculator object at 0x103db02f0>

    def test_add_positive(calc):
>       assert calc.calculate("1+2") == 3

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103db02f0>, tokens = ['1', '', '2']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________________ test_add_positive_float ____________________________

calc = <gemini.Calculator object at 0x103dae0c0>

    def test_add_positive_float(calc):
>       assert calc.calculate("1.5+2.5") == 4

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dae0c0>, tokens = ['1.5', '', '2.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
________________________ test_add__positive_parentheses ________________________

calc = <gemini.Calculator object at 0x103db0c80>

    def test_add__positive_parentheses(calc):
>       assert calc.calculate("(1)+2") == 3

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103db0c80>
tokens = ['', '1', '', '', '2']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________ test_add_positive_float_parentheses ______________________

calc = <gemini.Calculator object at 0x103dae300>

    def test_add_positive_float_parentheses(calc):
>       assert calc.calculate("(1.5)+2") == pytest.approx(3.5, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dae300>
tokens = ['', '1.5', '', '', '2']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x103dad550>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dad550>, tokens = ['1', '', '-2']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________________ test_add_negative_float ____________________________

calc = <gemini.Calculator object at 0x103dae9c0>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dae9c0>, tokens = ['1.5', '', '-2.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
________________________ test_add_negative_parantheses _________________________

calc = <gemini.Calculator object at 0x103dad970>

    def test_add_negative_parantheses(calc):
>       assert calc.calculate("1+(-2)") == -1

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dad970>
tokens = ['1', '', '', '-2', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________ test_add_negative_float_parentheses ______________________

calc = <gemini.Calculator object at 0x103dacd70>

    def test_add_negative_float_parentheses(calc):
>       assert calc.calculate("(1.5)+(-2)") == -0.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dacd70>
tokens = ['', '1.5', '', '', '', '-2', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________________________ test_add_neutral _______________________________

calc = <gemini.Calculator object at 0x103dade80>

    def test_add_neutral(calc):
>       assert calc.calculate("0+0") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dade80>, tokens = ['0', '', '0']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_add_neutral_float ____________________________

calc = <gemini.Calculator object at 0x103daea20>

    def test_add_neutral_float(calc):
>       assert calc.calculate("0.0+0.0") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103daea20>, tokens = ['0.0', '', '0.0']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_subtract_positive ____________________________

calc = <gemini.Calculator object at 0x103daf740>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:46: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103daf740>, tokens = [5.0, -3.0]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            tokens: list of tokens in postfix notation
    
        Returns:
             Result of expression
        """
    
        stack = []
        for token in tokens:
            if isinstance(token, float):  # Check if it's a number (already converted to float)
                stack.append(token)
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Not enough operands")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero")
                    stack.append(operand1 / operand2)
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands")
E           ValueError: Invalid expression: Too many operands

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:147: ValueError
_________________________ test_subtract_positive_float _________________________

calc = <gemini.Calculator object at 0x103db0c80>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:46: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103db0c80>, tokens = [5.5, -3.5]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            tokens: list of tokens in postfix notation
    
        Returns:
             Result of expression
        """
    
        stack = []
        for token in tokens:
            if isinstance(token, float):  # Check if it's a number (already converted to float)
                stack.append(token)
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Not enough operands")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero")
                    stack.append(operand1 / operand2)
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands")
E           ValueError: Invalid expression: Too many operands

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:147: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x103d66f60>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d66f60>, tokens = ['', '5', '', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x103d67110>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d67110>, tokens = ['', '5.5', '', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x103daf560>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103daf560>, tokens = ['5', '', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x1059fb860>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fb860>
tokens = ['5.5', '', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x1059faea0>

    def test_subtract_negative_parentheses(calc):
>       assert calc.calculate("5-(-3)") == 8

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059faea0>
tokens = ['5', '', '', '-3', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x1059fa870>

    def test_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-3)") == 8.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fa870>
tokens = ['5.5', '', '', '-3', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_subtract_neutral _____________________________

calc = <gemini.Calculator object at 0x1059f99d0>

    def test_subtract_neutral(calc):
>       assert calc.calculate("0-0") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:46: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059f99d0>, tokens = [0.0, -0.0]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            tokens: list of tokens in postfix notation
    
        Returns:
             Result of expression
        """
    
        stack = []
        for token in tokens:
            if isinstance(token, float):  # Check if it's a number (already converted to float)
                stack.append(token)
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Not enough operands")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero")
                    stack.append(operand1 / operand2)
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands")
E           ValueError: Invalid expression: Too many operands

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:147: ValueError
_________________________ test_subtract_neutral_float __________________________

calc = <gemini.Calculator object at 0x1059f8c50>

    def test_subtract_neutral_float(calc):
>       assert calc.calculate("0.0-0.0") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:46: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059f8c50>, tokens = [0.0, -0.0]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """
        Evaluates a list of tokens in postfix notation.
    
        Args:
            tokens: list of tokens in postfix notation
    
        Returns:
             Result of expression
        """
    
        stack = []
        for token in tokens:
            if isinstance(token, float):  # Check if it's a number (already converted to float)
                stack.append(token)
            else:
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid expression: Not enough operands")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ZeroDivisionError("Division by zero")
                    stack.append(operand1 / operand2)
    
        if len(stack) != 1:
>           raise ValueError("Invalid expression: Too many operands")
E           ValueError: Invalid expression: Too many operands

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:147: ValueError
____________________________ test_multiply_positive ____________________________

calc = <gemini.Calculator object at 0x103dadb80>

    def test_multiply_positive(calc):
>       assert calc.calculate("2*3") == 6

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dadb80>, tokens = ['2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________________ test_multiply_positive_float _________________________

calc = <gemini.Calculator object at 0x1059f8c50>

    def test_multiply_positive_float(calc):
>       assert calc.calculate("2.5*3.5") == 8.75

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059f8c50>, tokens = ['2.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
______________________ test_multiply_positeve_parentheses ______________________

calc = <gemini.Calculator object at 0x1059fa570>

    def test_multiply_positeve_parentheses(calc):
>       assert calc.calculate("(2)*3") == 6

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fa570>
tokens = ['', '2', '', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________ test_multiply_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x1059fad50>

    def test_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(2.5)*3") == 7.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fad50>
tokens = ['', '2.5', '', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_multiply_negative ____________________________

calc = <gemini.Calculator object at 0x103dad280>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dad280>, tokens = ['2', '', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
______________________ test_multiply_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x103dad130>

    def test_multiply_negative_parentheses(calc):
>       assert calc.calculate("2*(-3)") == -6

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dad130>
tokens = ['2', '', '', '-3', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________________ test_multiply_negative_float _________________________

calc = <gemini.Calculator object at 0x103db5ee0>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103db5ee0>, tokens = ['2.5', '', '-3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________ test_multiply_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x103dac7d0>

    def test_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("2.5*(-3.5)") == -8.75

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dac7d0>
tokens = ['2.5', '', '', '-3.5', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_multiply_neutral _____________________________

calc = <gemini.Calculator object at 0x1059fbfb0>

    def test_multiply_neutral(calc):
>       assert calc.calculate("0*0") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fbfb0>, tokens = ['0', '', '0']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________________ test_multiply_neutral_float __________________________

calc = <gemini.Calculator object at 0x1059fa6f0>

    def test_multiply_neutral_float(calc):
>       assert calc.calculate("0.0*0.0") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:242: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fa6f0>, tokens = ['0.0', '', '0.0']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_divide_positive _____________________________

calc = <gemini.Calculator object at 0x103d67530>

    def test_divide_positive(calc):
>       assert calc.calculate("6/3") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:251: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d67530>, tokens = ['6', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________________ test_divide_positive_float __________________________

calc = <gemini.Calculator object at 0x103d675f0>

    def test_divide_positive_float(calc):
>       assert calc.calculate("6.5/3.5") == pytest.approx(1.857142, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:258: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d675f0>, tokens = ['6.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________________ test_divide_positive_parentheses _______________________

calc = <gemini.Calculator object at 0x103d67f80>

    def test_divide_positive_parentheses(calc):
>       assert calc.calculate("(6)/3") == 2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d67f80>
tokens = ['', '6', '', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________ test_divide_positive_float_parentheses ____________________

calc = <gemini.Calculator object at 0x1059fa6f0>

    def test_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(6.5)/3") == pytest.approx(2.1666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:273: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fa6f0>
tokens = ['', '6.5', '', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_divide_negative _____________________________

calc = <gemini.Calculator object at 0x103dac050>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dac050>, tokens = ['6', '', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________________ test_divide_negative_float __________________________

calc = <gemini.Calculator object at 0x103d676e0>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d676e0>, tokens = ['6.5', '', '-3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________________ test_divide_negative_parentheses _______________________

calc = <gemini.Calculator object at 0x103d64d70>

    def test_divide_negative_parentheses(calc):
>       assert calc.calculate("6/(-3)") == -2

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d64d70>
tokens = ['6', '', '', '-3', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________ test_divide_negative_float_parentheses ____________________

calc = <gemini.Calculator object at 0x103d64170>

    def test_divide_negative_float_parentheses(calc):
>       assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d64170>
tokens = ['6.5', '', '', '-3.5', '']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x103d65af0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d65af0>, tokens = ['5', '', '0']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x103d649e0>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d649e0>, tokens = ['5.0', '', '0.0']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x103d65dc0>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d65dc0>, tokens = ['5', '', '2', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x1059faba0>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059faba0>
tokens = ['5.5', '', '2.5', '-3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x103d5e480>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5e480>
tokens = ['', '5', '', '', '2', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x103d5e930>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5e930>
tokens = ['', '5.5', '', '', '2', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x103d5c980>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5c980>
tokens = ['5', '', '', '-2', '', '-3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x1059f9850>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059f9850>
tokens = ['5.5', '', '', '-2.5', '', '-3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x103d65850>

    def test_add_multiply_positive(calc):
>       assert calc.calculate("5+2*3") == 11

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:377: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d65850>
tokens = ['5', '', '2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x103d5e7e0>

    def test_add_multiply_positive_float(calc):
>       assert calc.calculate("5.5+2.5*3.5") == 14.25

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:388: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5e7e0>
tokens = ['5.5', '', '2.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________ test_add_multiply_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x103d5c200>

    def test_add_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)+2*3") == 11

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:399: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5c200>
tokens = ['', '5', '', '', '2', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________ test_add_multiply_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x103d5f110>

    def test_add_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2*3") == 11.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5f110>
tokens = ['', '5.5', '', '', '2', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x103d5f620>

    def test_add_multiply_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)*3") == -1

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:419: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5f620>
tokens = ['5', '', '', '-2', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x103d5fb00>

    def test_add_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)*3.5") == -3.25

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:429: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5fb00>
tokens = ['5.5', '', '', '-2.5', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________________________ test_add_divide ________________________________

calc = <gemini.Calculator object at 0x103d5f350>

    def test_add_divide(calc):
>       assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:442: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5f350>
tokens = ['5', '', '2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_add_divide_float _____________________________

calc = <gemini.Calculator object at 0x103dad130>

    def test_add_divide_float(calc):
>       assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:453: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103dad130>
tokens = ['5.5', '', '2.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________ test_add_divide_positive_parentheses _____________________

calc = <gemini.Calculator object at 0x1059fb440>

    def test_add_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)+2/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1059fb440>
tokens = ['', '5', '', '', '2', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________ test_add_divide_positive_float_parentheses __________________

calc = <gemini.Calculator object at 0x103d5b230>

    def test_add_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2/3") == pytest.approx(6.16666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:474: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5b230>
tokens = ['', '5.5', '', '', '2', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________ test_add_divide_negative_parentheses _____________________

calc = <gemini.Calculator object at 0x103d5af00>

    def test_add_divide_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)/3") == pytest.approx(4.33333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5af00>
tokens = ['5', '', '', '-2', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________ test_add_divide_negative_float_parentheses __________________

calc = <gemini.Calculator object at 0x103d67b90>

    def test_add_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)/3.5") == pytest.approx(4.78571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d67b90>
tokens = ['5.5', '', '', '-2.5', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_multiply_divide _____________________________

calc = <gemini.Calculator object at 0x103d5f1a0>

    def test_multiply_divide(calc):
>       assert calc.calculate("5*2/3") == pytest.approx(3.33333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:507: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5f1a0>
tokens = ['5', '', '2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________________ test_multiply_divide_float __________________________

calc = <gemini.Calculator object at 0x103d58890>

    def test_multiply_divide_float(calc):
>       assert calc.calculate("5.5*2.5/3.5") == pytest.approx(3.9285714, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:518: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d58890>
tokens = ['5.5', '', '2.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________ test_multiply_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x103d5b8f0>

    def test_multiply_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)*2/3") == pytest.approx(3.33333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:529: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5b8f0>
tokens = ['', '5', '', '', '2', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________ test_multiply_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x103d59700>

    def test_multiply_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)*2/3") == pytest.approx(3.66666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:541: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d59700>
tokens = ['', '5.5', '', '', '2', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________ test_multiply_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x103d5b440>

    def test_multiply_divide_negative_parentheses(calc):
>       assert calc.calculate("5*(-2)/3") == pytest.approx(-3.3333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5b440>
tokens = ['5', '', '', '-2', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________ test_multiply_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x103d58560>

    def test_multiply_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5*(-2.5)/3.5") == pytest.approx(-3.928571, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:565: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d58560>
tokens = ['5.5', '', '', '-2.5', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x103d5ab10>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5ab10>, tokens = ['5', '-2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x103db36b0>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103db36b0>
tokens = ['5.5', '-2.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x103d5f830>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5f830>
tokens = ['', '5', '', '-2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x103d37bf0>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d37bf0>
tokens = ['', '5.5', '', '-2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x103d35a60>

    def test_subtract_divide_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d35a60>
tokens = ['5', '', '', '-2', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x103d5c8c0>

    def test_subtract_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5c8c0>
tokens = ['5.5', '', '', '-2.5', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x103d5b260>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:657: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5b260>, tokens = ['5', '-2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x103d5ae40>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:668: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5ae40>
tokens = ['5.5', '-2.5', '', '3.5']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x103d341d0>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d341d0>
tokens = ['', '5', '', '-2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x103d35460>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d35460>
tokens = ['', '5.5', '', '-2', '', '3']

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x103d34590>

    def test_subtract_multiply_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)*3") == 11

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:699: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d34590>
tokens = ['5', '', '', '-2', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x103d37bc0>

    def test_subtract_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)*3.5") == 14.25

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d37bc0>
tokens = ['5.5', '', '', '-2.5', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x103d37500>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d37500>
tokens = ['5', '', '2', '', '3', '-4', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x103d5ba10>

    def test_general_parentheses(calc):
>       assert calc.calculate("(5+2)*3") == 21

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:733: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5ba10>
tokens = ['', '5', '', '2', '', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x103d5e3f0>

    def test_nested_parentheses(calc):
>       assert calc.calculate("((2+3)*2)") == 10

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103d5e3f0>
tokens = ['', '', '2', '', '3', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x103db4650>

    def test_long_expression(calc):
        assert (
>           calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )

generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:757: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_2/gemini.py:43: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x103db4650>
tokens = ['100', '', '100', '', '100', '', ...]

    def _infix_to_postfix(self, tokens: list[str]) -> list[str]:
        """
        Converts a list of tokens from infix notation to postfix notation
        (Reverse Polish Notation) using the Shunting Yard algorithm.
    
        Args:
            tokens: list of tokens in infix notation
    
        Returns:
            list of tokens in postfix notation
        """
    
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output = []
        operator_stack = []
    
        for token in tokens:
            if re.match(r"-?\d+\.?\d*", token):  # Check for numbers (including negative)
                output.append(float(token))  # Convert to float during tokenization
            elif token in precedence:
                while (operator_stack and
                       operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses: Mismatched ')'")
                operator_stack.pop()  # Pop the '('
            else:
>               raise ValueError(f"Invalid token: {token}")  # Should not happen due to regex in _tokenize()
E               ValueError: Invalid token:

generated/code/calculator/1-zero_shot/iteration_2/gemini.py:104: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_positive
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add__positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative_parantheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_positive
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_positeve_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_negative
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_positive
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_negative
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_divide
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_multiply_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_long_expression
========================= 80 failed, 8 passed in 0.97s =========================
