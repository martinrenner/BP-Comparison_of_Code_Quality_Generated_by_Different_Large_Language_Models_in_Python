Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x106501a60>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/claude.py:52: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/1-zero_shot/iteration_1/claude.py:186: in _parse_expression
    result = self._expression()
generated/code/calculator/1-zero_shot/iteration_1/claude.py:216: in _expression
    result -= self._term()
generated/code/calculator/1-zero_shot/iteration_1/claude.py:230: in _term
    result = self._factor()  # Start with highest precedence operations
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106501a60>

    def _factor(self) -> float:
        """
        Parse and evaluate a factor (numbers and parenthesized expressions).
    
        Returns:
            float: The value of the factor
    
        Raises:
            SyntaxError: If the expression has unbalanced parentheses
            ValueError: If the token is unexpected
        """
        token = self.current_token
    
        if token['type'] == self.TOKEN_NUMBER:
            # Simple number
            self._advance()
            return token['value']
        elif token['type'] == self.TOKEN_LPAREN:
            # Handle parenthesized expressions
            self._advance()  # Consume '('
            result = self._expression()  # Calculate the expression inside parentheses
    
            # Ensure we have a closing parenthesis
            if self.current_token['type'] != self.TOKEN_RPAREN:
                raise SyntaxError("Missing closing parenthesis")
    
            self._advance()  # Consume ')'
            return result
        else:
>           raise ValueError(f"Unexpected token: {token['type']}")
E           ValueError: Unexpected token: PLUS

generated/code/calculator/1-zero_shot/iteration_1/claude.py:275: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x1064ff5f0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/claude.py:52: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/1-zero_shot/iteration_1/claude.py:186: in _parse_expression
    result = self._expression()
generated/code/calculator/1-zero_shot/iteration_1/claude.py:216: in _expression
    result -= self._term()
generated/code/calculator/1-zero_shot/iteration_1/claude.py:230: in _term
    result = self._factor()  # Start with highest precedence operations
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064ff5f0>

    def _factor(self) -> float:
        """
        Parse and evaluate a factor (numbers and parenthesized expressions).
    
        Returns:
            float: The value of the factor
    
        Raises:
            SyntaxError: If the expression has unbalanced parentheses
            ValueError: If the token is unexpected
        """
        token = self.current_token
    
        if token['type'] == self.TOKEN_NUMBER:
            # Simple number
            self._advance()
            return token['value']
        elif token['type'] == self.TOKEN_LPAREN:
            # Handle parenthesized expressions
            self._advance()  # Consume '('
            result = self._expression()  # Calculate the expression inside parentheses
    
            # Ensure we have a closing parenthesis
            if self.current_token['type'] != self.TOKEN_RPAREN:
                raise SyntaxError("Missing closing parenthesis")
    
            self._advance()  # Consume ')'
            return result
        else:
>           raise ValueError(f"Unexpected token: {token['type']}")
E           ValueError: Unexpected token: PLUS

generated/code/calculator/1-zero_shot/iteration_1/claude.py:275: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x1064ff3e0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/claude.py:49: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064ff3e0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens.
    
        Args:
            expression (str): The input mathematical expression
    
        Returns:
            list: A list of token dictionaries, each with 'type' and 'value' keys
    
        Raises:
            ValueError: If the expression contains invalid characters
        """
        tokens = []
        position = 0
    
        while position < len(expression):
            char = expression[position]
    
            # Handle numbers (including decimals and negative numbers)
            if char.isdigit() or (char == '.' and position + 1 < len(expression) and expression[position + 1].isdigit()):
                # Collect all digits and at most one decimal point
                number_str = ""
                decimal_point_count = 0
    
                while (position < len(expression) and
                       (expression[position].isdigit() or expression[position] == '.')):
                    if expression[position] == '.':
                        decimal_point_count += 1
                        if decimal_point_count > 1:
                            raise ValueError("Invalid number format: multiple decimal points")
    
                    number_str += expression[position]
                    position += 1
    
                try:
                    # Convert to float or int depending on decimal point
                    if '.' in number_str:
                        value = float(number_str)
                    else:
                        value = int(number_str)
    
                    tokens.append({'type': self.TOKEN_NUMBER, 'value': value})
                except ValueError:
                    raise ValueError(f"Invalid number format: {number_str}")
    
                continue  # Skip the position increment at the end
    
            # Process operators and parentheses
            if char == '+':
                tokens.append({'type': self.TOKEN_PLUS, 'value': '+'})
            elif char == '-':
                # Check if it's a negative number (unary minus)
                if (not tokens or
                    tokens[-1]['type'] in [self.TOKEN_PLUS, self.TOKEN_MINUS,
                                         self.TOKEN_MULTIPLY, self.TOKEN_DIVIDE,
                                         self.TOKEN_LPAREN]):
                    # It's a negative number, not a subtraction operation
                    # Read the number that follows
                    position += 1  # Skip the minus sign
    
                    if position >= len(expression) or not (expression[position].isdigit() or expression[position] == '.'):
>                       raise ValueError("Expected a number after the negative sign")
E                       ValueError: Expected a number after the negative sign

generated/code/calculator/1-zero_shot/iteration_1/claude.py:118: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1064fd790>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/claude.py:49: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fd790>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens.
    
        Args:
            expression (str): The input mathematical expression
    
        Returns:
            list: A list of token dictionaries, each with 'type' and 'value' keys
    
        Raises:
            ValueError: If the expression contains invalid characters
        """
        tokens = []
        position = 0
    
        while position < len(expression):
            char = expression[position]
    
            # Handle numbers (including decimals and negative numbers)
            if char.isdigit() or (char == '.' and position + 1 < len(expression) and expression[position + 1].isdigit()):
                # Collect all digits and at most one decimal point
                number_str = ""
                decimal_point_count = 0
    
                while (position < len(expression) and
                       (expression[position].isdigit() or expression[position] == '.')):
                    if expression[position] == '.':
                        decimal_point_count += 1
                        if decimal_point_count > 1:
                            raise ValueError("Invalid number format: multiple decimal points")
    
                    number_str += expression[position]
                    position += 1
    
                try:
                    # Convert to float or int depending on decimal point
                    if '.' in number_str:
                        value = float(number_str)
                    else:
                        value = int(number_str)
    
                    tokens.append({'type': self.TOKEN_NUMBER, 'value': value})
                except ValueError:
                    raise ValueError(f"Invalid number format: {number_str}")
    
                continue  # Skip the position increment at the end
    
            # Process operators and parentheses
            if char == '+':
                tokens.append({'type': self.TOKEN_PLUS, 'value': '+'})
            elif char == '-':
                # Check if it's a negative number (unary minus)
                if (not tokens or
                    tokens[-1]['type'] in [self.TOKEN_PLUS, self.TOKEN_MINUS,
                                         self.TOKEN_MULTIPLY, self.TOKEN_DIVIDE,
                                         self.TOKEN_LPAREN]):
                    # It's a negative number, not a subtraction operation
                    # Read the number that follows
                    position += 1  # Skip the minus sign
    
                    if position >= len(expression) or not (expression[position].isdigit() or expression[position] == '.'):
>                       raise ValueError("Expected a number after the negative sign")
E                       ValueError: Expected a number after the negative sign

generated/code/calculator/1-zero_shot/iteration_1/claude.py:118: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x1064fdee0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/claude.py:52: in calculate
    result = self._parse_expression(tokens)
generated/code/calculator/1-zero_shot/iteration_1/claude.py:186: in _parse_expression
    result = self._expression()
generated/code/calculator/1-zero_shot/iteration_1/claude.py:207: in _expression
    result = self._term()  # Start with higher precedence operations
generated/code/calculator/1-zero_shot/iteration_1/claude.py:236: in _term
    result *= self._factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fdee0>

    def _factor(self) -> float:
        """
        Parse and evaluate a factor (numbers and parenthesized expressions).
    
        Returns:
            float: The value of the factor
    
        Raises:
            SyntaxError: If the expression has unbalanced parentheses
            ValueError: If the token is unexpected
        """
        token = self.current_token
    
        if token['type'] == self.TOKEN_NUMBER:
            # Simple number
            self._advance()
            return token['value']
        elif token['type'] == self.TOKEN_LPAREN:
            # Handle parenthesized expressions
            self._advance()  # Consume '('
            result = self._expression()  # Calculate the expression inside parentheses
    
            # Ensure we have a closing parenthesis
            if self.current_token['type'] != self.TOKEN_RPAREN:
>               raise SyntaxError("Missing closing parenthesis")
E               SyntaxError: Missing closing parenthesis

generated/code/calculator/1-zero_shot/iteration_1/claude.py:270: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.23s =========================
