Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py . [  1%]
...FFFF......FFFF......FFFFFF....FFFF..FFFFFFFFFFFFFFFFFFFFFFFFFF.FFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x101fecaa0>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fecaa0>, expression = '1+-2'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
___________________________ test_add_negative_float ____________________________

calc = <gemini.Calculator object at 0x101fe9c40>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe9c40>, expression = '1.5+-2.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
________________________ test_add_negative_parantheses _________________________

calc = <gemini.Calculator object at 0x101fef530>

    def test_add_negative_parantheses(calc):
>       assert calc.calculate("1+(-2)") == -1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fef530>, expression = '1+(-2)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________ test_add_negative_float_parentheses ______________________

calc = <gemini.Calculator object at 0x101fe9a90>

    def test_add_negative_float_parentheses(calc):
>       assert calc.calculate("(1.5)+(-2)") == -0.5

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe9a90>, expression = '(1.5)+(-2)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________________ test_subtract_negative ____________________________

self = <gemini.Calculator object at 0x101fea720>
postfix_tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens (list): A list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
        """
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                operand_stack.append(token)
            else:  # token must be and operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:138: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x101fea720>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:34: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fea720>
postfix_tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens (list): A list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
        """
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                operand_stack.append(token)
            else:  # token must be and operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:140: ValueError
_________________________ test_subtract_negative_float _________________________

self = <gemini.Calculator object at 0x101fe9ac0>
postfix_tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens (list): A list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
        """
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                operand_stack.append(token)
            else:  # token must be and operator
                try:
                    operand2 = operand_stack.pop()
>                   operand1 = operand_stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:138: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x101fe9ac0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:34: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe9ac0>
postfix_tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, postfix_tokens: list) -> float:
        """        Evaluates a list of tokens in postfix notation.
    
        Args:
            postfix_tokens (list): A list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluation.
        """
        operand_stack = []
    
        for token in postfix_tokens:
            if isinstance(token, float):
                operand_stack.append(token)
            else:  # token must be and operator
                try:
                    operand2 = operand_stack.pop()
                    operand1 = operand_stack.pop()
                except IndexError:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:140: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x101fe8230>

    def test_subtract_negative_parentheses(calc):
>       assert calc.calculate("5-(-3)") == 8

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe8230>, expression = '5-(-3)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x101fa1310>

    def test_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-3)") == 8.5

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa1310>, expression = '5.5-(-3)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________________ test_multiply_negative ____________________________

calc = <gemini.Calculator object at 0x101fe8440>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe8440>, expression = '2*-3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
______________________ test_multiply_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x101fea6c0>

    def test_multiply_negative_parentheses(calc):
>       assert calc.calculate("2*(-3)") == -6

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fea6c0>, expression = '2*(-3)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________________ test_multiply_negative_float _________________________

calc = <gemini.Calculator object at 0x101fe9e80>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe9e80>, expression = '2.5*-3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
___________________ test_multiply_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x101fa32c0>

    def test_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("2.5*(-3.5)") == -8.75

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:222: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa32c0>, expression = '2.5*(-3.5)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________________ test_multiply_neutral _____________________________

calc = <gemini.Calculator object at 0x101fa23c0>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa23c0>, expression = '0*-5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________________ test_multiply_neutral_float __________________________

calc = <gemini.Calculator object at 0x101fa3260>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa3260>, expression = '0.0*-5.0'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________________ test_divide_negative _____________________________

calc = <gemini.Calculator object at 0x101fe9e80>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe9e80>, expression = '6/-3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________________ test_divide_negative_float __________________________

calc = <gemini.Calculator object at 0x10333f770>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333f770>, expression = '6.5/-3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________________ test_divide_negative_parentheses _______________________

calc = <gemini.Calculator object at 0x10333edb0>

    def test_divide_negative_parentheses(calc):
>       assert calc.calculate("6/(-3)") == -2

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333edb0>, expression = '6/(-3)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________ test_divide_negative_float_parentheses ____________________

calc = <gemini.Calculator object at 0x10333e2a0>

    def test_divide_negative_float_parentheses(calc):
>       assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333e2a0>, expression = '6.5/(-3.5)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x10333d340>

    def test_add_subtract_positive_negative(calc):
        assert calc.calculate("5+2-3") == 4
        assert calc.calculate("5-2+3") == 6
        assert calc.calculate("1000000000+2000000000-3000000000") == 0
>       assert calc.calculate("-999999999999999-1+1000000000000000") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:331: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333d340>
expression = '-999999999999999-1+1000000000000000'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x10333c440>

    def test_add_subtract_positive_float(calc):
        assert calc.calculate("5.5+2.5-3.5") == 4.5
        assert calc.calculate("5.5-2.5+3.5") == 6.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:338: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333c440>
expression = '-999999999999999-1.5+1000000000000000.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x101fe8e30>

    def test_add_subtract_positive_parentheses(calc):
        assert calc.calculate("(5)+2-3") == 4
        assert calc.calculate("5+(2)-3") == 4
        assert calc.calculate("(5)+(2)-3") == 4
        assert calc.calculate("(1000000000)+2000000000-(3000000000)") == 0
>       assert calc.calculate("(-999999999999999)-1+(1000000000000000)") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:346: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe8e30>
expression = '(-999999999999999)-1+(1000000000000000)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x101ff49b0>

    def test_add_subtract_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2-3") == 4.5
        assert calc.calculate("5.5+(2)-3") == 4.5
        assert calc.calculate("(5.5)+(2)-3") == 4.5
        assert calc.calculate("1000000000.5+2000000000-3000000000.5") == 0
>       assert calc.calculate("-999999999999999-1.5+1000000000000000.5") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:354: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101ff49b0>
expression = '-999999999999999-1.5+1000000000000000.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x10333c890>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333c890>, expression = '5+(-2)-3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x10333e300>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333e300>, expression = '5.5+(-2.5)-3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x10333e960>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
>       assert calc.calculate("-5+2*3") == 1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:379: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333e960>, expression = '-5+2*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x101fa0560>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
>       assert calc.calculate("-5.5+2.5*3.5") == 3.25

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:390: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa0560>, expression = '-5.5+2.5*3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________ test_add_multiply_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x101fa35f0>

    def test_add_multiply_positive_parentheses(calc):
        assert calc.calculate("(5)+2*3") == 11
        assert calc.calculate("5+(2)*3") == 11
        assert calc.calculate("(5)+(2)*3") == 11
        assert calc.calculate("(1000000000)*2000000000+3000000000") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)*1+(999999999999999)") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:405: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa35f0>
expression = '(-999999999999999)*1+(999999999999999)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________ test_add_multiply_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x10333ce00>

    def test_add_multiply_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2*3") == 11.5
        assert calc.calculate("5.5+(2)*3") == 11.5
        assert calc.calculate("(5.5)+(2)*3") == 11.5
        assert calc.calculate("(1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999.5)*1+999999999999999") == -0.5

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:415: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333ce00>
expression = '(-999999999999999.5)*1+999999999999999'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x10333d3a0>

    def test_add_multiply_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)*3") == -1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:419: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333d3a0>, expression = '5+(-2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x101fef4a0>

    def test_add_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)*3.5") == -3.25

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:429: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fef4a0>, expression = '5.5+(-2.5)*3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________________________ test_add_divide ________________________________

calc = <gemini.Calculator object at 0x101fa3c20>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
>       assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa3c20>, expression = '-5+2/3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________________ test_add_divide_float _____________________________

calc = <gemini.Calculator object at 0x101fa0560>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
>       assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa0560>, expression = '-5.5+2.5/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________ test_add_divide_positive_parentheses _____________________

calc = <gemini.Calculator object at 0x101f98140>

    def test_add_divide_positive_parentheses(calc):
        assert calc.calculate("(5)+2/3") == pytest.approx(5.66666666, rel=1e-6)
        assert calc.calculate("5+(2)/3") == pytest.approx(5.66666666, rel=1e-6)
        assert calc.calculate("(5)+(2)/3") == pytest.approx(5.66666666, rel=1e-6)
        assert calc.calculate("(1000000000)/2000000000+(3000000000)") == pytest.approx(
            3e9, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)/1+(1000000000000000)") == 1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:470: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f98140>
expression = '(-999999999999999)/1+(1000000000000000)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________ test_add_divide_positive_float_parentheses __________________

calc = <gemini.Calculator object at 0x101fa10d0>

    def test_add_divide_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)+2/3") == pytest.approx(6.16666666, rel=1e-6)
        assert calc.calculate("5.5+(2)/3") == pytest.approx(6.16666666, rel=1e-6)
        assert calc.calculate("(5.5)+(2)/3") == pytest.approx(6.16666666, rel=1e-6)
        assert calc.calculate(
            "(1000000000.5)/2000000000.5+(3000000000.5)"
        ) == pytest.approx(3e9, rel=1e-6)
>       assert calc.calculate("(-999999999999999.5)/1+(1000000000000000.5)") == 1

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:480: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa10d0>
expression = '(-999999999999999.5)/1+(1000000000000000.5)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________ test_add_divide_negative_parentheses _____________________

calc = <gemini.Calculator object at 0x101fa1160>

    def test_add_divide_negative_parentheses(calc):
>       assert calc.calculate("5+(-2)/3") == pytest.approx(4.33333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa1160>, expression = '5+(-2)/3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________ test_add_divide_negative_float_parentheses __________________

calc = <gemini.Calculator object at 0x10333c440>

    def test_add_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)/3.5") == pytest.approx(4.78571428, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10333c440>, expression = '5.5+(-2.5)/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________________ test_multiply_divide _____________________________

calc = <gemini.Calculator object at 0x101f99b80>

    def test_multiply_divide(calc):
        assert calc.calculate("5*2/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("5/2*3") == pytest.approx(7.5, rel=1e-6)
        assert calc.calculate("1000000000/2000000000*3000000000") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999/1*1000000000000000") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f99b80>
expression = '-999999999999999/1*1000000000000000'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________________ test_multiply_divide_float __________________________

calc = <gemini.Calculator object at 0x101f98c80>

    def test_multiply_divide_float(calc):
        assert calc.calculate("5.5*2.5/3.5") == pytest.approx(3.9285714, rel=1e-6)
        assert calc.calculate("5.5/2.5*3.5") == pytest.approx(7.7, rel=1e-6)
        assert calc.calculate("1000000000.5/2000000000.5*3000000000.5") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("-999999999999999.5/1*1000000000000000.5") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:523: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f98c80>
expression = '-999999999999999.5/1*1000000000000000.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________ test_multiply_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x101f99490>

    def test_multiply_divide_positive_parentheses(calc):
        assert calc.calculate("(5)*2/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("5*(2)/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("(5)*(2)/3") == pytest.approx(3.33333333, rel=1e-6)
        assert calc.calculate("(1000000000)/2000000000*(3000000000)") == pytest.approx(
            1500000000, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)/1*(1000000000000000)") == pytest.approx(
            -1e30, rel=1e-6
        )

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:535: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f99490>
expression = '(-999999999999999)/1*(1000000000000000)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________ test_multiply_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x101fe80b0>

    def test_multiply_divide_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)*2/3") == pytest.approx(3.66666666, rel=1e-6)
        assert calc.calculate("5.5*(2)/3") == pytest.approx(3.66666666, rel=1e-6)
        assert calc.calculate("(5.5)*(2)/3") == pytest.approx(3.66666666, rel=1e-6)
        assert calc.calculate(
            "(1000000000.5)/2000000000.5*(3000000000.5)"
        ) == pytest.approx(1500000000, rel=1e-6)
>       assert calc.calculate(
            "(-999999999999999.5)/1*(1000000000000000.5)"
        ) == pytest.approx(-1e30, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:547: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fe80b0>
expression = '(-999999999999999.5)/1*(1000000000000000.5)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________ test_multiply_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x101fa2b10>

    def test_multiply_divide_negative_parentheses(calc):
>       assert calc.calculate("5*(-2)/3") == pytest.approx(-3.3333333, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa2b10>, expression = '5*(-2)/3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________ test_multiply_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x101f99a60>

    def test_multiply_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5*(-2.5)/3.5") == pytest.approx(-3.928571, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:565: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f99a60>, expression = '5.5*(-2.5)/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x101f9ae40>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
>       assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:582: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f9ae40>, expression = '-5-2/3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x101f99d00>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
>       assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f99d00>, expression = '-5.5-2.5/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x101f959d0>

    def test_subtract_divide_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)
        assert calc.calculate("5.5-(2)/3") == pytest.approx(4.83333333, rel=1e-6)
        assert calc.calculate("(5.5)-(2)/3") == pytest.approx(4.83333333, rel=1e-6)
>       assert calc.calculate(
            "(1000000000.5)-2000000000.5/(-3000000000.5)"
        ) == pytest.approx(1000000000.5, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:621: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f959d0>
expression = '(1000000000.5)-2000000000.5/(-3000000000.5)'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-3000000000.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x101f9af90>

    def test_subtract_divide_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:630: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f9af90>, expression = '5-(-2)/3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x101f99730>

    def test_subtract_divide_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:642: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f99730>, expression = '5.5-(-2.5)/3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x101fa0890>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
>       assert calc.calculate("-5-2*3") == -11

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:659: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fa0890>, expression = '-5-2*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x101f97860>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
>       assert calc.calculate("-5.5-2.5*3.5") == -14.25

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:670: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f97860>, expression = '-5.5-2.5*3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x101f97c50>

    def test_subtract_multiply_positive_parentheses(calc):
        assert calc.calculate("(5)-2*3") == -1
        assert calc.calculate("5-(2)*3") == -1
        assert calc.calculate("(5)-(2)*3") == -1
        assert calc.calculate("(1000000000)*2000000000-3000000000") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999)*1+999999999999999") == 0

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:685: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f97c50>
expression = '(-999999999999999)*1+999999999999999'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x101f976b0>

    def test_subtract_multiply_positive_float_parentheses(calc):
        assert calc.calculate("(5.5)-2*3") == -0.5
        assert calc.calculate("5.5-(2)*3") == -0.5
        assert calc.calculate("(5.5)-(2)*3") == -0.5
        assert calc.calculate("(1000000000.5)*2000000000-3000000000.5") == pytest.approx(
            2e18, rel=1e-6
        )
>       assert calc.calculate("(-999999999999999.5)*1+999999999999999") == -0.5

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:695: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f976b0>
expression = '(-999999999999999.5)*1+999999999999999'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-999999999999999.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x101fee630>

    def test_subtract_multiply_negative_parentheses(calc):
>       assert calc.calculate("5-(-2)*3") == 11

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:699: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101fee630>, expression = '5-(-2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x101f99310>

    def test_subtract_multiply_negative_float_parentheses(calc):
>       assert calc.calculate("5.5-(-2.5)*3.5") == 14.25

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f99310>, expression = '5.5-(-2.5)*3.5'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-2.5' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x101f97fb0>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
>       assert calc.calculate("-5*2+3/3") == -9

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:724: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f97fb0>, expression = '-5*2+3/3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-5.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x101f94230>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f94230>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
>                   raise ValueError("Invalid usage of '-' operator")
E                   ValueError: Invalid usage of '-' operator

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:68: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x101f973b0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f973b0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
>                   raise ValueError("Invalid usage of '-' operator")
E                   ValueError: Invalid usage of '-' operator

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:68: ValueError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x101f73f50>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:37: in calculate
    raise e  # Re-raise for consistent error handling
generated/code/calculator/1-zero_shot/iteration_1/gemini.py:32: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x101f73f50>
expression = '-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the expression string into a list of numbers, operators, and parentheses.
    
        Args:
            expression: The arithmetic expression.
        Returns:
            list of tokens
        Raises:
            ValueError: for invalid characters within the string
        """
    
        # Regex to match valid tokens: integers, floats, operators (+,-,*,/), and parentheses ().
        token_pattern = r"(\d+\.?\d*|\.\d+|[+\-*/()]|\s+)"
        tokens = re.findall(token_pattern, expression)
    
        # Remove whitespace
        tokens = [token for token in tokens if not token.isspace()]
    
        cleaned_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == '-' and (i == 0 or tokens[i - 1] in '+-*/('):
                # Handle negative numbers
                if i + 1 < len(tokens) and re.match(r'\d+\.?\d*|\.\d+', tokens[i + 1]):
                    cleaned_tokens.append(str(float(tokens[i] + tokens[i + 1])))  # Combine '-' and number
                    i += 2  # Skip next token (already combined)
                else:
                    # if '-' is not followed by a digit, expression is invalid
                    raise ValueError("Invalid usage of '-' operator")
            else:
                cleaned_tokens.append(tokens[i])
                i += 1
        # Check for invalid characters immediately.  This improves security and gives better error messages.
        for token in cleaned_tokens:
            if not re.match(r"^\d+\.?\d*$|^\.\d+$|^[+\-*/()]$", token):
>               raise ValueError(f"Invalid character or token: '{token}' in expression.")
E               ValueError: Invalid character or token: '-100.0' in expression.

generated/code/calculator/1-zero_shot/iteration_1/gemini.py:75: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_negative_parantheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_negative
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_neutral
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_neutral_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_divide_negative
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_divide_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_multiply_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_multiply_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_divide
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_divide_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_multiply_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_long_expression
======================== 57 failed, 31 passed in 1.01s =========================
