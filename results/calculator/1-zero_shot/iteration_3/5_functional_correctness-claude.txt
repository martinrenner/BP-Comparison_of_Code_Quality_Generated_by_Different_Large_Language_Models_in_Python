Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
...............                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x105e21340>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_3/claude.py:55: in calculate
    result, _ = self._parse_addition_subtraction(expression, 0)
generated/code/calculator/1-zero_shot/iteration_3/claude.py:96: in _parse_addition_subtraction
    right_value, index = self._parse_multiplication_division(expression, index + 1)
generated/code/calculator/1-zero_shot/iteration_3/claude.py:119: in _parse_multiplication_division
    left_value, index = self._parse_number_or_parenthesis(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105e21340>, expression = '5-+3', index = 2

    def _parse_number_or_parenthesis(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parse a number or an expression in parentheses.
    
        Args:
            expression (str): The expression to evaluate.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: A tuple containing the parsed value and the new index.
    
        Raises:
            ValueError: If invalid number format or syntax error is detected.
        """
        # Skip any leading whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we have a negative sign
        is_negative = False
        if index < len(expression) and expression[index] == '-':
            is_negative = True
            index += 1
    
        # Check if we're parsing a parenthesized expression
        if index < len(expression) and expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # We should have a closing parenthesis next
            if index < len(expression) and expression[index] == ')':
                index += 1
            else:
                raise ValueError("Expecting closing parenthesis")
    
            if is_negative:
                value = -value
    
            return value, index
    
        # Parse a number
        start_index = index
        # Handle the case where the first character after a negative sign is an opening parenthesis
        if is_negative and index < len(expression) and expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            if index < len(expression) and expression[index] == ')':
                index += 1
            else:
                raise ValueError("Expecting closing parenthesis")
    
            return -value, index
    
        # Parse digits before decimal point
        while index < len(expression) and (expression[index].isdigit()):
            index += 1
    
        # Parse decimal point and digits after it
        if index < len(expression) and expression[index] == '.':
            index += 1
            if index >= len(expression) or not expression[index].isdigit():
                raise ValueError("Invalid number format")
            while index < len(expression) and expression[index].isdigit():
                index += 1
    
        if start_index == index:
>           raise ValueError(f"Invalid syntax at position {index}")
E           ValueError: Invalid syntax at position 2

generated/code/calculator/1-zero_shot/iteration_3/claude.py:200: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x105e1c680>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_3/claude.py:55: in calculate
    result, _ = self._parse_addition_subtraction(expression, 0)
generated/code/calculator/1-zero_shot/iteration_3/claude.py:96: in _parse_addition_subtraction
    right_value, index = self._parse_multiplication_division(expression, index + 1)
generated/code/calculator/1-zero_shot/iteration_3/claude.py:119: in _parse_multiplication_division
    left_value, index = self._parse_number_or_parenthesis(expression, index)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x105e1c680>, expression = '5.5-+3.5'
index = 4

    def _parse_number_or_parenthesis(self, expression: str, index: int) -> tuple[float, int]:
        """
        Parse a number or an expression in parentheses.
    
        Args:
            expression (str): The expression to evaluate.
            index (int): The current position in the expression.
    
        Returns:
            tuple[float, int]: A tuple containing the parsed value and the new index.
    
        Raises:
            ValueError: If invalid number format or syntax error is detected.
        """
        # Skip any leading whitespace
        while index < len(expression) and expression[index].isspace():
            index += 1
    
        # Check if we have a negative sign
        is_negative = False
        if index < len(expression) and expression[index] == '-':
            is_negative = True
            index += 1
    
        # Check if we're parsing a parenthesized expression
        if index < len(expression) and expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            # We should have a closing parenthesis next
            if index < len(expression) and expression[index] == ')':
                index += 1
            else:
                raise ValueError("Expecting closing parenthesis")
    
            if is_negative:
                value = -value
    
            return value, index
    
        # Parse a number
        start_index = index
        # Handle the case where the first character after a negative sign is an opening parenthesis
        if is_negative and index < len(expression) and expression[index] == '(':
            value, index = self._parse_addition_subtraction(expression, index + 1)
    
            if index < len(expression) and expression[index] == ')':
                index += 1
            else:
                raise ValueError("Expecting closing parenthesis")
    
            return -value, index
    
        # Parse digits before decimal point
        while index < len(expression) and (expression[index].isdigit()):
            index += 1
    
        # Parse decimal point and digits after it
        if index < len(expression) and expression[index] == '.':
            index += 1
            if index >= len(expression) or not expression[index].isdigit():
                raise ValueError("Invalid number format")
            while index < len(expression) and expression[index].isdigit():
                index += 1
    
        if start_index == index:
>           raise ValueError(f"Invalid syntax at position {index}")
E           ValueError: Invalid syntax at position 4

generated/code/calculator/1-zero_shot/iteration_3/claude.py:200: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative_float
========================= 2 failed, 86 passed in 0.20s =========================
