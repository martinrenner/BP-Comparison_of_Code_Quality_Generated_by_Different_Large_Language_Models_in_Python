Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
........FF.....                                                          [100%]

=================================== FAILURES ===================================
_________________ test_invalid_expression_incomplete_addition __________________

calc = <chatgpt.Calculator object at 0x1027d7980>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:33: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:102: in _parse_expression
    right = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:117: in _parse_term
    result = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1027d7980>

    def _parse_factor(self) -> float:
        """
        Parses a factor according to the grammar:
            Factor -> Number | '(' Expression ')' | ('+' | '-') Factor
    
        Returns:
            float: The computed value of the factor.
    
        Raises:
            ValueError: If a syntax error is encountered.
        """
        # Handle unary operators
        if self.pos < len(self.tokens) and self.tokens[self.pos] in ("+", "-"):
            op = self.tokens[self.pos]
            self.pos += 1
            value = self._parse_factor()
            return value if op == "+" else -value
    
>       token = self.tokens[self.pos]
E       IndexError: list index out of range

generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:148: IndexError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <chatgpt.Calculator object at 0x1027d4080>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:33: in calculate
    result = self._parse_expression()
generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:98: in _parse_expression
    result = self._parse_term()
generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:121: in _parse_term
    right = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1027d4080>

    def _parse_factor(self) -> float:
        """
        Parses a factor according to the grammar:
            Factor -> Number | '(' Expression ')' | ('+' | '-') Factor
    
        Returns:
            float: The computed value of the factor.
    
        Raises:
            ValueError: If a syntax error is encountered.
        """
        # Handle unary operators
        if self.pos < len(self.tokens) and self.tokens[self.pos] in ("+", "-"):
            op = self.tokens[self.pos]
            self.pos += 1
            value = self._parse_factor()
            return value if op == "+" else -value
    
>       token = self.tokens[self.pos]
E       IndexError: list index out of range

generated/code/calculator/1-zero_shot/iteration_3/chatgpt.py:148: IndexError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/1-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_invalid_expression_incomplete_multiplication
========================= 2 failed, 86 passed in 0.19s =========================
