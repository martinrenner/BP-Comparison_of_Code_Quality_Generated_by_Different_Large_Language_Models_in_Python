Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_10/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x103d0c860>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_10/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_10/chatgpt.py:26: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103d0c860>
tokens = ['5', '2', '+', '3', '*', '-']

    def _evaluate_postfix(self, tokens: List[str]) -> float:
        """
        Evaluate a postfix (Reverse Polish Notation) expression and return the result.
    
        :param tokens: The list of tokens in postfix order.
        :return: The result as a float.
        :raises ZeroDivisionError: If a division by zero occurs.
        :raises ValueError: If the postfix expression is malformed.
        """
        stack = []
    
        for token in tokens:
            if self._is_number(token):
                stack.append(float(token))
            elif token in '+-*/':
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient values for the operation.")
E                   ValueError: Malformed expression: insufficient values for the operation.

generated/code/calculator/1-zero_shot/iteration_10/chatgpt.py:197: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x103d09130>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_10/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_10/chatgpt.py:26: in calculate
    result = self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103d09130>
tokens = ['2', '3', '+', '2', '3', '+', ...]

    def _evaluate_postfix(self, tokens: List[str]) -> float:
        """
        Evaluate a postfix (Reverse Polish Notation) expression and return the result.
    
        :param tokens: The list of tokens in postfix order.
        :return: The result as a float.
        :raises ZeroDivisionError: If a division by zero occurs.
        :raises ValueError: If the postfix expression is malformed.
        """
        stack = []
    
        for token in tokens:
            if self._is_number(token):
                stack.append(float(token))
            elif token in '+-*/':
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient values for the operation.")
E                   ValueError: Malformed expression: insufficient values for the operation.

generated/code/calculator/1-zero_shot/iteration_10/chatgpt.py:197: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_10/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_10/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.20s =========================
