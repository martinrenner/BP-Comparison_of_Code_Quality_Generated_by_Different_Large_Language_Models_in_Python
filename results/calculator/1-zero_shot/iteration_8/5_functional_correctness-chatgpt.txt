Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <chatgpt.Calculator object at 0x103105fd0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:30: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103105fd0>, tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (RPN) expression represented as a list of tokens.
    
        Args:
            tokens (list): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluated postfix expression.
    
        Raises:
            ZeroDivisionError: If a division by zero is encountered.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient operands.")
E                   ValueError: Malformed expression: insufficient operands.

generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:146: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <chatgpt.Calculator object at 0x103104560>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:30: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103104560>, tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (RPN) expression represented as a list of tokens.
    
        Args:
            tokens (list): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluated postfix expression.
    
        Raises:
            ZeroDivisionError: If a division by zero is encountered.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient operands.")
E                   ValueError: Malformed expression: insufficient operands.

generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:146: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x103103920>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:30: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103103920>
tokens = [5.0, 2.0, '+', 3.0, '*', '-']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (RPN) expression represented as a list of tokens.
    
        Args:
            tokens (list): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluated postfix expression.
    
        Raises:
            ZeroDivisionError: If a division by zero is encountered.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient operands.")
E                   ValueError: Malformed expression: insufficient operands.

generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:146: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x103100ad0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:30: in calculate
    return self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103100ad0>
tokens = [2.0, 3.0, '+', 2.0, 3.0, '+', ...]

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix (RPN) expression represented as a list of tokens.
    
        Args:
            tokens (list): The list of tokens in postfix notation.
    
        Returns:
            float: The result of the evaluated postfix expression.
    
        Raises:
            ZeroDivisionError: If a division by zero is encountered.
            ValueError: If the postfix expression is malformed.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            elif token in "+-*/":
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient operands.")
E                   ValueError: Malformed expression: insufficient operands.

generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:146: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <chatgpt.Calculator object at 0x103102480>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:28: in calculate
    postfix_tokens = self._infix_to_postfix(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x103102480>
tokens = [5.0, '*', '(', 2.0, '+', 3.0]

    def _infix_to_postfix(self, tokens: list) -> list:
        """
        Converts tokens from infix notation to postfix notation (Reverse Polish Notation)
        using the Shunting Yard algorithm.
    
        Args:
            tokens (list): List of tokens in infix order.
    
        Returns:
            list: List of tokens in postfix order.
    
        Raises:
            SyntaxError: If the expression contains unbalanced parentheses.
        """
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
        output_queue = []
        operator_stack = []
    
        for token in tokens:
            if isinstance(token, float):
                output_queue.append(token)
            elif token in precedence:
                while (operator_stack and operator_stack[-1] in precedence and
                       precedence[operator_stack[-1]] >= precedence[token]):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                # Pop operators until an opening parenthesis is encountered.
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise SyntaxError("Unbalanced parentheses detected: missing '('")
                operator_stack.pop()  # Remove the '(' from the stack
            else:
                raise ValueError(f"Unknown token encountered: {token}")
    
        # Any remaining operators in the stack should now be appended to the output.
        while operator_stack:
            op = operator_stack.pop()
            if op in '()':
>               raise SyntaxError("Unbalanced parentheses detected.")
E               SyntaxError: Unbalanced parentheses detected.

generated/code/calculator/1-zero_shot/iteration_8/chatgpt.py:122: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_nested_parentheses
FAILED generated/code/calculator/1-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.23s =========================
