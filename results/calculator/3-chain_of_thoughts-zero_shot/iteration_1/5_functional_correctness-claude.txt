Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py . [  1%]
........................................................................ [ 82%]
............F..                                                          [100%]

=================================== FAILURES ===================================
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x103d03560>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:31: in calculate
    cleaned_expression = self._preprocess_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103d03560>, expression = '5*(2+3'

    def _preprocess_expression(self, expression: str) -> str:
        """
        Validates and preprocesses the expression by removing spaces and checking for invalid characters.
    
        Args:
            expression (str): The input expression.
    
        Returns:
            str: The preprocessed expression.
    
        Raises:
            ValueError: If the expression contains invalid characters.
            SyntaxError: If the expression has unbalanced parentheses.
        """
        # Remove all whitespace
        expression = expression.replace(" ", "")
    
        if not expression:
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid characters
        valid_chars = set("0123456789.+-*/().")
        for i, char in enumerate(expression):
            if char not in valid_chars:
                raise ValueError(f"Invalid character at position {i}: '{char}'")
    
        # Check for balanced parentheses
        open_count = 0
        for i, char in enumerate(expression):
            if char == '(':
                open_count += 1
            elif char == ')':
                open_count -= 1
                if open_count < 0:
                    raise SyntaxError(f"Unbalanced parentheses: unexpected closing parenthesis at position {i}")
    
        if open_count > 0:
>           raise SyntaxError("Unbalanced parentheses: missing closing parenthesis")
E           SyntaxError: Unbalanced parentheses: missing closing parenthesis

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:78: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 1 failed, 87 passed in 0.20s =========================
