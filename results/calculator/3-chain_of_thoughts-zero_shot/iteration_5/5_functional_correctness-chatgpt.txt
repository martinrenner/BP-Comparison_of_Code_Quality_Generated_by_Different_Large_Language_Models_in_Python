Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <chatgpt.Calculator object at 0x10627d790>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:27: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10627d790>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluate a postfix (RPN) expression represented by a list of tokens.
    
        Args:
            tokens (list): The list of tokens in postfix order.
    
        Returns:
            float: The result after evaluating the postfix expression.
    
        Raises:
            ValueError: If the postfix expression is malformed.
            ZeroDivisionError: If division by zero is attempted.
        """
        stack = []
    
        for token in tokens:
            try:
                # Try converting token to a number.
                num = float(token)
                stack.append(num)
                continue
            except ValueError:
                pass
    
            # Ensure that there are at least two operands for binary operations.
            if token in ('+', '-', '*', '/'):
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient operands.")
E                   ValueError: Malformed expression: insufficient operands.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:195: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <chatgpt.Calculator object at 0x1062795b0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:27: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1062795b0>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluate a postfix (RPN) expression represented by a list of tokens.
    
        Args:
            tokens (list): The list of tokens in postfix order.
    
        Returns:
            float: The result after evaluating the postfix expression.
    
        Raises:
            ValueError: If the postfix expression is malformed.
            ZeroDivisionError: If division by zero is attempted.
        """
        stack = []
    
        for token in tokens:
            try:
                # Try converting token to a number.
                num = float(token)
                stack.append(num)
                continue
            except ValueError:
                pass
    
            # Ensure that there are at least two operands for binary operations.
            if token in ('+', '-', '*', '/'):
                if len(stack) < 2:
>                   raise ValueError("Malformed expression: insufficient operands.")
E                   ValueError: Malformed expression: insufficient operands.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:195: ValueError
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x10627b4d0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:25: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10627b4d0>, expr = '-(5+2)*3'

    def _tokenize(self, expr: str) -> list:
        """
        Convert the input expression string into a list of tokens.
    
        This method handles numbers (including decimals and negative numbers),
        operators, and parentheses. It also checks for invalid characters and
        malformed numbers.
    
        Args:
            expr (str): The arithmetic expression as a string.
    
        Returns:
            list: The list of tokens extracted from the expression.
    
        Raises:
            ValueError: If an invalid character is encountered or the number format is wrong.
        """
        tokens = []
        i = 0
        length = len(expr)
    
        while i < length:
            char = expr[i]
    
            # Skip whitespace
            if char.isspace():
                i += 1
                continue
    
            # Check if character starts a number (digit or '.'), or a unary minus.
            if char.isdigit() or char == '.' or (
                char == '-' and (i == 0 or (tokens and tokens[-1] in ['+', '-', '*', '/', '(']))
            ):
                num_str = ""
    
                # Handle unary minus for negative numbers.
                if char == '-':
                    num_str = "-"
                    i += 1
                    if i >= length or (not expr[i].isdigit() and expr[i] != '.'):
>                       raise ValueError("Invalid use of '-' sign in expression")
E                       ValueError: Invalid use of '-' sign in expression

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:70: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x10627ac90>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:25: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10627ac90>, expr = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expr: str) -> list:
        """
        Convert the input expression string into a list of tokens.
    
        This method handles numbers (including decimals and negative numbers),
        operators, and parentheses. It also checks for invalid characters and
        malformed numbers.
    
        Args:
            expr (str): The arithmetic expression as a string.
    
        Returns:
            list: The list of tokens extracted from the expression.
    
        Raises:
            ValueError: If an invalid character is encountered or the number format is wrong.
        """
        tokens = []
        i = 0
        length = len(expr)
    
        while i < length:
            char = expr[i]
    
            # Skip whitespace
            if char.isspace():
                i += 1
                continue
    
            # Check if character starts a number (digit or '.'), or a unary minus.
            if char.isdigit() or char == '.' or (
                char == '-' and (i == 0 or (tokens and tokens[-1] in ['+', '-', '*', '/', '(']))
            ):
                num_str = ""
    
                # Handle unary minus for negative numbers.
                if char == '-':
                    num_str = "-"
                    i += 1
                    if i >= length or (not expr[i].isdigit() and expr[i] != '.'):
>                       raise ValueError("Invalid use of '-' sign in expression")
E                       ValueError: Invalid use of '-' sign in expression

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/chatgpt.py:70: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_subtract_negative_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_5/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.22s =========================
