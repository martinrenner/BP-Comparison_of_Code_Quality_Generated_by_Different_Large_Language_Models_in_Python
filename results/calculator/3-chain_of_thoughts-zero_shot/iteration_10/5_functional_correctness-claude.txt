Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py . [  1%]
........................................................................ [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

self = <claude.Calculator object at 0x1020882c0>, expression = '-(5+2)*3'
start_index = 0

    def _evaluate_expression(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Recursively evaluates an expression.
    
        Args:
            expression: The expression to evaluate
            start_index: The starting index for evaluation
    
        Returns:
            A tuple containing (result, ending_index)
    
        Raises:
            ValueError: For invalid expressions
            ZeroDivisionError: When dividing by zero
        """
        operators = []  # Stores operators (+, -, *, /)
        values = []     # Stores numeric values and subexpression results
    
        i = start_index
        # Value holder for multi-digit number processing
        current_number = ""
        # Flag indicating if we're expecting an operand
        expecting_operand = True
    
        while i < len(expression):
            char = expression[i]
    
            # Handle different character types
            if char.isdigit() or char == '.':
                # Build up a number (can be multi-digit or decimal)
                current_number += char
                i += 1
                expecting_operand = False
    
            elif char in '+-' and expecting_operand:
                # Handle unary operators (+ or - at the beginning or after another operator)
                current_number += char
                i += 1
    
            elif char in '+-*/':
                # Process any built-up number before handling the operator
                if current_number:
                    try:
>                       values.append(float(current_number))
E                       ValueError: could not convert string to float: '-'

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:120: ValueError

During handling of the above exception, another exception occurred:

calc = <claude.Calculator object at 0x1020882c0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:37: in calculate
    result, _ = self._evaluate_expression(expression, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1020882c0>, expression = '-(5+2)*3'
start_index = 0

    def _evaluate_expression(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Recursively evaluates an expression.
    
        Args:
            expression: The expression to evaluate
            start_index: The starting index for evaluation
    
        Returns:
            A tuple containing (result, ending_index)
    
        Raises:
            ValueError: For invalid expressions
            ZeroDivisionError: When dividing by zero
        """
        operators = []  # Stores operators (+, -, *, /)
        values = []     # Stores numeric values and subexpression results
    
        i = start_index
        # Value holder for multi-digit number processing
        current_number = ""
        # Flag indicating if we're expecting an operand
        expecting_operand = True
    
        while i < len(expression):
            char = expression[i]
    
            # Handle different character types
            if char.isdigit() or char == '.':
                # Build up a number (can be multi-digit or decimal)
                current_number += char
                i += 1
                expecting_operand = False
    
            elif char in '+-' and expecting_operand:
                # Handle unary operators (+ or - at the beginning or after another operator)
                current_number += char
                i += 1
    
            elif char in '+-*/':
                # Process any built-up number before handling the operator
                if current_number:
                    try:
                        values.append(float(current_number))
                        current_number = ""
                    except ValueError:
>                       raise ValueError(f"Invalid number format: {current_number}")
E                       ValueError: Invalid number format: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:123: ValueError
___________________________ test_nested_parentheses ____________________________

self = <claude.Calculator object at 0x102085b20>
expression = '-((2+3)*((2+3)*2))', start_index = 0

    def _evaluate_expression(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Recursively evaluates an expression.
    
        Args:
            expression: The expression to evaluate
            start_index: The starting index for evaluation
    
        Returns:
            A tuple containing (result, ending_index)
    
        Raises:
            ValueError: For invalid expressions
            ZeroDivisionError: When dividing by zero
        """
        operators = []  # Stores operators (+, -, *, /)
        values = []     # Stores numeric values and subexpression results
    
        i = start_index
        # Value holder for multi-digit number processing
        current_number = ""
        # Flag indicating if we're expecting an operand
        expecting_operand = True
    
        while i < len(expression):
            char = expression[i]
    
            # Handle different character types
            if char.isdigit() or char == '.':
                # Build up a number (can be multi-digit or decimal)
                current_number += char
                i += 1
                expecting_operand = False
    
            elif char in '+-' and expecting_operand:
                # Handle unary operators (+ or - at the beginning or after another operator)
                current_number += char
                i += 1
    
            elif char in '+-*/':
                # Process any built-up number before handling the operator
                if current_number:
                    try:
                        values.append(float(current_number))
                        current_number = ""
                    except ValueError:
                        raise ValueError(f"Invalid number format: {current_number}")
    
                # Process operators based on precedence
                while (operators and
                      ((char in '+-' and operators[-1] in '+-*/') or
                       (char in '*/' and operators[-1] in '*/'))
                      ):
                    self._apply_operator(operators, values)
    
                operators.append(char)
                i += 1
                expecting_operand = True
    
            elif char == '(':
                # Recursively evaluate the subexpression inside parentheses
                subexpr_value, next_idx = self._evaluate_expression(expression, i + 1)
                values.append(subexpr_value)
                i = next_idx
                expecting_operand = False
    
            elif char == ')':
                # End of the current subexpression
                break
    
            else:
                i += 1
    
        # Process any remaining number
        if current_number:
            try:
>               values.append(float(current_number))
E               ValueError: could not convert string to float: '-'

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:153: ValueError

During handling of the above exception, another exception occurred:

calc = <claude.Calculator object at 0x102085b20>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:37: in calculate
    result, _ = self._evaluate_expression(expression, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102085b20>
expression = '-((2+3)*((2+3)*2))', start_index = 0

    def _evaluate_expression(self, expression: str, start_index: int) -> tuple[float, int]:
        """
        Recursively evaluates an expression.
    
        Args:
            expression: The expression to evaluate
            start_index: The starting index for evaluation
    
        Returns:
            A tuple containing (result, ending_index)
    
        Raises:
            ValueError: For invalid expressions
            ZeroDivisionError: When dividing by zero
        """
        operators = []  # Stores operators (+, -, *, /)
        values = []     # Stores numeric values and subexpression results
    
        i = start_index
        # Value holder for multi-digit number processing
        current_number = ""
        # Flag indicating if we're expecting an operand
        expecting_operand = True
    
        while i < len(expression):
            char = expression[i]
    
            # Handle different character types
            if char.isdigit() or char == '.':
                # Build up a number (can be multi-digit or decimal)
                current_number += char
                i += 1
                expecting_operand = False
    
            elif char in '+-' and expecting_operand:
                # Handle unary operators (+ or - at the beginning or after another operator)
                current_number += char
                i += 1
    
            elif char in '+-*/':
                # Process any built-up number before handling the operator
                if current_number:
                    try:
                        values.append(float(current_number))
                        current_number = ""
                    except ValueError:
                        raise ValueError(f"Invalid number format: {current_number}")
    
                # Process operators based on precedence
                while (operators and
                      ((char in '+-' and operators[-1] in '+-*/') or
                       (char in '*/' and operators[-1] in '*/'))
                      ):
                    self._apply_operator(operators, values)
    
                operators.append(char)
                i += 1
                expecting_operand = True
    
            elif char == '(':
                # Recursively evaluate the subexpression inside parentheses
                subexpr_value, next_idx = self._evaluate_expression(expression, i + 1)
                values.append(subexpr_value)
                i = next_idx
                expecting_operand = False
    
            elif char == ')':
                # End of the current subexpression
                break
    
            else:
                i += 1
    
        # Process any remaining number
        if current_number:
            try:
                values.append(float(current_number))
            except ValueError:
>               raise ValueError(f"Invalid number format: {current_number}")
E               ValueError: Invalid number format: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:155: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x102084f20>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:34: in calculate
    self._validate_parentheses(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102084f20>, expression = '5*(2+3'

    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses are balanced in the expression.
    
        Args:
            expression: The expression to validate
    
        Raises:
            SyntaxError: If parentheses are unbalanced
        """
        stack = 0
        for char in expression:
            if char == '(':
                stack += 1
            elif char == ')':
                stack -= 1
                if stack < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if stack > 0:
>           raise SyntaxError("Unbalanced parentheses: missing closing parentheses")
E           SyntaxError: Unbalanced parentheses: missing closing parentheses

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/claude.py:75: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 3 failed, 85 passed in 0.22s =========================
