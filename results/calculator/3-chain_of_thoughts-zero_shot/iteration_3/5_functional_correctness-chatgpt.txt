Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x104fc45f0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x104fc45f0>, expr = '-(5+2)*3'

    def _tokenize(self, expr: str) -> list:
        """
        Converts the input expression into a list of tokens. Tokens can be numeric values (float)
        or operators: '+', '-', '*', '/', '(', ')'. Supports detecting unary plus and unary minus.
    
        Parameters:
            expr (str): The arithmetic expression as a string.
    
        Returns:
            list: A list containing numbers (float) and operator tokens (str).
    
        Raises:
            ValueError: If the expression contains invalid characters or malformed numbers.
        """
        tokens = []
        i = 0
        n = len(expr)
        while i < n:
            char = expr[i]
            if char.isspace():
                i += 1
                continue
    
            # Handle unary plus and minus if they appear at the beginning
            # or immediately following an operator or '('.
            if char in "+-":
                if i == 0 or (tokens and (isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")):
                    # Unary operator detected. Attempt to parse a number.
                    sign = char
                    i += 1
                    num_str = sign
                    # There must be a digit or a decimal point following the unary operator.
                    if i < n and (expr[i].isdigit() or expr[i] == '.'):
                        # Parse the numeric part.
                        dot_count = 0
                        while i < n and (expr[i].isdigit() or expr[i] == '.'):
                            if expr[i] == '.':
                                dot_count += 1
                                if dot_count > 1:
                                    raise ValueError("Invalid numeric format: multiple decimal points")
                            num_str += expr[i]
                            i += 1
                        try:
                            number = float(num_str)
                        except ValueError:
                            raise ValueError(f"Invalid numeric value: {num_str}")
                        tokens.append(number)
                        continue
                    else:
>                       raise ValueError(f"Invalid use of unary operator '{sign}'")
E                       ValueError: Invalid use of unary operator '-'

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:88: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x104fc0710>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x104fc0710>, expr = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expr: str) -> list:
        """
        Converts the input expression into a list of tokens. Tokens can be numeric values (float)
        or operators: '+', '-', '*', '/', '(', ')'. Supports detecting unary plus and unary minus.
    
        Parameters:
            expr (str): The arithmetic expression as a string.
    
        Returns:
            list: A list containing numbers (float) and operator tokens (str).
    
        Raises:
            ValueError: If the expression contains invalid characters or malformed numbers.
        """
        tokens = []
        i = 0
        n = len(expr)
        while i < n:
            char = expr[i]
            if char.isspace():
                i += 1
                continue
    
            # Handle unary plus and minus if they appear at the beginning
            # or immediately following an operator or '('.
            if char in "+-":
                if i == 0 or (tokens and (isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")):
                    # Unary operator detected. Attempt to parse a number.
                    sign = char
                    i += 1
                    num_str = sign
                    # There must be a digit or a decimal point following the unary operator.
                    if i < n and (expr[i].isdigit() or expr[i] == '.'):
                        # Parse the numeric part.
                        dot_count = 0
                        while i < n and (expr[i].isdigit() or expr[i] == '.'):
                            if expr[i] == '.':
                                dot_count += 1
                                if dot_count > 1:
                                    raise ValueError("Invalid numeric format: multiple decimal points")
                            num_str += expr[i]
                            i += 1
                        try:
                            number = float(num_str)
                        except ValueError:
                            raise ValueError(f"Invalid numeric value: {num_str}")
                        tokens.append(number)
                        continue
                    else:
>                       raise ValueError(f"Invalid use of unary operator '{sign}'")
E                       ValueError: Invalid use of unary operator '-'

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:88: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.20s =========================
