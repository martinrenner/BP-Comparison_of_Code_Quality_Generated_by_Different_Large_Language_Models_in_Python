Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

self = <gemini.Calculator object at 0x1043889b0>, tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
      """Evaluates a postfix expression (represented as a list of tokens)."""
      stack = []
    
      for token in tokens:
          if isinstance(token, float):
            stack.append(token)
          else:  # It's an operator
              try:
                  operand2 = stack.pop()
>                 operand1 = stack.pop()
E                 IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:99: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1043889b0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:140: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1043889b0>, tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
      """Evaluates a postfix expression (represented as a list of tokens)."""
      stack = []
    
      for token in tokens:
          if isinstance(token, float):
            stack.append(token)
          else:  # It's an operator
              try:
                  operand2 = stack.pop()
                  operand1 = stack.pop()
              except IndexError:
>                 raise ValueError("Invalid expression format (not enough operands).")
E                 ValueError: Invalid expression format (not enough operands).

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:101: ValueError
_________________________ test_subtract_negative_float _________________________

self = <gemini.Calculator object at 0x104385a90>, tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
      """Evaluates a postfix expression (represented as a list of tokens)."""
      stack = []
    
      for token in tokens:
          if isinstance(token, float):
            stack.append(token)
          else:  # It's an operator
              try:
                  operand2 = stack.pop()
>                 operand1 = stack.pop()
E                 IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:99: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x104385a90>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:140: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104385a90>, tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
      """Evaluates a postfix expression (represented as a list of tokens)."""
      stack = []
    
      for token in tokens:
          if isinstance(token, float):
            stack.append(token)
          else:  # It's an operator
              try:
                  operand2 = stack.pop()
                  operand1 = stack.pop()
              except IndexError:
>                 raise ValueError("Invalid expression format (not enough operands).")
E                 ValueError: Invalid expression format (not enough operands).

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:101: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x104386930>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:138: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104386930>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the input expression into a list of numbers, operators.
    
        Splits the expression string into tokens using regular expressions.
    
        Args:
            expression (str): The expression string.
    
        Returns:
            list: A list of tokens (numbers, operators, and parentheses).
    
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        tokens = re.findall(r"(\b\d+\.?\d*\b|\+|\-|\*|\/|\(|\)|\^-?\d+\.?\d*)", expression)
        if not all(re.match(r"^(-?\d+\.?\d*|\+|\-|\*|\/|\(|\))$", token) for token in tokens):
            raise ValueError("Invalid characters in expression.")
    
        # Fix for handling negative numbers at different positions(beginning, after operator, in parenthesis)
        processed_tokens = []
        i = 0
        while i < len(tokens):
            token = tokens[i]
            if token == '-' and (i == 0 or tokens[i-1] in '+-*/('):
                # Negative number case
                if i + 1 < len(tokens) and re.match(r"^\d+\.?\d*$", tokens[i+1]):
                    processed_tokens.append(str(-float(tokens[i+1])))  # Combine '-' and the number
                    i += 2  # Skip the next token (the number)
                    continue
                else:
>                 raise ValueError("Invalid use of '-' operator")
E                 ValueError: Invalid use of '-' operator

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:52: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x1043865a0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:138: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1043865a0>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Tokenizes the input expression into a list of numbers, operators.
    
        Splits the expression string into tokens using regular expressions.
    
        Args:
            expression (str): The expression string.
    
        Returns:
            list: A list of tokens (numbers, operators, and parentheses).
    
        Raises:
            ValueError: If the expression contains invalid characters.
        """
        tokens = re.findall(r"(\b\d+\.?\d*\b|\+|\-|\*|\/|\(|\)|\^-?\d+\.?\d*)", expression)
        if not all(re.match(r"^(-?\d+\.?\d*|\+|\-|\*|\/|\(|\))$", token) for token in tokens):
            raise ValueError("Invalid characters in expression.")
    
        # Fix for handling negative numbers at different positions(beginning, after operator, in parenthesis)
        processed_tokens = []
        i = 0
        while i < len(tokens):
            token = tokens[i]
            if token == '-' and (i == 0 or tokens[i-1] in '+-*/('):
                # Negative number case
                if i + 1 < len(tokens) and re.match(r"^\d+\.?\d*$", tokens[i+1]):
                    processed_tokens.append(str(-float(tokens[i+1])))  # Combine '-' and the number
                    i += 2  # Skip the next token (the number)
                    continue
                else:
>                 raise ValueError("Invalid use of '-' operator")
E                 ValueError: Invalid use of '-' operator

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/gemini.py:52: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.23s =========================
