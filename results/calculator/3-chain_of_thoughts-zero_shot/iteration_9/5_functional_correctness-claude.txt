Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py . [  1%]
.............FF................................................FF....... [ 82%]
............F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x103fc92e0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:46: in calculate
    return self._evaluate_expression(expression)
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:83: in _evaluate_expression
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103fc92e0>, postfix = ['5', '-', '3', '+']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluate a postfix expression.
    
        Args:
            postfix (list): The postfix expression to evaluate
    
        Returns:
            float: The result of evaluating the expression
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero
        """
        operand_stack = []
    
        for token in postfix:
            if token in self.operators:
                if len(operand_stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:172: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x103fc5a30>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:46: in calculate
    return self._evaluate_expression(expression)
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:83: in _evaluate_expression
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103fc5a30>
postfix = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, postfix: list) -> float:
        """
        Evaluate a postfix expression.
    
        Args:
            postfix (list): The postfix expression to evaluate
    
        Returns:
            float: The result of evaluating the expression
    
        Raises:
            ZeroDivisionError: If the expression involves division by zero
        """
        operand_stack = []
    
        for token in postfix:
            if token in self.operators:
                if len(operand_stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:172: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <claude.Calculator object at 0x103fc7050>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)
E       assert 7.5 == 0.833333333 ± 8.3e-07
E         
E         comparison failed
E         Obtained: 7.5
E         Expected: 0.833333333 ± 8.3e-07

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py:583: AssertionError
__________________________ test_subtract_divide_float __________________________

calc = <claude.Calculator object at 0x103fc6120>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)
E       assert 7.7 == 0.628571428 ± 6.3e-07
E         
E         comparison failed
E         Obtained: 7.7
E         Expected: 0.628571428 ± 6.3e-07

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py:596: AssertionError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x103fc5b50>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x103fc5b50>, expression = '5*(2+3'

    def calculate(self, expression: str) -> float:
        """
        Evaluate a mathematical expression and return the result.
    
        Args:
            expression (str): A string containing a mathematical expression
                              (e.g., "3 + 4 * (2 - 1)")
    
        Returns:
            float: The result of evaluating the expression
    
        Raises:
            ValueError: If the expression contains invalid characters or syntax
            ZeroDivisionError: If the expression involves division by zero
            SyntaxError: If the expression has unbalanced parentheses
        """
        # Remove all whitespace
        expression = expression.replace(" ", "")
    
        # Check for empty expression
        if not expression:
            raise ValueError("Empty expression")
    
        # Check for invalid characters
        valid_chars = set('0123456789.+-*/() ')
        if not all(c in valid_chars for c in expression):
            raise ValueError("Expression contains invalid characters")
    
        # Check for balanced parentheses
        if not self._check_parentheses(expression):
>           raise SyntaxError("Unbalanced parentheses in the expression")
E           SyntaxError: Unbalanced parentheses in the expression

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/claude.py:43: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py::test_subtract_divide
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py::test_subtract_divide_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.22s =========================
