Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x1048c0290>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/chatgpt.py:41: in calculate
    result = self._evaluate_rpn(rpn)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1048c0290>
rpn = ['5', '2', '+', '3', '*', '-']

    def _evaluate_rpn(self, rpn: list) -> float:
        """
        Evaluate the expression given in Reverse Polish Notation (RPN).
    
        Args:
            rpn (list): A list of tokens in RPN order.
    
        Returns:
            float: The numerical result of the expression.
    
        Raises:
            ValueError: If the expression is invalid.
            ZeroDivisionError: If a division by zero occurs.
        """
        stack = []
    
        for token in rpn:
            # Try interpreting the token as a number.
            try:
                value = float(token)
                stack.append(value)
                continue
            except ValueError:
                # Not a number, so it must be an operator.
                pass
    
            if token in self.operators:
                if len(stack) < 2:
>                   raise ValueError("Insufficient operands for the operator.")
E                   ValueError: Insufficient operands for the operator.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/chatgpt.py:201: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x1048bd640>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/chatgpt.py:41: in calculate
    result = self._evaluate_rpn(rpn)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1048bd640>
rpn = ['2', '3', '+', '2', '3', '+', ...]

    def _evaluate_rpn(self, rpn: list) -> float:
        """
        Evaluate the expression given in Reverse Polish Notation (RPN).
    
        Args:
            rpn (list): A list of tokens in RPN order.
    
        Returns:
            float: The numerical result of the expression.
    
        Raises:
            ValueError: If the expression is invalid.
            ZeroDivisionError: If a division by zero occurs.
        """
        stack = []
    
        for token in rpn:
            # Try interpreting the token as a number.
            try:
                value = float(token)
                stack.append(value)
                continue
            except ValueError:
                # Not a number, so it must be an operator.
                pass
    
            if token in self.operators:
                if len(stack) < 2:
>                   raise ValueError("Insufficient operands for the operator.")
E                   ValueError: Insufficient operands for the operator.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/chatgpt.py:201: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.35s =========================
