Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x1023a07d0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/chatgpt.py:27: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1023a07d0>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens (numbers and operators).
    
        Supports negative numbers (via unary '-' or '+') and decimals.
    
        Parameters:
            expression (str): The arithmetic expression as a string.
    
        Returns:
            list: A list of tokens where numbers are converted to float and operators/parentheses remain as strings.
    
        Raises:
            ValueError: If an invalid character is found.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_chars = "0123456789.+-*/() "  # valid characters
    
        while i < n:
            char = expression[i]
    
            # Skip whitespace characters
            if char.isspace():
                i += 1
                continue
    
            if char not in allowed_chars:
                raise ValueError(f"Invalid character found: '{char}'")
    
            # Handle a potential unary plus or minus (for numbers)
            if char in "+-":
                # Determine if this plus/minus is unary by checking one of:
                # - first character in expression
                # - following an operator or an opening parenthesis.
                if (i == 0 or (tokens and isinstance(tokens[-1], str) and tokens[-1] in ("+", "-", "*", "/", "("))):
                    # It's a unary operator for a number.
                    sign = char
                    i += 1
                    # After a unary sign, the next characters must form a number.
                    number_str = sign
                    dot_count = 0
                    number_started = False
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid numeric format: multiple decimal points.")
                        number_str += expression[i]
                        number_started = True
                        i += 1
                    if not number_started:
>                       raise ValueError("Invalid syntax: expected a number after unary sign.")
E                       ValueError: Invalid syntax: expected a number after unary sign.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/chatgpt.py:85: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x10239e180>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/chatgpt.py:27: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x10239e180>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Convert the input expression string into a list of tokens (numbers and operators).
    
        Supports negative numbers (via unary '-' or '+') and decimals.
    
        Parameters:
            expression (str): The arithmetic expression as a string.
    
        Returns:
            list: A list of tokens where numbers are converted to float and operators/parentheses remain as strings.
    
        Raises:
            ValueError: If an invalid character is found.
        """
        tokens = []
        i = 0
        n = len(expression)
        allowed_chars = "0123456789.+-*/() "  # valid characters
    
        while i < n:
            char = expression[i]
    
            # Skip whitespace characters
            if char.isspace():
                i += 1
                continue
    
            if char not in allowed_chars:
                raise ValueError(f"Invalid character found: '{char}'")
    
            # Handle a potential unary plus or minus (for numbers)
            if char in "+-":
                # Determine if this plus/minus is unary by checking one of:
                # - first character in expression
                # - following an operator or an opening parenthesis.
                if (i == 0 or (tokens and isinstance(tokens[-1], str) and tokens[-1] in ("+", "-", "*", "/", "("))):
                    # It's a unary operator for a number.
                    sign = char
                    i += 1
                    # After a unary sign, the next characters must form a number.
                    number_str = sign
                    dot_count = 0
                    number_started = False
                    while i < n and (expression[i].isdigit() or expression[i] == '.'):
                        if expression[i] == '.':
                            dot_count += 1
                            if dot_count > 1:
                                raise ValueError("Invalid numeric format: multiple decimal points.")
                        number_str += expression[i]
                        number_started = True
                        i += 1
                    if not number_started:
>                       raise ValueError("Invalid syntax: expected a number after unary sign.")
E                       ValueError: Invalid syntax: expected a number after unary sign.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/chatgpt.py:85: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.21s =========================
