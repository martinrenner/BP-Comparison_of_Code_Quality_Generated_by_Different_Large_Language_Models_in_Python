Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py . [  1%]
...F.....FFFFFFFF....................FFFFFFFF..................FFFFFFFFF [ 82%]
FFFFFFFFFFFF.FF                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x106655d30>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
        assert calc.calculate("-1+2") == 1
        assert calc.calculate("-1+-2") == -3
        assert calc.calculate("-1000000000+2000000000") == 1000000000
>       assert calc.calculate("999999999999999-1") == 999999999999998
E       AssertionError: assert -1.0 == 999999999999998
E        +  where -1.0 = calculate('999999999999999-1')
E        +    where calculate = <gemini.Calculator object at 0x106655d30>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:56: AssertionError
____________________________ test_subtract_positive ____________________________

calc = <gemini.Calculator object at 0x106653b00>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2
E       AssertionError: assert -3.0 == 2
E        +  where -3.0 = calculate('5-3')
E        +    where calculate = <gemini.Calculator object at 0x106653b00>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:93: AssertionError
_________________________ test_subtract_positive_float _________________________

calc = <gemini.Calculator object at 0x106653590>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2
E       AssertionError: assert -3.5 == 2
E        +  where -3.5 = calculate('5.5-3.5')
E        +    where calculate = <gemini.Calculator object at 0x106653590>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:100: AssertionError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x106652f30>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2
E       AssertionError: assert -3.0 == 2
E        +  where -3.0 = calculate('(5)-3')
E        +    where calculate = <gemini.Calculator object at 0x106652f30>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:107: AssertionError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x106656ea0>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5
E       AssertionError: assert -3.0 == 2.5
E        +  where -3.0 = calculate('(5.5)-3')
E        +    where calculate = <gemini.Calculator object at 0x106656ea0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:115: AssertionError
____________________________ test_subtract_negative ____________________________

self = <gemini.Calculator object at 0x106650b00>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x106650b00>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x106650b00>, tokens = ['5', '-', '3', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
_________________________ test_subtract_negative_float _________________________

self = <gemini.Calculator object at 0x106652240>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x106652240>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x106652240>
tokens = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x106653980>

    def test_subtract_negative_parentheses(calc):
        assert calc.calculate("5-(-3)") == 8
>       assert calc.calculate("(-5)-3") == -8
E       AssertionError: assert -3.0 == -8
E        +  where -3.0 = calculate('(-5)-3')
E        +    where calculate = <gemini.Calculator object at 0x106653980>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:140: AssertionError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x106651ee0>

    def test_subtract_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-3)") == 8.5
>       assert calc.calculate("(-5.5)-3") == -8.5
E       AssertionError: assert -3.0 == -8.5
E        +  where -3.0 = calculate('(-5.5)-3')
E        +    where calculate = <gemini.Calculator object at 0x106651ee0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:148: AssertionError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x10660b710>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10660b710>, tokens = ['5', '0', '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise TypeError(f"Insufficient operands for operator: {token}")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:151: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x1066088c0>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1066088c0>, tokens = ['5.0', '0.0', '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise TypeError(f"Insufficient operands for operator: {token}")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:151: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x1066081d0>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4
E       AssertionError: assert -1.0 == 4
E        +  where -1.0 = calculate('5+2-3')
E        +    where calculate = <gemini.Calculator object at 0x1066081d0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:328: AssertionError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x106657e60>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5
E       AssertionError: assert -1.0 == 4.5
E        +  where -1.0 = calculate('5.5+2.5-3.5')
E        +    where calculate = <gemini.Calculator object at 0x106657e60>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:335: AssertionError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x106609cd0>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4
E       AssertionError: assert -1.0 == 4
E        +  where -1.0 = calculate('(5)+2-3')
E        +    where calculate = <gemini.Calculator object at 0x106609cd0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:342: AssertionError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x10660abd0>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5
E       AssertionError: assert -1.0 == 4.5
E        +  where -1.0 = calculate('(5.5)+2-3')
E        +    where calculate = <gemini.Calculator object at 0x10660abd0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:350: AssertionError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x10660b800>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0
E       AssertionError: assert -5.0 == 0
E        +  where -5.0 = calculate('5+(-2)-3')
E        +    where calculate = <gemini.Calculator object at 0x10660b800>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:358: AssertionError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x106609940>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5
E       AssertionError: assert -6.0 == -0.5
E        +  where -6.0 = calculate('5.5+(-2.5)-3.5')
E        +    where calculate = <gemini.Calculator object at 0x106609940>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:366: AssertionError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x106651010>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
E       assert -0.6666666666666666 == 4.3333333 ± 4.3e-06
E         
E         comparison failed
E         Obtained: -0.6666666666666666
E         Expected: 4.3333333 ± 4.3e-06

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:580: AssertionError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x106653d40>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
E       assert -0.7142857142857143 == 4.7857142 ± 4.8e-06
E         
E         comparison failed
E         Obtained: -0.7142857142857143
E         Expected: 4.7857142 ± 4.8e-06

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:593: AssertionError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x106652db0>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)
E       assert -0.6666666666666666 == 4.3333333 ± 4.3e-06
E         
E         comparison failed
E         Obtained: -0.6666666666666666
E         Expected: 4.3333333 ± 4.3e-06

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:606: AssertionError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x106600aa0>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)
E       assert -0.6666666666666666 == 4.83333333 ± 4.8e-06
E         
E         comparison failed
E         Obtained: -0.6666666666666666
E         Expected: 4.83333333 ± 4.8e-06

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:618: AssertionError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x106601670>

    def test_subtract_divide_negative_parentheses(calc):
        assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)
>       assert calc.calculate("(-5)-2/3") == pytest.approx(-5.66666666, rel=1e-6)
E       assert -0.6666666666666666 == -5.66666666 ± 5.7e-06
E         
E         comparison failed
E         Obtained: -0.6666666666666666
E         Expected: -5.66666666 ± 5.7e-06

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:631: AssertionError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x1066001d0>

    def test_subtract_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)
>       assert calc.calculate("(-5.5)-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)
E       assert -0.7142857142857143 == -6.2142857 ± 6.2e-06
E         
E         comparison failed
E         Obtained: -0.7142857142857143
E         Expected: -6.2142857 ± 6.2e-06

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:643: AssertionError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x106601730>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1
E       AssertionError: assert -6.0 == -1
E        +  where -6.0 = calculate('5-2*3')
E        +    where calculate = <gemini.Calculator object at 0x106601730>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:657: AssertionError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x106650dd0>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25
E       AssertionError: assert -8.75 == -3.25
E        +  where -8.75 = calculate('5.5-2.5*3.5')
E        +    where calculate = <gemini.Calculator object at 0x106650dd0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:668: AssertionError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x1079c8aa0>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1
E       AssertionError: assert -6.0 == -1
E        +  where -6.0 = calculate('(5)-2*3')
E        +    where calculate = <gemini.Calculator object at 0x1079c8aa0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:679: AssertionError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x1079c95b0>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5
E       AssertionError: assert -6.0 == -0.5
E        +  where -6.0 = calculate('(5.5)-2*3')
E        +    where calculate = <gemini.Calculator object at 0x1079c95b0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:689: AssertionError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x1079ca150>

    def test_subtract_multiply_negative_parentheses(calc):
        assert calc.calculate("5-(-2)*3") == 11
>       assert calc.calculate("(-5)-2*3") == -11
E       AssertionError: assert -6.0 == -11
E        +  where -6.0 = calculate('(-5)-2*3')
E        +    where calculate = <gemini.Calculator object at 0x1079ca150>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:700: AssertionError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x1079cac30>

    def test_subtract_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)*3.5") == 14.25
>       assert calc.calculate("(-5.5)-2.5*3.5") == -14.25
E       AssertionError: assert -8.75 == -14.25
E        +  where -8.75 = calculate('(-5.5)-2.5*3.5')
E        +    where calculate = <gemini.Calculator object at 0x1079cac30>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:710: AssertionError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x1079cbad0>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9
E       AssertionError: assert -4.0 == 9
E        +  where -4.0 = calculate('5+2*3-4/2')
E        +    where calculate = <gemini.Calculator object at 0x1079cbad0>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:722: AssertionError
___________________________ test_general_parentheses ___________________________

self = <gemini.Calculator object at 0x1079ab0e0>
tokens = ['5', '2', '+', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1079ab0e0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079ab0e0>
tokens = ['5', '2', '+', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
___________________________ test_nested_parentheses ____________________________

self = <gemini.Calculator object at 0x1079ab920>
tokens = ['2', '3', '+', '2', '3', '+', ...]

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1079ab920>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079ab920>
tokens = ['2', '3', '+', '2', '3', '+', ...]

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x1079aa960>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
>       assert (
            calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )
E       AssertionError: assert -100.0 == -3000
E        +  where -100.0 = calculate('-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100')
E        +    where calculate = <gemini.Calculator object at 0x1079aa960>.calculate

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:762: AssertionError
________________________ test_invalid_expression_hello _________________________

calc = <gemini.Calculator object at 0x1079a99a0>

    def test_invalid_expression_hello(calc):
        with pytest.raises(ValueError):
>           calc.calculate("hello")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:773: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079a99a0>, tokens = []

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise TypeError(f"Insufficient operands for operator: {token}")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator {token}") #Should not happen
    
>       return stack.pop()
E       IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:156: IndexError
_________________ test_invalid_expression_incomplete_addition __________________

self = <gemini.Calculator object at 0x1079aa540>, tokens = ['5', '2', '/', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1079aa540>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079aa540>, tokens = ['5', '2', '/', '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: +

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
______________ test_invalid_expression_incomplete_multiplication _______________

self = <gemini.Calculator object at 0x1079a9340>
tokens = ['5', '2', '/', '3', '*', '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1079a9340>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079a9340>
tokens = ['5', '2', '/', '3', '*', '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: /

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
_______________________________ test_empty_input _______________________________

calc = <gemini.Calculator object at 0x1079ca1b0>

    def test_empty_input(calc):
        with pytest.raises(ValueError):
>           calc.calculate("")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:788: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079ca1b0>, tokens = []

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise TypeError(f"Insufficient operands for operator: {token}")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator {token}") #Should not happen
    
>       return stack.pop()
E       IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:156: IndexError
____________________________ test_empty_parentheses ____________________________

calc = <gemini.Calculator object at 0x1079cab40>

    def test_empty_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("()")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079cab40>, tokens = []

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise TypeError(f"Insufficient operands for operator: {token}")
    
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    stack.append(operand1 / operand2)
                else:
                    raise ValueError(f"Invalid operator {token}") #Should not happen
    
>       return stack.pop()
E       IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:156: IndexError
__________________________ test_invalid_double_slash ___________________________

self = <gemini.Calculator object at 0x1079c9700>, tokens = ['5', '/', '2', '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1079c9700>

    def test_invalid_double_slash(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5//2")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:803: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1079c9700>, tokens = ['5', '/', '2', '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: /

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
_________________________ test_invalid_exponentiation __________________________

self = <gemini.Calculator object at 0x1066539b0>, tokens = ['5', '*', '2', '*']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x1066539b0>

    def test_invalid_exponentiation(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5**2")

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:35: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1066539b0>, tokens = ['5', '*', '2', '*']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens:  A list of tokens in postfix notation.
    
        Returns:
            The result of the expression.
    
        Raises:
            ValueError: If division by zero is attempted.
            TypeError: If an operator doesn't receive enough operands
        """
        stack = []
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # If it's a number
                stack.append(float(token))
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise TypeError(f"Insufficient operands for operator: {token}")
E                   TypeError: Insufficient operands for operator: *

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:141: TypeError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_long_expression
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_invalid_expression_hello
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_invalid_expression_incomplete_multiplication
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_empty_input
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_empty_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_invalid_double_slash
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_invalid_exponentiation
======================== 40 failed, 48 passed in 0.48s =========================
