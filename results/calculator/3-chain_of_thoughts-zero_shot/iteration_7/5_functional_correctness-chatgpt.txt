Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
___________________________ test_general_parentheses ___________________________

calc = <chatgpt.Calculator object at 0x106d23e90>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-chatgpt.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/chatgpt.py:43: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x106d23e90>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens (numbers and operators).
    
        Supports:
          • Integer and floating point numbers (optionally with a unary '+' or '-' sign).
          • The operators: +, -, *, /
          • Parentheses: ( and )
    
        Parameters:
            expression (str): The arithmetic expression.
    
        Returns:
            list: A list of tokens where numbers are of type float and other tokens are strings.
    
        Raises:
            ValueError: If an invalid character is found.
        """
        tokens = []
        i = 0
        length = len(expression)
    
        while i < length:
            char = expression[i]
    
            # Skip any whitespace
            if char.isspace():
                i += 1
                continue
    
            # Check for a unary operator (only '+' or '-' allowed as a sign) attached to a number.
            if char in '+-' and (i == 0 or (tokens and isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")):
                # Look ahead to ensure a number follows the unary sign.
                if i + 1 < length and (expression[i + 1].isdigit() or expression[i + 1] == '.'):
                    sign = char  # Preserve the '-' sign; ignore '+' as it doesn't change the number.
                    i += 1
                    num_str = ""
                    # Collect digits and at most one decimal point.
                    decimal_found = False
                    while i < length and (expression[i].isdigit() or (expression[i] == '.' and not decimal_found)):
                        if expression[i] == '.':
                            decimal_found = True
                        num_str += expression[i]
                        i += 1
                    if not num_str:
                        raise ValueError("Invalid syntax: missing number after unary operator.")
                    # Prepend the sign if negative.
                    token_value = float(sign + num_str) if sign == '-' else float(num_str)
                    tokens.append(token_value)
                    continue
                else:
                    # Not a valid unary sign if not followed by a digit or a dot.
>                   raise ValueError("Invalid syntax: unexpected unary operator usage.")
E                   ValueError: Invalid syntax: unexpected unary operator usage.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/chatgpt.py:100: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <chatgpt.Calculator object at 0x106d20290>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-chatgpt.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/chatgpt.py:43: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x106d20290>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the input expression string into a list of tokens (numbers and operators).
    
        Supports:
          • Integer and floating point numbers (optionally with a unary '+' or '-' sign).
          • The operators: +, -, *, /
          • Parentheses: ( and )
    
        Parameters:
            expression (str): The arithmetic expression.
    
        Returns:
            list: A list of tokens where numbers are of type float and other tokens are strings.
    
        Raises:
            ValueError: If an invalid character is found.
        """
        tokens = []
        i = 0
        length = len(expression)
    
        while i < length:
            char = expression[i]
    
            # Skip any whitespace
            if char.isspace():
                i += 1
                continue
    
            # Check for a unary operator (only '+' or '-' allowed as a sign) attached to a number.
            if char in '+-' and (i == 0 or (tokens and isinstance(tokens[-1], str) and tokens[-1] in "+-*/(")):
                # Look ahead to ensure a number follows the unary sign.
                if i + 1 < length and (expression[i + 1].isdigit() or expression[i + 1] == '.'):
                    sign = char  # Preserve the '-' sign; ignore '+' as it doesn't change the number.
                    i += 1
                    num_str = ""
                    # Collect digits and at most one decimal point.
                    decimal_found = False
                    while i < length and (expression[i].isdigit() or (expression[i] == '.' and not decimal_found)):
                        if expression[i] == '.':
                            decimal_found = True
                        num_str += expression[i]
                        i += 1
                    if not num_str:
                        raise ValueError("Invalid syntax: missing number after unary operator.")
                    # Prepend the sign if negative.
                    token_value = float(sign + num_str) if sign == '-' else float(num_str)
                    tokens.append(token_value)
                    continue
                else:
                    # Not a valid unary sign if not followed by a digit or a dot.
>                   raise ValueError("Invalid syntax: unexpected unary operator usage.")
E                   ValueError: Invalid syntax: unexpected unary operator usage.

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/chatgpt.py:100: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-chatgpt.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-chatgpt.py::test_nested_parentheses
========================= 2 failed, 86 passed in 0.21s =========================
