Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py . [  1%]
.............FF......................................................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x105fb10a0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:193: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fb10a0>, tokens = [5.0, '-', '+', 3.0]

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the token list and evaluates the expression.  Uses a simplified
        Shunting Yard algorithm.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        for token in tokens:
            if isinstance(token, float):
                output_queue.append(token)
            elif token in '+-*/':
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses")
                operator_stack.pop()  # Remove the '('
            else: # This should be unreachable due to prior validation
                raise ValueError(f"Unexpected token: {token}")
    
        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
        # Evaluate the RPN expression
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                if len(evaluation_stack) < 2:
>                   raise ValueError("Invalid expression: Not enough operands")
E                   ValueError: Invalid expression: Not enough operands

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:286: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x105fae090>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:193: in calculate
    result = self._parse_expression(tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fae090>, tokens = [5.5, '-', '+', 3.5]

    def _parse_expression(self, tokens: list) -> float:
        """
        Parses the token list and evaluates the expression.  Uses a simplified
        Shunting Yard algorithm.
        """
        output_queue = []
        operator_stack = []
        precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    
        for token in tokens:
            if isinstance(token, float):
                output_queue.append(token)
            elif token in '+-*/':
                while (operator_stack and operator_stack[-1] != '(' and
                       precedence.get(operator_stack[-1], -1) >= precedence.get(token, -1)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(token)
            elif token == '(':
                operator_stack.append(token)
            elif token == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
                if not operator_stack:
                    raise ValueError("Unbalanced parentheses")
                operator_stack.pop()  # Remove the '('
            else: # This should be unreachable due to prior validation
                raise ValueError(f"Unexpected token: {token}")
    
        while operator_stack:
            if operator_stack[-1] == '(':
                raise ValueError("Unbalanced parentheses")
            output_queue.append(operator_stack.pop())
    
        # Evaluate the RPN expression
        evaluation_stack = []
        for token in output_queue:
            if isinstance(token, float):
                evaluation_stack.append(token)
            else:  # It's an operator
                if len(evaluation_stack) < 2:
>                   raise ValueError("Invalid expression: Not enough operands")
E                   ValueError: Invalid expression: Not enough operands

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:286: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x105faeea0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:192: in calculate
    tokens = self._tokenize(expression)
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:208: in _tokenize
    number, next_index = self._parse_number(expression, i)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105faeea0>, expression = '-(5+2)*3'
index = 1

    def _parse_number(self, expression: str, index: int) -> (float, int):
        """
        Parses a number (integer or decimal) from the expression string.
        """
        number_str = ""
        is_decimal = False
        if expression[index] == '-':
            number_str += '-'
            index += 1
    
        while index < len(expression):
            char = expression[index]
            if char.isdigit():
                number_str += char
            elif char == '.':
                if is_decimal:
                    raise ValueError("Invalid number format: Multiple decimal points")
                is_decimal = True
                number_str += char
            else:
                break
            index += 1
    
        if number_str == '-' or number_str == '' or number_str.endswith('.'):
>           raise ValueError(f"Invalid number format: {number_str}")
E           ValueError: Invalid number format: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:243: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x105fae960>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:192: in calculate
    tokens = self._tokenize(expression)
generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:208: in _tokenize
    number, next_index = self._parse_number(expression, i)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fae960>
expression = '-((2+3)*((2+3)*2))', index = 1

    def _parse_number(self, expression: str, index: int) -> (float, int):
        """
        Parses a number (integer or decimal) from the expression string.
        """
        number_str = ""
        is_decimal = False
        if expression[index] == '-':
            number_str += '-'
            index += 1
    
        while index < len(expression):
            char = expression[index]
            if char.isdigit():
                number_str += char
            elif char == '.':
                if is_decimal:
                    raise ValueError("Invalid number format: Multiple decimal points")
                is_decimal = True
                number_str += char
            else:
                break
            index += 1
    
        if number_str == '-' or number_str == '' or number_str.endswith('.'):
>           raise ValueError(f"Invalid number format: {number_str}")
E           ValueError: Invalid number format: -

generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/gemini.py:243: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-gemini.py::test_nested_parentheses
========================= 4 failed, 84 passed in 0.23s =========================
