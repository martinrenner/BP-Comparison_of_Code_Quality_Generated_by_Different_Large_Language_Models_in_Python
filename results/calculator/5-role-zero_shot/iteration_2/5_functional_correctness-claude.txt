Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
............F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x106958d40>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:34: in calculate
    self._validate_characters(expression)
generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:59: in _validate_characters
    self._validate_syntax(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106958d40>, expression = '5-+3'

    def _validate_syntax(self, expression: str) -> None:
        """
        Validates the syntax of the expression.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression has syntax errors
        """
        # Check for consecutive operators (except when - is used for negative numbers)
        for i in range(1, len(expression)):
            if (expression[i] in "+-*/") and (expression[i-1] in "+-*/") and not (
                    expression[i] == '-' and (expression[i-1] in "+-*/(" or i == 0)):
>               raise ValueError(f"Invalid syntax: consecutive operators at position {i}")
E               ValueError: Invalid syntax: consecutive operators at position 2

generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:75: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x106956630>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:34: in calculate
    self._validate_characters(expression)
generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:59: in _validate_characters
    self._validate_syntax(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106956630>, expression = '5.5-+3.5'

    def _validate_syntax(self, expression: str) -> None:
        """
        Validates the syntax of the expression.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression has syntax errors
        """
        # Check for consecutive operators (except when - is used for negative numbers)
        for i in range(1, len(expression)):
            if (expression[i] in "+-*/") and (expression[i-1] in "+-*/") and not (
                    expression[i] == '-' and (expression[i-1] in "+-*/(" or i == 0)):
>               raise ValueError(f"Invalid syntax: consecutive operators at position {i}")
E               ValueError: Invalid syntax: consecutive operators at position 4

generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:75: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x106956ae0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:37: in calculate
    self._validate_parentheses(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106956ae0>, expression = '5*(2+3'

    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses in the expression are balanced.
    
        Args:
            expression: The expression to validate
    
        Raises:
            SyntaxError: If parentheses are unbalanced
        """
        stack = []
    
        for i, char in enumerate(expression):
            if char == '(':
                stack.append(i)
            elif char == ')':
                if not stack:
                    raise SyntaxError(f"Unbalanced closing parenthesis at position {i}")
                stack.pop()
    
        if stack:
>           raise SyntaxError(f"Unbalanced opening parenthesis at position {stack[0]}")
E           SyntaxError: Unbalanced opening parenthesis at position 2

generated/code/calculator/5-role-zero_shot/iteration_2/claude.py:130: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 3 failed, 85 passed in 0.23s =========================
