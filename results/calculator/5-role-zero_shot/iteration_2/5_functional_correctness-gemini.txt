Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py . [  1%]
.............FF......................FF................................. [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x104b516d0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:41: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104b516d0>, tokens = [5.0, '-', 3.0, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens: The list of tokens in postfix notation.
    
        Returns:
            The result of the evaluation.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            else:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:164: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x104b4cfe0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:41: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104b4cfe0>, tokens = [5.5, '-', 3.5, '+']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens: The list of tokens in postfix notation.
    
        Returns:
            The result of the evaluation.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            else:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands.")
E                   ValueError: Invalid expression: insufficient operands.

generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:164: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x104b4daf0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:41: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104b4daf0>, tokens = [5.0, 0.0, '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens: The list of tokens in postfix notation.
    
        Returns:
            The result of the evaluation.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            else:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient operands.")
                operand2 = stack.pop()
                operand1 = stack.pop()
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:175: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x104b4ea80>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:41: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104b4ea80>, tokens = [5.0, 0.0, '/']

    def _evaluate_postfix(self, tokens: list) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            tokens: The list of tokens in postfix notation.
    
        Returns:
            The result of the evaluation.
    
        Raises:
            ValueError: If division by zero is attempted.
        """
        stack = []
        for token in tokens:
            if isinstance(token, float):
                stack.append(token)
            else:
                if len(stack) < 2:
                    raise ValueError("Invalid expression: insufficient operands.")
                operand2 = stack.pop()
                operand1 = stack.pop()
                if token == '+':
                    stack.append(operand1 + operand2)
                elif token == '-':
                    stack.append(operand1 - operand2)
                elif token == '*':
                    stack.append(operand1 * operand2)
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:175: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x104b4d520>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104b4d520>, expression = '-(5+2)*3'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the expression string into a list of tokens.
        Handles multi-digit numbers (integers and floats) and negative numbers.
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]
            if char.isdigit() or (char == '.' and i + 1 < len(expression) and expression[i+1].isdigit()):  # Handle floats
                j = i
                num_str = ""
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                # Handle edge case: decimal at the very end. Should not happen in valid expressions
                if num_str.endswith('.'):
                    raise ValueError(f"Invalid decimal number format at position {i}.")
    
                tokens.append(float(num_str))  # Store as float
                i = j - 1  # Adjust index
    
            # Handling negative numbers. This also handles subsequent negative values.
            elif char == '-' and (i == 0 or expression[i-1] in '+-*/('):  # Negative number
                if i + 1 < len(expression) and (expression[i+1].isdigit() or expression[i+1] =='.'): # Next is digit or a '.'
                   j = i + 1
                   num_str = "-"
                   while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                        num_str += expression[j]
                        j += 1
                   # Handle edge case: decimal at the very end.
                   if num_str.endswith('.'):
                       raise ValueError(f"Invalid decimal number format at position {i}.")
                   tokens.append(float(num_str))
                   i = j - 1  # Corrected index
    
                else: # Invalid use of "-"
>                   raise ValueError(f"Invalid use of '-' operator, the next char is not a digit. position: {i}")
E                   ValueError: Invalid use of '-' operator, the next char is not a digit. position: 0

generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:98: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x104b4c200>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:35: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104b4c200>
expression = '-((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> list:
        """
        Converts the expression string into a list of tokens.
        Handles multi-digit numbers (integers and floats) and negative numbers.
        """
        tokens = []
        i = 0
        while i < len(expression):
            char = expression[i]
            if char.isdigit() or (char == '.' and i + 1 < len(expression) and expression[i+1].isdigit()):  # Handle floats
                j = i
                num_str = ""
                while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                    num_str += expression[j]
                    j += 1
    
                # Handle edge case: decimal at the very end. Should not happen in valid expressions
                if num_str.endswith('.'):
                    raise ValueError(f"Invalid decimal number format at position {i}.")
    
                tokens.append(float(num_str))  # Store as float
                i = j - 1  # Adjust index
    
            # Handling negative numbers. This also handles subsequent negative values.
            elif char == '-' and (i == 0 or expression[i-1] in '+-*/('):  # Negative number
                if i + 1 < len(expression) and (expression[i+1].isdigit() or expression[i+1] =='.'): # Next is digit or a '.'
                   j = i + 1
                   num_str = "-"
                   while j < len(expression) and (expression[j].isdigit() or expression[j] == '.'):
                        num_str += expression[j]
                        j += 1
                   # Handle edge case: decimal at the very end.
                   if num_str.endswith('.'):
                       raise ValueError(f"Invalid decimal number format at position {i}.")
                   tokens.append(float(num_str))
                   i = j - 1  # Corrected index
    
                else: # Invalid use of "-"
>                   raise ValueError(f"Invalid use of '-' operator, the next char is not a digit. position: {i}")
E                   ValueError: Invalid use of '-' operator, the next char is not a digit. position: 0

generated/code/calculator/5-role-zero_shot/iteration_2/gemini.py:98: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_nested_parentheses
========================= 6 failed, 82 passed in 0.26s =========================
