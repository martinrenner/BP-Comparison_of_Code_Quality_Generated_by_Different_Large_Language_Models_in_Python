Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x1044ec4a0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:44: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1044ec4a0>, expression = '5-+3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validates the expression for correct syntax.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If invalid characters are found
            SyntaxError: If parentheses are unbalanced
        """
        # Check for invalid characters
        valid_chars = set("0123456789.+-*/() ")
        invalid_chars = set(char for char in expression if char not in valid_chars)
        if invalid_chars:
            raise ValueError(f"Invalid characters in expression: {', '.join(invalid_chars)}")
    
        # Check for balanced parentheses
        open_count = expression.count('(')
        close_count = expression.count(')')
        if open_count != close_count:
            raise SyntaxError("Unbalanced parentheses in expression")
    
        # Check for empty expression
        if not expression:
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid syntax patterns
        # Check for consecutive operators
        if re.search(r'[+\-*/][+*/]', expression):
>           raise ValueError("Invalid syntax: consecutive operators")
E           ValueError: Invalid syntax: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:79: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x1044eae10>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:44: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1044eae10>, expression = '5.5-+3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validates the expression for correct syntax.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If invalid characters are found
            SyntaxError: If parentheses are unbalanced
        """
        # Check for invalid characters
        valid_chars = set("0123456789.+-*/() ")
        invalid_chars = set(char for char in expression if char not in valid_chars)
        if invalid_chars:
            raise ValueError(f"Invalid characters in expression: {', '.join(invalid_chars)}")
    
        # Check for balanced parentheses
        open_count = expression.count('(')
        close_count = expression.count(')')
        if open_count != close_count:
            raise SyntaxError("Unbalanced parentheses in expression")
    
        # Check for empty expression
        if not expression:
            raise ValueError("Expression cannot be empty")
    
        # Check for invalid syntax patterns
        # Check for consecutive operators
        if re.search(r'[+\-*/][+*/]', expression):
>           raise ValueError("Invalid syntax: consecutive operators")
E           ValueError: Invalid syntax: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:79: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x1044ea840>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:47: in calculate
    return self._evaluate_expression(expression)
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:104: in _evaluate_expression
    postfix = self._infix_to_postfix(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1044ea840>, expression = '-(5+2)*3'

    def _infix_to_postfix(self, expression: str) -> List:
        """
        Converts an infix expression to postfix notation using the Shunting Yard algorithm.
    
        Args:
            expression: The infix expression
    
        Returns:
            A list of tokens in postfix order
        """
        output_queue = []
        operator_stack = []
    
        # Process the token stream
        i = 0
        while i < len(expression):
            char = expression[i]
    
            # Handle numbers (including negative numbers and decimals)
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '(+-*/')):
                # Determine if it's a negative number
                is_negative = char == '-'
                if is_negative:
                    i += 1
                    if i >= len(expression) or not (expression[i].isdigit() or expression[i] == '.'):
>                       raise ValueError("Invalid syntax: isolated negative sign")
E                       ValueError: Invalid syntax: isolated negative sign

generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:134: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1044ea1b0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:47: in calculate
    return self._evaluate_expression(expression)
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:104: in _evaluate_expression
    postfix = self._infix_to_postfix(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1044ea1b0>
expression = '-((2+3)*((2+3)*2))'

    def _infix_to_postfix(self, expression: str) -> List:
        """
        Converts an infix expression to postfix notation using the Shunting Yard algorithm.
    
        Args:
            expression: The infix expression
    
        Returns:
            A list of tokens in postfix order
        """
        output_queue = []
        operator_stack = []
    
        # Process the token stream
        i = 0
        while i < len(expression):
            char = expression[i]
    
            # Handle numbers (including negative numbers and decimals)
            if char.isdigit() or (char == '-' and (i == 0 or expression[i-1] in '(+-*/')):
                # Determine if it's a negative number
                is_negative = char == '-'
                if is_negative:
                    i += 1
                    if i >= len(expression) or not (expression[i].isdigit() or expression[i] == '.'):
>                       raise ValueError("Invalid syntax: isolated negative sign")
E                       ValueError: Invalid syntax: isolated negative sign

generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:134: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x1044e9250>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:44: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1044e9250>, expression = '5*(2+3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validates the expression for correct syntax.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If invalid characters are found
            SyntaxError: If parentheses are unbalanced
        """
        # Check for invalid characters
        valid_chars = set("0123456789.+-*/() ")
        invalid_chars = set(char for char in expression if char not in valid_chars)
        if invalid_chars:
            raise ValueError(f"Invalid characters in expression: {', '.join(invalid_chars)}")
    
        # Check for balanced parentheses
        open_count = expression.count('(')
        close_count = expression.count(')')
        if open_count != close_count:
>           raise SyntaxError("Unbalanced parentheses in expression")
E           SyntaxError: Unbalanced parentheses in expression

generated/code/calculator/5-role-zero_shot/iteration_3/claude.py:70: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_3/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.24s =========================
