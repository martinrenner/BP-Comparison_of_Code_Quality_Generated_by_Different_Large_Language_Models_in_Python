Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py . [  1%]
...FF........FF........FFF.FF....FFFF........FF..FFFF..........FF....FF. [ 82%]
...FFF..FF.....                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <claude.Calculator object at 0x10698b470>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10698b470>, expression = '1+-2'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
___________________________ test_add_negative_float ____________________________

calc = <claude.Calculator object at 0x106985130>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106985130>, expression = '1.5+-2.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x106991310>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106991310>, expression = '5-+3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x106986ea0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106986ea0>, expression = '5.5-+3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________________ test_multiply_negative ____________________________

calc = <claude.Calculator object at 0x106985eb0>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106985eb0>, expression = '2*-3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
______________________ test_multiply_negative_parentheses ______________________

calc = <claude.Calculator object at 0x106984e90>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106984e90>
expression = '(-999999999999999)*-1'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_________________________ test_multiply_negative_float _________________________

calc = <claude.Calculator object at 0x106984d10>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106984d10>, expression = '2.5*-3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________________ test_multiply_neutral _____________________________

calc = <claude.Calculator object at 0x10693f020>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10693f020>, expression = '0*-5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_________________________ test_multiply_neutral_float __________________________

calc = <claude.Calculator object at 0x1069847d0>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069847d0>, expression = '0.0*-5.0'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_____________________________ test_divide_negative _____________________________

calc = <claude.Calculator object at 0x106984e90>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106984e90>, expression = '6/-3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
__________________________ test_divide_negative_float __________________________

calc = <claude.Calculator object at 0x1069866c0>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069866c0>, expression = '6.5/-3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_______________________ test_divide_negative_parentheses _______________________

calc = <claude.Calculator object at 0x10693f470>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10693f470>
expression = '(999999999999999)/-1'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________ test_divide_negative_float_parentheses ____________________

calc = <claude.Calculator object at 0x10693d730>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10693d730>
expression = '(-999999999999999)/-0.1'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <claude.Calculator object at 0x10693d4f0>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
        assert calc.calculate("-5+2*3") == 1
>       assert calc.calculate("-5*-2+3") == 13

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10693d4f0>, expression = '-5*-2+3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <claude.Calculator object at 0x1069871a0>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
        assert calc.calculate("-5.5+2.5*3.5") == 3.25
>       assert calc.calculate("-5.5*-2.5+3.5") == 17.25

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:391: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1069871a0>, expression = '-5.5*-2.5+3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <claude.Calculator object at 0x107cdf6b0>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cdf6b0>
expression = '999999999999999*-1+999999999999999'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <claude.Calculator object at 0x107cded50>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cded50>
expression = '(999999999999999.5)*-1+999999999999999'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_______________________________ test_add_divide ________________________________

calc = <claude.Calculator object at 0x107cdf020>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
        assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)
>       assert calc.calculate("-5+-2/3") == pytest.approx(-5.6666666, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cdf020>, expression = '-5+-2/3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________________ test_add_divide_float _____________________________

calc = <claude.Calculator object at 0x107cdd9d0>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
        assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)
>       assert calc.calculate("-5.5+-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:456: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cdd9d0>, expression = '-5.5+-2.5/3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <claude.Calculator object at 0x107cddd90>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cddd90>, expression = '-5/-2/3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <claude.Calculator object at 0x10698bf50>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10698bf50>, expression = '-5.5/-2.5/3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <claude.Calculator object at 0x107cdc140>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
        assert calc.calculate("-5-2*3") == -11
>       assert calc.calculate("-5*-2*3") == 30

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:660: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cdc140>, expression = '-5*-2*3'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <claude.Calculator object at 0x107cdcf20>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
        assert calc.calculate("-5.5-2.5*3.5") == -14.25
>       assert calc.calculate("-5.5*-2.5*3.5") == pytest.approx(48.125, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:671: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cdcf20>, expression = '-5.5*-2.5*3.5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
_____________________________ test_all_operations ______________________________

calc = <claude.Calculator object at 0x107cde8d0>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
        assert calc.calculate("-5*2+3/3") == -9
>       assert calc.calculate("-5*-2/3+5") == pytest.approx(8.33333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:725: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:350: in calculate
    self.validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107cde8d0>, expression = '-5*-2/3+5'

    def validate_expression(self, expression: str) -> None:
        """
        Validate the expression for balanced parentheses and other issues.
    
        Args:
            expression: The arithmetic expression to validate.
    
        Raises:
            ValueError: If the expression has unbalanced parentheses or is empty.
        """
        if not expression or expression.strip() == "":
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        paren_count = 0
        for char in expression:
            if char == '(':
                paren_count += 1
            elif char == ')':
                paren_count -= 1
                if paren_count < 0:
                    raise ValueError("Unbalanced parentheses: unexpected closing parenthesis")
    
        if paren_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
        # Check for invalid characters
        valid_chars = set("0123456789+-*/().e ")  # Include 'e' for scientific notation
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for consecutive operation characters
        if re.search(r'[+\-*/]{2,}', expression.replace(' ', '')):
>           raise ValueError("Invalid expression: consecutive operators")
E           ValueError: Invalid expression: consecutive operators

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:333: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x1069840e0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:358: in calculate
    result = parser.parse()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:210: in parse
    return self.expr()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:219: in expr
    result = self.term()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:243: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x106985250>

    def factor(self) -> float:
        """
        Parse a factor: NUMBER | LEFT_PAREN expr RIGHT_PAREN
    
        Returns:
            The evaluated factor value.
    
        Raises:
            ValueError: If parentheses are unbalanced or the syntax is invalid.
        """
        token = self.current_token()
    
        if token.type == TokenType.NUMBER:
            self.advance()
            return token.value
    
        elif token.type == TokenType.LEFT_PAREN:
            self.advance()
            result = self.expr()
    
            # Ensure we have a matching closing parenthesis
            if (self.current_token_index >= len(self.tokens) or
                self.current_token().type != TokenType.RIGHT_PAREN):
                raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
            self.advance()  # Consume the right parenthesis
            return result
    
        else:
>           raise ValueError(f"Unexpected token: {token}")
E           ValueError: Unexpected token: MINUS

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:289: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x106986210>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:358: in calculate
    result = parser.parse()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:210: in parse
    return self.expr()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:219: in expr
    result = self.term()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:243: in term
    result = self.factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x1069869c0>

    def factor(self) -> float:
        """
        Parse a factor: NUMBER | LEFT_PAREN expr RIGHT_PAREN
    
        Returns:
            The evaluated factor value.
    
        Raises:
            ValueError: If parentheses are unbalanced or the syntax is invalid.
        """
        token = self.current_token()
    
        if token.type == TokenType.NUMBER:
            self.advance()
            return token.value
    
        elif token.type == TokenType.LEFT_PAREN:
            self.advance()
            result = self.expr()
    
            # Ensure we have a matching closing parenthesis
            if (self.current_token_index >= len(self.tokens) or
                self.current_token().type != TokenType.RIGHT_PAREN):
                raise ValueError("Unbalanced parentheses: missing closing parenthesis")
    
            self.advance()  # Consume the right parenthesis
            return result
    
        else:
>           raise ValueError(f"Unexpected token: {token}")
E           ValueError: Unexpected token: MINUS

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:289: ValueError
_________________ test_invalid_expression_incomplete_addition __________________

calc = <claude.Calculator object at 0x10693c1d0>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:358: in calculate
    result = parser.parse()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:210: in parse
    return self.expr()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:227: in expr
    result += self.term()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:243: in term
    result = self.factor()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:270: in factor
    token = self.current_token()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x10693c530>

    def current_token(self) -> Token:
        """Get the current token."""
        if self.current_token_index < len(self.tokens):
            return self.tokens[self.current_token_index]
>       raise IndexError("Unexpected end of expression")
E       IndexError: Unexpected end of expression

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:194: IndexError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <claude.Calculator object at 0x1069840e0>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:358: in calculate
    result = parser.parse()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:210: in parse
    return self.expr()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:219: in expr
    result = self.term()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:253: in term
    divisor = self.factor()
generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:270: in factor
    token = self.current_token()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Parser object at 0x1069854c0>

    def current_token(self) -> Token:
        """Get the current token."""
        if self.current_token_index < len(self.tokens):
            return self.tokens[self.current_token_index]
>       raise IndexError("Unexpected end of expression")
E       IndexError: Unexpected end of expression

generated/code/calculator/5-role-zero_shot/iteration_8/claude.py:194: IndexError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_multiply_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_multiply_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_multiply_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_multiply_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_divide_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_divide_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_divide_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_multiply_positive
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_multiply_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_subtract_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_subtract_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_subtract_multiply
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_subtract_multiply_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_all_operations
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_invalid_expression_incomplete_multiplication
======================== 28 failed, 60 passed in 0.49s =========================
