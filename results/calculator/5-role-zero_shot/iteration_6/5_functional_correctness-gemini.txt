Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py . [  1%]
...FF........FF........FFF.FF....FFFFFF......FF..FFFF..........FF....FF. [ 82%]
...FFF.........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x104a308f0>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a308f0>, expression = '1+-2'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
___________________________ test_add_negative_float ____________________________

calc = <gemini.Calculator object at 0x104a2f410>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2f410>, expression = '1.5+-2.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________________ test_subtract_negative ____________________________

calc = <gemini.Calculator object at 0x104a362d0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a362d0>, expression = '5-+3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <gemini.Calculator object at 0x104a2da00>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2da00>, expression = '5.5-+3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________________ test_multiply_negative ____________________________

calc = <gemini.Calculator object at 0x104a2d160>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2d160>, expression = '2*-3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
______________________ test_multiply_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x104a2edb0>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2edb0>
expression = '(-999999999999999)*-1'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_________________________ test_multiply_negative_float _________________________

calc = <gemini.Calculator object at 0x104a2d220>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2d220>, expression = '2.5*-3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________________ test_multiply_neutral _____________________________

calc = <gemini.Calculator object at 0x104a2c3b0>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2c3b0>, expression = '0*-5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_________________________ test_multiply_neutral_float __________________________

calc = <gemini.Calculator object at 0x104a2c470>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2c470>, expression = '0.0*-5.0'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_____________________________ test_divide_negative _____________________________

calc = <gemini.Calculator object at 0x104a2e1b0>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2e1b0>, expression = '6/-3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
__________________________ test_divide_negative_float __________________________

calc = <gemini.Calculator object at 0x104a2eea0>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2eea0>, expression = '6.5/-3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_______________________ test_divide_negative_parentheses _______________________

calc = <gemini.Calculator object at 0x10232e630>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10232e630>
expression = '(999999999999999)/-1'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________ test_divide_negative_float_parentheses ____________________

calc = <gemini.Calculator object at 0x1049e5eb0>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1049e5eb0>
expression = '(-999999999999999)/-0.1'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x1049e7350>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:43: in calculate
    result = self._evaluate_postfix(postfix_tokens)
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:161: in _evaluate_postfix
    result = self._perform_operation(operand1, operand2, token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1049e7350>, operand1 = 5.0, operand2 = 0.0
operator = '/'

    def _perform_operation(self, operand1: float, operand2: float, operator: str) -> float:
        """Performs the specified arithmetic operation."""
        if operator == '+':
            return operand1 + operand2
        elif operator == '-':
            return operand1 - operand2
        elif operator == '*':
            return operand1 * operand2
        elif operator == '/':
            if operand2 == 0:
>               raise ValueError("Division by zero.")
E               ValueError: Division by zero.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:179: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x104a2f860>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:43: in calculate
    result = self._evaluate_postfix(postfix_tokens)
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:161: in _evaluate_postfix
    result = self._perform_operation(operand1, operand2, token)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2f860>, operand1 = 5.0, operand2 = 0.0
operator = '/'

    def _perform_operation(self, operand1: float, operand2: float, operator: str) -> float:
        """Performs the specified arithmetic operation."""
        if operator == '+':
            return operand1 + operand2
        elif operator == '-':
            return operand1 - operand2
        elif operator == '*':
            return operand1 * operand2
        elif operator == '/':
            if operand2 == 0:
>               raise ValueError("Division by zero.")
E               ValueError: Division by zero.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:179: ValueError
__________________________ test_add_multiply_positive __________________________

calc = <gemini.Calculator object at 0x105d87470>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
        assert calc.calculate("-5+2*3") == 1
>       assert calc.calculate("-5*-2+3") == 13

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d87470>, expression = '-5*-2+3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_______________________ test_add_multiply_positive_float _______________________

calc = <gemini.Calculator object at 0x105d84ec0>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
        assert calc.calculate("-5.5+2.5*3.5") == 3.25
>       assert calc.calculate("-5.5*-2.5+3.5") == 17.25

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:391: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d84ec0>, expression = '-5.5*-2.5+3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <gemini.Calculator object at 0x105d86240>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d86240>
expression = '999999999999999*-1+999999999999999'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x105d85670>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d85670>
expression = '(999999999999999.5)*-1+999999999999999'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_______________________________ test_add_divide ________________________________

calc = <gemini.Calculator object at 0x105d84740>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
        assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)
>       assert calc.calculate("-5+-2/3") == pytest.approx(-5.6666666, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d84740>, expression = '-5+-2/3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________________ test_add_divide_float _____________________________

calc = <gemini.Calculator object at 0x104a2c770>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
        assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)
>       assert calc.calculate("-5.5+-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:456: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a2c770>, expression = '-5.5+-2.5/3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x105d86870>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d86870>, expression = '-5/-2/3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x105d848f0>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d848f0>, expression = '-5.5/-2.5/3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x105d84770>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
        assert calc.calculate("-5-2*3") == -11
>       assert calc.calculate("-5*-2*3") == 30

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:660: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105d84770>, expression = '-5*-2*3'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x104a31c10>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
        assert calc.calculate("-5.5-2.5*3.5") == -14.25
>       assert calc.calculate("-5.5*-2.5*3.5") == pytest.approx(48.125, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:671: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a31c10>, expression = '-5.5*-2.5*3.5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x104a367e0>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
        assert calc.calculate("-5*2+3/3") == -9
>       assert calc.calculate("-5*-2/3+5") == pytest.approx(8.33333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:725: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:38: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a367e0>, expression = '-5*-2/3+5'

    def _validate_expression(self, expression: str):
        """Validates the given expression for common errors."""
    
        # 1. Check for balanced parentheses:
        paren_balance = 0
        for char in expression:
            if char == '(':
                paren_balance += 1
            elif char == ')':
                paren_balance -= 1
            if paren_balance < 0:
                raise ValueError("Unbalanced parentheses (too many closing).")
        if paren_balance != 0:
            raise ValueError("Unbalanced parentheses (too many opening).")
    
        # 2. Check for invalid characters:
        valid_chars_pattern = r"^[\d+\-*/().\s]+$"  # Allow digits, operators, parentheses, and whitespace
        if not re.match(valid_chars_pattern, expression):
            raise ValueError("Invalid characters in expression.")
    
        # 3. Check for consecutive operators (e.g., "++" or "*-")
        if re.search(r"[\+\-*/]{2,}", expression):
>           raise ValueError("Consecutive operators are not allowed.")
E           ValueError: Consecutive operators are not allowed.

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:69: ValueError
___________________________ test_general_parentheses ___________________________

calc = <gemini.Calculator object at 0x1049e4350>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:43: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1049e4350>
tokens = ['5', '2', '+', '3', '*', '-']

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """Evaluates a list of tokens in postfix notation."""
        stack = []
    
        for token in tokens:
            if token.replace('.', '', 1).lstrip('-').isdigit(): # Check if it is a number
                stack.append(float(token))
            elif token in '+-*/':
                if len(stack) < 2:
>                   raise ValueError("Invalid expression (not enough operands).")
E                   ValueError: Invalid expression (not enough operands).

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:158: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <gemini.Calculator object at 0x104a324b0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:43: in calculate
    result = self._evaluate_postfix(postfix_tokens)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104a324b0>
tokens = ['2', '3', '+', '2', '3', '+', ...]

    def _evaluate_postfix(self, tokens: list[str]) -> float:
        """Evaluates a list of tokens in postfix notation."""
        stack = []
    
        for token in tokens:
            if token.replace('.', '', 1).lstrip('-').isdigit(): # Check if it is a number
                stack.append(float(token))
            elif token in '+-*/':
                if len(stack) < 2:
>                   raise ValueError("Invalid expression (not enough operands).")
E                   ValueError: Invalid expression (not enough operands).

generated/code/calculator/5-role-zero_shot/iteration_6/gemini.py:158: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_multiply_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_positive
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_add_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_nested_parentheses
======================== 28 failed, 60 passed in 0.45s =========================
