Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py . [  1%]
........................................................................ [ 82%]
........FFFFFFF                                                          [100%]

=================================== FAILURES ===================================
_________________ test_invalid_expression_incomplete_addition __________________

calc = <chatgpt.Calculator object at 0x105f6b650>

    def test_invalid_expression_incomplete_addition(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2+")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:778: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:131: in _parse_expression
    next_term = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:147: in _parse_term
    result = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f6b650>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
>           raise SyntaxError("Unexpected end of expression.")
E           SyntaxError: Unexpected end of expression.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:192: SyntaxError
______________ test_invalid_expression_incomplete_multiplication _______________

calc = <chatgpt.Calculator object at 0x105f69c40>

    def test_invalid_expression_incomplete_multiplication(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5/2*3/")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:783: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:152: in _parse_term
    next_factor = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f69c40>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
>           raise SyntaxError("Unexpected end of expression.")
E           SyntaxError: Unexpected end of expression.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:192: SyntaxError
_______________________________ test_empty_input _______________________________

calc = <chatgpt.Calculator object at 0x105f69f10>

    def test_empty_input(calc):
        with pytest.raises(ValueError):
>           calc.calculate("")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:788: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:147: in _parse_term
    result = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f69f10>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
>           raise SyntaxError("Unexpected end of expression.")
E           SyntaxError: Unexpected end of expression.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:192: SyntaxError
____________________________ test_empty_parentheses ____________________________

self = <chatgpt.Calculator object at 0x105f699a0>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return result
    
        # Number token
        try:
>           value = float(token)
E           ValueError: could not convert string to float: ')'

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:205: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x105f699a0>

    def test_empty_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("()")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:147: in _parse_term
    result = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:197: in _parse_primary
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:147: in _parse_term
    result = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f699a0>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return result
    
        # Number token
        try:
            value = float(token)
            self._consume()  # consume the number token
            return value
        except ValueError:
>           raise SyntaxError(f"Expected a number but got '{token}'.")
E           SyntaxError: Expected a number but got ')'.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:209: SyntaxError
__________________________ test_unmatched_parentheses __________________________

calc = <chatgpt.Calculator object at 0x105f689e0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:152: in _parse_term
    next_factor = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f689e0>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
>               raise SyntaxError("Unbalanced parentheses: missing ')'.")
E               SyntaxError: Unbalanced parentheses: missing ')'.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:199: SyntaxError
__________________________ test_invalid_double_slash ___________________________

self = <chatgpt.Calculator object at 0x105f232c0>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return result
    
        # Number token
        try:
>           value = float(token)
E           ValueError: could not convert string to float: '/'

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:205: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x105f232c0>

    def test_invalid_double_slash(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5//2")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:803: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:152: in _parse_term
    next_factor = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f232c0>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return result
    
        # Number token
        try:
            value = float(token)
            self._consume()  # consume the number token
            return value
        except ValueError:
>           raise SyntaxError(f"Expected a number but got '{token}'.")
E           SyntaxError: Expected a number but got '/'.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:209: SyntaxError
_________________________ test_invalid_exponentiation __________________________

self = <chatgpt.Calculator object at 0x105f21130>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return result
    
        # Number token
        try:
>           value = float(token)
E           ValueError: could not convert string to float: '*'

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:205: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x105f21130>

    def test_invalid_exponentiation(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5**2")

generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:35: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:126: in _parse_expression
    result = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:152: in _parse_term
    next_factor = self._parse_factor()
generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:178: in _parse_factor
    return self._parse_primary()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x105f21130>

    def _parse_primary(self):
        """
        Parses the primary unit: a number or a parenthesized expression.
    
        Returns:
            float: The evaluated primary expression.
    
        Raises:
            SyntaxError: If the primary expression is invalid.
        """
        token = self._current_token()
        if token is None:
            raise SyntaxError("Unexpected end of expression.")
    
        # Parenthesized expression
        if token == '(':
            self._consume('(')
            result = self._parse_expression()
            if self._current_token() != ')':
                raise SyntaxError("Unbalanced parentheses: missing ')'.")
            self._consume(')')
            return result
    
        # Number token
        try:
            value = float(token)
            self._consume()  # consume the number token
            return value
        except ValueError:
>           raise SyntaxError(f"Expected a number but got '{token}'.")
E           SyntaxError: Expected a number but got '*'.

generated/code/calculator/5-role-zero_shot/iteration_6/chatgpt.py:209: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_invalid_expression_incomplete_addition
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_invalid_expression_incomplete_multiplication
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_empty_input
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_empty_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_unmatched_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_invalid_double_slash
FAILED generated/code/calculator/5-role-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_invalid_exponentiation
========================= 7 failed, 81 passed in 0.28s =========================
