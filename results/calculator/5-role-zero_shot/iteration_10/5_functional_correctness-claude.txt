Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py . [  1%]
.............FF......................................................... [ 82%]
....FF......F..                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x102ce0f80>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:51: in calculate
    result = self._evaluate_expression(tokens)
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:140: in _evaluate_expression
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102ce0f80>, postfix = ['5', '-', '3', '+']

    def _evaluate_postfix(self, postfix: List[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            postfix (List[str]): Expression in postfix notation
    
        Returns:
            float: Result of the evaluation
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is malformed
        """
        stack = []
    
        for token in postfix:
            if self._is_number(token):
                stack.append(float(token))
            elif token in self.operators:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:201: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x102cde690>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:51: in calculate
    result = self._evaluate_expression(tokens)
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:140: in _evaluate_expression
    return self._evaluate_postfix(postfix)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102cde690>
postfix = ['5.5', '-', '3.5', '+']

    def _evaluate_postfix(self, postfix: List[str]) -> float:
        """
        Evaluates a postfix expression.
    
        Args:
            postfix (List[str]): Expression in postfix notation
    
        Returns:
            float: Result of the evaluation
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression is malformed
        """
        stack = []
    
        for token in postfix:
            if self._is_number(token):
                stack.append(float(token))
            elif token in self.operators:
                if len(stack) < 2:
>                   raise ValueError("Invalid expression: insufficient operands")
E                   ValueError: Invalid expression: insufficient operands

generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:201: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x102cdf290>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:48: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102cdf290>, expression = 'u(5+2)*3'

    def _tokenize(self, expression: str) -> List[str]:
        """
        Converts a string expression into a list of tokens.
    
        Args:
            expression (str): The expression to tokenize
    
        Returns:
            List[str]: List of tokens (numbers and operators)
    
        Raises:
            ValueError: If the expression contains invalid characters
        """
        # Replace unary minus with a special token
        # Handle cases like "-5" or "(-5)" or "2*-5"
        expression = re.sub(r'(^|[\(\+\-\*/])\s*-', r'\1u', expression)
    
        # Define pattern to match numbers, operators and parentheses
        pattern = r'(?:[0-9]*\.[0-9]+|[0-9]+)|[\+\-\*/\(\)]|u'
        tokens = re.findall(pattern, expression)
    
        # Check for invalid characters
        reconstructed = ''.join(tokens)
        cleaned_expression = re.sub(r'\s+', '', expression)
        if reconstructed != cleaned_expression:
            invalid_chars = set(cleaned_expression) - set(reconstructed)
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Process unary operators
        processed_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == 'u':
                # Next token should be a number
                if i + 1 < len(tokens) and re.match(r'^[0-9]*\.?[0-9]+$', tokens[i + 1]):
                    # Negate the number
                    processed_tokens.append(str(-float(tokens[i + 1])))
                    i += 2
                else:
>                   raise ValueError("Invalid use of unary minus")
E                   ValueError: Invalid use of unary minus

generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:115: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x102cde300>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:48: in calculate
    tokens = self._tokenize(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102cde300>
expression = 'u((2+3)*((2+3)*2))'

    def _tokenize(self, expression: str) -> List[str]:
        """
        Converts a string expression into a list of tokens.
    
        Args:
            expression (str): The expression to tokenize
    
        Returns:
            List[str]: List of tokens (numbers and operators)
    
        Raises:
            ValueError: If the expression contains invalid characters
        """
        # Replace unary minus with a special token
        # Handle cases like "-5" or "(-5)" or "2*-5"
        expression = re.sub(r'(^|[\(\+\-\*/])\s*-', r'\1u', expression)
    
        # Define pattern to match numbers, operators and parentheses
        pattern = r'(?:[0-9]*\.[0-9]+|[0-9]+)|[\+\-\*/\(\)]|u'
        tokens = re.findall(pattern, expression)
    
        # Check for invalid characters
        reconstructed = ''.join(tokens)
        cleaned_expression = re.sub(r'\s+', '', expression)
        if reconstructed != cleaned_expression:
            invalid_chars = set(cleaned_expression) - set(reconstructed)
            raise ValueError(f"Expression contains invalid characters: {invalid_chars}")
    
        # Process unary operators
        processed_tokens = []
        i = 0
        while i < len(tokens):
            if tokens[i] == 'u':
                # Next token should be a number
                if i + 1 < len(tokens) and re.match(r'^[0-9]*\.?[0-9]+$', tokens[i + 1]):
                    # Negate the number
                    processed_tokens.append(str(-float(tokens[i + 1])))
                    i += 2
                else:
>                   raise ValueError("Invalid use of unary minus")
E                   ValueError: Invalid use of unary minus

generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:115: ValueError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x102cdd3d0>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:45: in calculate
    self._validate_parentheses(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x102cdd3d0>, expression = '5*(2+3'

    def _validate_parentheses(self, expression: str) -> None:
        """
        Validates that parentheses in the expression are balanced.
    
        Args:
            expression (str): The expression to validate
    
        Raises:
            SyntaxError: If parentheses are unbalanced
        """
        stack = []
        for char in expression:
            if char == '(':
                stack.append(char)
            elif char == ')':
                if not stack:
                    raise SyntaxError("Unbalanced parentheses: extra closing parenthesis")
                stack.pop()
    
        if stack:
>           raise SyntaxError("Unbalanced parentheses: missing closing parenthesis")
E           SyntaxError: Unbalanced parentheses: missing closing parenthesis

generated/code/calculator/5-role-zero_shot/iteration_10/claude.py:74: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_unmatched_parentheses
========================= 5 failed, 83 passed in 0.24s =========================
