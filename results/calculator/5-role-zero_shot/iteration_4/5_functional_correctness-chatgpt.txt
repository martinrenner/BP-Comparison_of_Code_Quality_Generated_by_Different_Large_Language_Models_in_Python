Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-chatgpt.py . [  1%]
.............FF......................................................... [ 82%]
...............                                                          [100%]

=================================== FAILURES ===================================
____________________________ test_subtract_negative ____________________________

self = <chatgpt.Calculator object at 0x1072ac980>

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor based on the grammar:
            factor -> '-' factor | '(' expression ')' | number
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            ValueError: If the factor's syntax is invalid.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression")
    
        # Handle unary minus
        if token == '-':
            self._advance()
            return -self._parse_factor()
    
        # Handle parentheses
        if token == '(':
            self._advance()
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unmatched '(' in expression")
            self._advance()
            return result
    
        # The token should be a number
        try:
>           value = float(token)
E           ValueError: could not convert string to float: '+'

generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:158: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x1072ac980>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-chatgpt.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:31: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:96: in _parse_expression
    right = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:114: in _parse_term
    result = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1072ac980>

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor based on the grammar:
            factor -> '-' factor | '(' expression ')' | number
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            ValueError: If the factor's syntax is invalid.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression")
    
        # Handle unary minus
        if token == '-':
            self._advance()
            return -self._parse_factor()
    
        # Handle parentheses
        if token == '(':
            self._advance()
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unmatched '(' in expression")
            self._advance()
            return result
    
        # The token should be a number
        try:
            value = float(token)
        except ValueError:
>           raise ValueError(f"Invalid number token: {token}")
E           ValueError: Invalid number token: +

generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:160: ValueError
_________________________ test_subtract_negative_float _________________________

self = <chatgpt.Calculator object at 0x1072a9dc0>

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor based on the grammar:
            factor -> '-' factor | '(' expression ')' | number
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            ValueError: If the factor's syntax is invalid.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression")
    
        # Handle unary minus
        if token == '-':
            self._advance()
            return -self._parse_factor()
    
        # Handle parentheses
        if token == '(':
            self._advance()
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unmatched '(' in expression")
            self._advance()
            return result
    
        # The token should be a number
        try:
>           value = float(token)
E           ValueError: could not convert string to float: '+'

generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:158: ValueError

During handling of the above exception, another exception occurred:

calc = <chatgpt.Calculator object at 0x1072a9dc0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-chatgpt.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:31: in calculate
    result = self._parse_expression()
generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:96: in _parse_expression
    right = self._parse_term()
generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:114: in _parse_term
    result = self._parse_factor()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.Calculator object at 0x1072a9dc0>

    def _parse_factor(self) -> float:
        """
        Parse and evaluate a factor based on the grammar:
            factor -> '-' factor | '(' expression ')' | number
    
        Returns:
            float: The evaluated result of the factor.
    
        Raises:
            ValueError: If the factor's syntax is invalid.
        """
        token = self._current_token()
        if token is None:
            raise ValueError("Unexpected end of expression")
    
        # Handle unary minus
        if token == '-':
            self._advance()
            return -self._parse_factor()
    
        # Handle parentheses
        if token == '(':
            self._advance()
            result = self._parse_expression()
            if self._current_token() != ')':
                raise ValueError("Unmatched '(' in expression")
            self._advance()
            return result
    
        # The token should be a number
        try:
            value = float(token)
        except ValueError:
>           raise ValueError(f"Invalid number token: {token}")
E           ValueError: Invalid number token: +

generated/code/calculator/5-role-zero_shot/iteration_4/chatgpt.py:160: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-chatgpt.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-chatgpt.py::test_subtract_negative_float
========================= 2 failed, 86 passed in 0.21s =========================
