Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py . [  1%]
...F.....FFFFFFFFFF..................FFFFFFFF..................FFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x104c6cf80>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
        assert calc.calculate("-1+2") == 1
        assert calc.calculate("-1+-2") == -3
        assert calc.calculate("-1000000000+2000000000") == 1000000000
>       assert calc.calculate("999999999999999-1") == 999999999999998

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6cf80>
parsed_expression = [999999999999999.0, -1.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
____________________________ test_subtract_positive ____________________________

calc = <gemini.Calculator object at 0x104c6b9e0>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6b9e0>
parsed_expression = [5.0, -3.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________________ test_subtract_positive_float _________________________

calc = <gemini.Calculator object at 0x104c6f1a0>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6f1a0>
parsed_expression = [5.5, -3.5]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x104c68890>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c68890>
parsed_expression = [5.0, -3.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x104c6ad20>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6ad20>
parsed_expression = [5.5, -3.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
____________________________ test_subtract_negative ____________________________

self = <gemini.Calculator object at 0x104c6a8a0>
parsed_expression = [5.0, '-', 3.0, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x104c6a8a0>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6a8a0>
parsed_expression = [5.0, '-', 3.0, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise ValueError("Invalid Expression: Insufficient Operands")
E                   ValueError: Invalid Expression: Insufficient Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:141: ValueError
_________________________ test_subtract_negative_float _________________________

self = <gemini.Calculator object at 0x104c69eb0>
parsed_expression = [5.5, '-', 3.5, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x104c69eb0>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c69eb0>
parsed_expression = [5.5, '-', 3.5, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise ValueError("Invalid Expression: Insufficient Operands")
E                   ValueError: Invalid Expression: Insufficient Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:141: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x104c68200>

    def test_subtract_negative_parentheses(calc):
        assert calc.calculate("5-(-3)") == 8
>       assert calc.calculate("(-5)-3") == -8

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c68200>
parsed_expression = [-5.0, -3.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x104c69760>

    def test_subtract_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-3)") == 8.5
>       assert calc.calculate("(-5.5)-3") == -8.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c69760>
parsed_expression = [-5.5, -3.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
____________________________ test_subtract_neutral _____________________________

calc = <gemini.Calculator object at 0x104c6a210>

    def test_subtract_neutral(calc):
>       assert calc.calculate("0-0") == 0

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6a210>
parsed_expression = [0.0, -0.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________________ test_subtract_neutral_float __________________________

calc = <gemini.Calculator object at 0x104c6a750>

    def test_subtract_neutral_float(calc):
>       assert calc.calculate("0.0-0.0") == 0

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6a750>
parsed_expression = [0.0, -0.0]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_____________________________ test_divide_neutral ______________________________

calc = <gemini.Calculator object at 0x104c233b0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c233b0>
parsed_expression = [5.0, 0.0, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:151: ValueError
__________________________ test_divide_neutral_float ___________________________

calc = <gemini.Calculator object at 0x104c22a50>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c22a50>
parsed_expression = [5.0, 0.0, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
>                       raise ValueError("Division by zero")
E                       ValueError: Division by zero

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:151: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x104c23890>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c23890>
parsed_expression = [5.0, 2.0, -3.0, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x104c6ab70>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6ab70>
parsed_expression = [5.5, 2.5, -3.5, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x105fe4b60>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe4b60>
parsed_expression = [5.0, 2.0, -3.0, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x105fe5790>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe5790>
parsed_expression = [5.5, 2.0, -3.0, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x105fe6450>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe6450>
parsed_expression = [5.0, -2.0, -3.0, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x105fe73b0>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe73b0>
parsed_expression = [5.5, -2.5, -3.5, '+']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x105fc30b0>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fc30b0>
parsed_expression = [5.0, -2.0, 3.0, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x105fc2300>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fc2300>
parsed_expression = [5.5, -2.5, 3.5, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x105fe78c0>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe78c0>
parsed_expression = [5.0, -2.0, 3.0, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x105fe78f0>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe78f0>
parsed_expression = [5.5, -2.0, 3.0, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x105fe4f50>

    def test_subtract_divide_negative_parentheses(calc):
        assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)
>       assert calc.calculate("(-5)-2/3") == pytest.approx(-5.66666666, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:631: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe4f50>
parsed_expression = [-5.0, -2.0, 3.0, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x105fc1190>

    def test_subtract_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)
>       assert calc.calculate("(-5.5)-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fc1190>
parsed_expression = [-5.5, -2.5, 3.5, '/']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x104c69490>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:657: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c69490>
parsed_expression = [5.0, -2.0, 3.0, '*']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x104c69df0>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:668: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c69df0>
parsed_expression = [5.5, -2.5, 3.5, '*']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x104c6bbc0>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c6bbc0>
parsed_expression = [5.0, -2.0, 3.0, '*']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x105fc12e0>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fc12e0>
parsed_expression = [5.5, -2.0, 3.0, '*']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x105fe47d0>

    def test_subtract_multiply_negative_parentheses(calc):
        assert calc.calculate("5-(-2)*3") == 11
>       assert calc.calculate("(-5)-2*3") == -11

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe47d0>
parsed_expression = [-5.0, -2.0, 3.0, '*']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x105fe65d0>

    def test_subtract_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)*3.5") == 14.25
>       assert calc.calculate("(-5.5)-2.5*3.5") == -14.25

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe65d0>
parsed_expression = [-5.5, -2.5, 3.5, '*']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x104c21520>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c21520>
parsed_expression = [5.0, 2.0, 3.0, -4.0, '*', 2.0, ...]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
___________________________ test_general_parentheses ___________________________

self = <gemini.Calculator object at 0x104c22510>
parsed_expression = [5.0, 2.0, '+', 3.0, '*', '-']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x104c22510>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x104c22510>
parsed_expression = [5.0, 2.0, '+', 3.0, '*', '-']

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise ValueError("Invalid Expression: Insufficient Operands")
E                   ValueError: Invalid Expression: Insufficient Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:141: ValueError
___________________________ test_nested_parentheses ____________________________

self = <gemini.Calculator object at 0x105fe6d20>
parsed_expression = [2.0, 3.0, '+', 2.0, 3.0, '+', ...]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
>                   operand1 = stack.pop()
E                   IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:139: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x105fe6d20>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fe6d20>
parsed_expression = [2.0, 3.0, '+', 2.0, 3.0, '+', ...]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
>                   raise ValueError("Invalid Expression: Insufficient Operands")
E                   ValueError: Invalid Expression: Insufficient Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:141: ValueError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x105fc2de0>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:29: in calculate
    result = self._evaluate(parsed_expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105fc2de0>
parsed_expression = [-100.0, -100.0, -100.0, -100.0, -100.0, -100.0, ...]

    def _evaluate(self, parsed_expression: list) -> float:
        """
        Evaluates the parsed expression (in Reverse Polish Notation).
    
        Args:
           parsed_expression: output from _parse
    
        Returns:
           Result of the expression
    
        Raises:
            ValueError: If the expression is invalid (e.g. division by zero)
        """
        stack = []
        for token in parsed_expression:
            if isinstance(token, float):
                stack.append(token)
            else:  # It's an operator
                try:
                    operand2 = stack.pop()
                    operand1 = stack.pop()
                except IndexError:
                    raise ValueError("Invalid Expression: Insufficient Operands")
    
                if token == '+':
                    result = operand1 + operand2
                elif token == '-':
                    result = operand1 - operand2
                elif token == '*':
                    result = operand1 * operand2
                elif token == '/':
                    if operand2 == 0:
                        raise ValueError("Division by zero")
                    result = operand1 / operand2
                stack.append(result)
    
        if len(stack) != 1:
>           raise ValueError("Invalid Expression: Too Many Operands")
E           ValueError: Invalid Expression: Too Many Operands

generated/code/calculator/5-role-zero_shot/iteration_4/gemini.py:156: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_positive
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-gemini.py::test_long_expression
======================== 35 failed, 53 passed in 0.48s =========================
