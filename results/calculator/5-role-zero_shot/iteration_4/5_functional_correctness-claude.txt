Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py . [  1%]
...FF........FF........FFF.FF....FFFF........FF..FFFF..........FF....FF. [ 82%]
...FFF.....FFFF                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <claude.Calculator object at 0x1064fc5c0>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fc5c0>, expression = '1+-2'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
___________________________ test_add_negative_float ____________________________

calc = <claude.Calculator object at 0x1064fa210>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fa210>, expression = '1.5+-2.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 3

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x106506180>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106506180>, expression = '5-+3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x1064f8470>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f8470>, expression = '5.5-+3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 3

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________________ test_multiply_negative ____________________________

calc = <claude.Calculator object at 0x1064fbb60>

    def test_multiply_negative(calc):
>       assert calc.calculate("2*-3") == -6

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fbb60>, expression = '2*-3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
______________________ test_multiply_negative_parentheses ______________________

calc = <claude.Calculator object at 0x1064f9ca0>

    def test_multiply_negative_parentheses(calc):
        assert calc.calculate("2*(-3)") == -6
        assert calc.calculate("(-2)*3") == -6
        assert calc.calculate("(-2)*(-3)") == 6
        assert calc.calculate("(-1000000000)*(-2000000000)") == 2e18
>       assert calc.calculate("(-999999999999999)*-1") == 999999999999999

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f9ca0>
expression = '(-999999999999999)*-1'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 18

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_________________________ test_multiply_negative_float _________________________

calc = <claude.Calculator object at 0x1064f9a60>

    def test_multiply_negative_float(calc):
>       assert calc.calculate("2.5*-3.5") == -8.75

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:212: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f9a60>, expression = '2.5*-3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 3

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________________ test_multiply_neutral _____________________________

calc = <claude.Calculator object at 0x1064f8980>

    def test_multiply_neutral(calc):
        assert calc.calculate("0*0") == 0
        assert calc.calculate("0*5") == 0
        assert calc.calculate("5*0") == 0
>       assert calc.calculate("0*-5") == 0

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f8980>, expression = '0*-5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_________________________ test_multiply_neutral_float __________________________

calc = <claude.Calculator object at 0x1064f81a0>

    def test_multiply_neutral_float(calc):
        assert calc.calculate("0.0*0.0") == 0
        assert calc.calculate("0.0*5.0") == 0
        assert calc.calculate("5.0*0.0") == 0
>       assert calc.calculate("0.0*-5.0") == 0

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:245: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f81a0>, expression = '0.0*-5.0'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 3

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_____________________________ test_divide_negative _____________________________

calc = <claude.Calculator object at 0x1064f9b80>

    def test_divide_negative(calc):
>       assert calc.calculate("6/-3") == -2

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f9b80>, expression = '6/-3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
__________________________ test_divide_negative_float __________________________

calc = <claude.Calculator object at 0x1064f9e80>

    def test_divide_negative_float(calc):
>       assert calc.calculate("6.5/-3.5") == pytest.approx(-1.8571428, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:289: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f9e80>, expression = '6.5/-3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 3

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_______________________ test_divide_negative_parentheses _______________________

calc = <claude.Calculator object at 0x1064fcc50>

    def test_divide_negative_parentheses(calc):
        assert calc.calculate("6/(-3)") == -2
        assert calc.calculate("(-6)/3") == -2
        assert calc.calculate("(-6)/(-3)") == 2
        assert calc.calculate("(-1000000000)/(-2000000000)") == 0.5
>       assert calc.calculate("(999999999999999)/-1") == -999999999999999

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fcc50>
expression = '(999999999999999)/-1'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 17

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________ test_divide_negative_float_parentheses ____________________

calc = <claude.Calculator object at 0x1064b2750>

    def test_divide_negative_float_parentheses(calc):
        assert calc.calculate("6.5/(-3.5)") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/3.5") == pytest.approx(-1.8571428, rel=1e-6)
        assert calc.calculate("(-6.5)/(-3.5)") == pytest.approx(1.8571428, rel=1e-6)
        assert calc.calculate("(-1000000000)/(-0.5)") == 2000000000
>       assert calc.calculate("(-999999999999999)/-0.1") == pytest.approx(1e16, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:309: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064b2750>
expression = '(-999999999999999)/-0.1'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 18

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
__________________________ test_add_multiply_positive __________________________

calc = <claude.Calculator object at 0x1064b1640>

    def test_add_multiply_positive(calc):
        assert calc.calculate("5+2*3") == 11
        assert calc.calculate("5*2+3") == 13
        assert calc.calculate("-5+2*3") == 1
>       assert calc.calculate("-5*-2+3") == 13

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064b1640>, expression = '-5*-2+3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 2

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_______________________ test_add_multiply_positive_float _______________________

calc = <claude.Calculator object at 0x1064f8230>

    def test_add_multiply_positive_float(calc):
        assert calc.calculate("5.5+2.5*3.5") == 14.25
        assert calc.calculate("5.5*2.5+3.5") == 17.25
        assert calc.calculate("-5.5+2.5*3.5") == 3.25
>       assert calc.calculate("-5.5*-2.5+3.5") == 17.25

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:391: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f8230>, expression = '-5.5*-2.5+3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 4

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________ test_add_multiply_negative_parentheses ____________________

calc = <claude.Calculator object at 0x107853620>

    def test_add_multiply_negative_parentheses(calc):
        assert calc.calculate("5+(-2)*3") == -1
        assert calc.calculate("(-5)+2*3") == 1
        assert calc.calculate("(-5)*(-2)+3") == 13
        assert calc.calculate("(-1000000000)*2000000000+3000000000") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("999999999999999*-1+999999999999999") == 0

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:425: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107853620>
expression = '999999999999999*-1+999999999999999'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 15

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_________________ test_add_multiply_negative_float_parentheses _________________

calc = <claude.Calculator object at 0x107852db0>

    def test_add_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5+(-2.5)*3.5") == -3.25
        assert calc.calculate("(-5.5)+2.5*3.5") == 3.25
        assert calc.calculate("(-5.5)*(-2.5)+3.5") == 17.25
        assert calc.calculate("(-1000000000.5)*2000000000+(3000000000.5)") == pytest.approx(
            -2e18, rel=1e-6
        )
>       assert calc.calculate("(999999999999999.5)*-1+999999999999999") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107852db0>
expression = '(999999999999999.5)*-1+999999999999999'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 19

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_______________________________ test_add_divide ________________________________

calc = <claude.Calculator object at 0x1078523c0>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
        assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)
>       assert calc.calculate("-5+-2/3") == pytest.approx(-5.6666666, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1078523c0>, expression = '-5+-2/3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 2

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________________ test_add_divide_float _____________________________

calc = <claude.Calculator object at 0x1078519d0>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
        assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)
>       assert calc.calculate("-5.5+-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:456: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1078519d0>, expression = '-5.5+-2.5/3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 4

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_____________________________ test_subtract_divide _____________________________

calc = <claude.Calculator object at 0x107850530>

    def test_subtract_divide(calc):
        assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)
        assert calc.calculate("5/2-3") == pytest.approx(-0.5, rel=1e-6)
        assert calc.calculate("-5-2/3") == pytest.approx(-5.666666666, rel=1e-6)
>       assert calc.calculate("-5/-2/3") == pytest.approx(0.833333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:583: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107850530>, expression = '-5/-2/3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 2

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
__________________________ test_subtract_divide_float __________________________

calc = <claude.Calculator object at 0x1064f9cd0>

    def test_subtract_divide_float(calc):
        assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)
        assert calc.calculate("5.5/2.5-3.5") == pytest.approx(-1.3, rel=1e-6)
        assert calc.calculate("-5.5-2.5/3.5") == pytest.approx(-6.21428571, rel=1e-6)
>       assert calc.calculate("-5.5/-2.5/3.5") == pytest.approx(0.628571428, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064f9cd0>, expression = '-5.5/-2.5/3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 4

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
____________________________ test_subtract_multiply ____________________________

calc = <claude.Calculator object at 0x1064fa000>

    def test_subtract_multiply(calc):
        assert calc.calculate("5-2*3") == -1
        assert calc.calculate("5*2-3") == 7
        assert calc.calculate("-5-2*3") == -11
>       assert calc.calculate("-5*-2*3") == 30

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:660: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fa000>, expression = '-5*-2*3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 2

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_________________________ test_subtract_multiply_float _________________________

calc = <claude.Calculator object at 0x107851af0>

    def test_subtract_multiply_float(calc):
        assert calc.calculate("5.5-2.5*3.5") == -3.25
        assert calc.calculate("5.5*2.5-3.5") == 10.25
        assert calc.calculate("-5.5-2.5*3.5") == -14.25
>       assert calc.calculate("-5.5*-2.5*3.5") == pytest.approx(48.125, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:671: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107851af0>, expression = '-5.5*-2.5*3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 4

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_____________________________ test_all_operations ______________________________

calc = <claude.Calculator object at 0x107851910>

    def test_all_operations(calc):
        assert calc.calculate("5+2*3-4/2") == 9
        assert calc.calculate("5-2/3*4+1") == pytest.approx(3.3333333, rel=1e-6)
        assert calc.calculate("-5*2+3/3") == -9
>       assert calc.calculate("-5*-2/3+5") == pytest.approx(8.33333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:725: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107851910>, expression = '-5*-2/3+5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 2

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x107853290>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:48: in calculate
    return self._evaluate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107853290>, expression = '-(5+2)*3'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluate the given expression using the Shunting Yard algorithm.
    
        Args:
            expression: The expression to evaluate
    
        Returns:
            float: The result of evaluating the expression
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression cannot be evaluated
        """
        # Implement Shunting Yard algorithm
        # Convert infix notation to postfix notation, then evaluate
        output_queue = []  # Output queue for the postfix expression
        operator_stack = []  # Stack for operators and parentheses
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            # Process numbers (including multi-digit and decimal numbers)
            if char.isdigit() or (char == '.' and i + 1 < len(expression) and expression[i + 1].isdigit()):
                # Handle negative numbers
                if char == '-' and (i == 0 or expression[i-1] == '('):
                    start = i
                    i += 1
                    while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                        i += 1
                    try:
                        output_queue.append(float(expression[start:i]))
                    except ValueError:
                        raise ValueError(f"Invalid number format: {expression[start:i]}")
                    continue
    
                # Handle regular numbers
                start = i
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    i += 1
                try:
                    output_queue.append(float(expression[start:i]))
                except ValueError:
                    raise ValueError(f"Invalid number format: {expression[start:i]}")
                continue
    
            # Process negative numbers at the beginning or after an open parenthesis
            if char == '-' and (i == 0 or expression[i-1] == '('):
                start = i
                i += 1
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    i += 1
                if i > start + 1:  # Make sure we have digits after the minus sign
                    try:
                        output_queue.append(float(expression[start:i]))
                    except ValueError:
                        raise ValueError(f"Invalid number format: {expression[start:i]}")
                    continue
                # If not followed by digits, treat as a unary operator
                # (handled as binary operator with 0 as first operand)
                output_queue.append(0.0)
                operator_stack.append(char)
                i += 1
                continue
    
            # Process operators
            if char in self.operators:
                while (operator_stack and operator_stack[-1] != '(' and
                       self.operators.get(operator_stack[-1], 0) >= self.operators.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            # Process open parenthesis
            elif char == '(':
                operator_stack.append(char)
    
            # Process close parenthesis
            elif char == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
    
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Remove the open parenthesis
                else:
>                   raise SyntaxError("Unbalanced parentheses")
E                   SyntaxError: Unbalanced parentheses

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:174: SyntaxError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1064fe780>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:48: in calculate
    return self._evaluate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fe780>
expression = '-((2+3)*((2+3)*2))'

    def _evaluate_expression(self, expression: str) -> float:
        """
        Evaluate the given expression using the Shunting Yard algorithm.
    
        Args:
            expression: The expression to evaluate
    
        Returns:
            float: The result of evaluating the expression
    
        Raises:
            ZeroDivisionError: If division by zero is attempted
            ValueError: If the expression cannot be evaluated
        """
        # Implement Shunting Yard algorithm
        # Convert infix notation to postfix notation, then evaluate
        output_queue = []  # Output queue for the postfix expression
        operator_stack = []  # Stack for operators and parentheses
    
        i = 0
        while i < len(expression):
            char = expression[i]
    
            # Process numbers (including multi-digit and decimal numbers)
            if char.isdigit() or (char == '.' and i + 1 < len(expression) and expression[i + 1].isdigit()):
                # Handle negative numbers
                if char == '-' and (i == 0 or expression[i-1] == '('):
                    start = i
                    i += 1
                    while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                        i += 1
                    try:
                        output_queue.append(float(expression[start:i]))
                    except ValueError:
                        raise ValueError(f"Invalid number format: {expression[start:i]}")
                    continue
    
                # Handle regular numbers
                start = i
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    i += 1
                try:
                    output_queue.append(float(expression[start:i]))
                except ValueError:
                    raise ValueError(f"Invalid number format: {expression[start:i]}")
                continue
    
            # Process negative numbers at the beginning or after an open parenthesis
            if char == '-' and (i == 0 or expression[i-1] == '('):
                start = i
                i += 1
                while i < len(expression) and (expression[i].isdigit() or expression[i] == '.'):
                    i += 1
                if i > start + 1:  # Make sure we have digits after the minus sign
                    try:
                        output_queue.append(float(expression[start:i]))
                    except ValueError:
                        raise ValueError(f"Invalid number format: {expression[start:i]}")
                    continue
                # If not followed by digits, treat as a unary operator
                # (handled as binary operator with 0 as first operand)
                output_queue.append(0.0)
                operator_stack.append(char)
                i += 1
                continue
    
            # Process operators
            if char in self.operators:
                while (operator_stack and operator_stack[-1] != '(' and
                       self.operators.get(operator_stack[-1], 0) >= self.operators.get(char, 0)):
                    output_queue.append(operator_stack.pop())
                operator_stack.append(char)
    
            # Process open parenthesis
            elif char == '(':
                operator_stack.append(char)
    
            # Process close parenthesis
            elif char == ')':
                while operator_stack and operator_stack[-1] != '(':
                    output_queue.append(operator_stack.pop())
    
                if operator_stack and operator_stack[-1] == '(':
                    operator_stack.pop()  # Remove the open parenthesis
                else:
>                   raise SyntaxError("Unbalanced parentheses")
E                   SyntaxError: Unbalanced parentheses

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:174: SyntaxError
____________________________ test_empty_parentheses ____________________________

calc = <claude.Calculator object at 0x1078531a0>

    def test_empty_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("()")

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1078531a0>, expression = '()'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
                raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
    
        # Check for empty parentheses
        if "()" in expression:
>           raise SyntaxError("Empty parentheses are not allowed")
E           SyntaxError: Empty parentheses are not allowed

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:87: SyntaxError
__________________________ test_unmatched_parentheses __________________________

calc = <claude.Calculator object at 0x107851a60>

    def test_unmatched_parentheses(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5*(2+3")

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:798: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x107851a60>, expression = '5*(2+3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
>           raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
E           SyntaxError: Unbalanced parentheses: too many opening parentheses

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:72: SyntaxError
__________________________ test_invalid_double_slash ___________________________

calc = <claude.Calculator object at 0x1064fa120>

    def test_invalid_double_slash(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5//2")

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:803: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064fa120>, expression = '5//2'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
_________________________ test_invalid_exponentiation __________________________

calc = <claude.Calculator object at 0x1064b2e40>

    def test_invalid_exponentiation(calc):
        with pytest.raises(ValueError):
>           calc.calculate("5**2")

generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:45: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1064b2e40>, expression = '5**2'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate that the expression is well-formed.
    
        Args:
            expression: The expression to validate
    
        Raises:
            ValueError: If the expression contains invalid characters
            SyntaxError: If the expression has unbalanced parentheses or other syntax errors
        """
        # Check for balanced parentheses
        parentheses_count = 0
        for char in expression:
            if char == '(':
                parentheses_count += 1
            elif char == ')':
                parentheses_count -= 1
                if parentheses_count < 0:
                    raise SyntaxError("Unbalanced parentheses: too many closing parentheses")
    
        if parentheses_count > 0:
            raise SyntaxError("Unbalanced parentheses: too many opening parentheses")
    
        # Validate characters in the expression
        valid_chars = set("0123456789.+-*/() ")
        for char in expression:
            if char not in valid_chars:
                raise ValueError(f"Invalid character in expression: '{char}'")
    
        # Check for syntax errors like consecutive operators
        for i in range(len(expression) - 1):
            if (expression[i] in self.operators and expression[i+1] in self.operators):
>               raise SyntaxError(f"Invalid syntax: consecutive operators at position {i}")
E               SyntaxError: Invalid syntax: consecutive operators at position 1

generated/code/calculator/5-role-zero_shot/iteration_4/claude.py:83: SyntaxError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_multiply_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_multiply_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_multiply_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_multiply_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_divide_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_divide_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_divide_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_divide_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_multiply_positive
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_multiply_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_multiply_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_subtract_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_subtract_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_subtract_multiply
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_subtract_multiply_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_all_operations
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_nested_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_empty_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_unmatched_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_invalid_double_slash
FAILED generated/code/calculator/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_invalid_exponentiation
======================== 30 failed, 58 passed in 0.46s =========================
