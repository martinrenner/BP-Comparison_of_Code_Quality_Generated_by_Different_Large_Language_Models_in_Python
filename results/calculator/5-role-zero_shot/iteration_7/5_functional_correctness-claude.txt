Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py . [  1%]
...FF........FF....................................FF................... [ 82%]
....FF.........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <claude.Calculator object at 0x106819250>

    def test_add_negative(calc):
>       assert calc.calculate("1+-2") == -1

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:49: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106819250>, expression = '1+-2'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate the input expression for syntax errors.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression is invalid.
        """
        if not expression or expression.isspace():
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        open_count = 0
        for char in expression:
            if char == '(':
                open_count += 1
            elif char == ')':
                open_count -= 1
                if open_count < 0:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
    
        if open_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for valid characters
        valid_char_pattern = r'^[\d\s\+\-\*\/\(\)\.]+$'
        if not re.match(valid_char_pattern, expression):
            raise ValueError("Expression contains invalid characters")
    
        # Check for invalid operator sequences like "++", "*/", etc.
        invalid_sequences = ['++', '--', '**', '//', '+-', '-+', '*+', '/+',
                             '*-', '/-', '+*', '-*', '+/', '-/', '()', '(*',
                             '(/', '(+', '(-', '*)', '/)', '+)', '-)', '*/']
    
        for seq in invalid_sequences:
            if seq in expression:
                # Special case for negative numbers after operators or at beginning
                if seq in ['-+', '--', '*-', '/-', '(-'] and seq != expression.strip():
                    continue
>               raise ValueError(f"Invalid operator sequence: {seq}")
E               ValueError: Invalid operator sequence: +-

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:98: ValueError
___________________________ test_add_negative_float ____________________________

calc = <claude.Calculator object at 0x106816210>

    def test_add_negative_float(calc):
>       assert calc.calculate("1.5+-2.5") == -1

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:49: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106816210>, expression = '1.5+-2.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate the input expression for syntax errors.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression is invalid.
        """
        if not expression or expression.isspace():
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        open_count = 0
        for char in expression:
            if char == '(':
                open_count += 1
            elif char == ')':
                open_count -= 1
                if open_count < 0:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
    
        if open_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for valid characters
        valid_char_pattern = r'^[\d\s\+\-\*\/\(\)\.]+$'
        if not re.match(valid_char_pattern, expression):
            raise ValueError("Expression contains invalid characters")
    
        # Check for invalid operator sequences like "++", "*/", etc.
        invalid_sequences = ['++', '--', '**', '//', '+-', '-+', '*+', '/+',
                             '*-', '/-', '+*', '-*', '+/', '-/', '()', '(*',
                             '(/', '(+', '(-', '*)', '/)', '+)', '-)', '*/']
    
        for seq in invalid_sequences:
            if seq in expression:
                # Special case for negative numbers after operators or at beginning
                if seq in ['-+', '--', '*-', '/-', '(-'] and seq != expression.strip():
                    continue
>               raise ValueError(f"Invalid operator sequence: {seq}")
E               ValueError: Invalid operator sequence: +-

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:98: ValueError
____________________________ test_subtract_negative ____________________________

calc = <claude.Calculator object at 0x10681d220>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:55: in calculate
    return self._evaluate_expression(tokens)
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:185: in _evaluate_expression
    self._apply_operator(output_queue, operator_stack.pop())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x10681d220>, output_queue = [5.0]
operator = '-'

    def _apply_operator(self, output_queue: List[float], operator: str) -> None:
        """
        Apply an operator to the top values in the output queue.
    
        Args:
            output_queue (list): The output queue of numbers.
            operator (str): The operator to apply.
    
        Raises:
            ValueError: If there are not enough operands for the operator.
            ZeroDivisionError: If division by zero is attempted.
        """
        if len(output_queue) < 2:
>           raise ValueError(f"Not enough operands for operator: {operator}")
E           ValueError: Not enough operands for operator: -

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:226: ValueError
_________________________ test_subtract_negative_float _________________________

calc = <claude.Calculator object at 0x106816420>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:55: in calculate
    return self._evaluate_expression(tokens)
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:185: in _evaluate_expression
    self._apply_operator(output_queue, operator_stack.pop())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106816420>, output_queue = [5.5]
operator = '-'

    def _apply_operator(self, output_queue: List[float], operator: str) -> None:
        """
        Apply an operator to the top values in the output queue.
    
        Args:
            output_queue (list): The output queue of numbers.
            operator (str): The operator to apply.
    
        Raises:
            ValueError: If there are not enough operands for the operator.
            ZeroDivisionError: If division by zero is attempted.
        """
        if len(output_queue) < 2:
>           raise ValueError(f"Not enough operands for operator: {operator}")
E           ValueError: Not enough operands for operator: -

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:226: ValueError
_______________________________ test_add_divide ________________________________

calc = <claude.Calculator object at 0x106815a00>

    def test_add_divide(calc):
        assert calc.calculate("5+2/3") == pytest.approx(5.6666666, rel=1e-6)
        assert calc.calculate("5/2+3") == pytest.approx(5.5, rel=1e-6)
        assert calc.calculate("-5+2/3") == pytest.approx(-4.33333333, rel=1e-6)
>       assert calc.calculate("-5+-2/3") == pytest.approx(-5.6666666, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:445: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:49: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106815a00>, expression = '-5+-2/3'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate the input expression for syntax errors.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression is invalid.
        """
        if not expression or expression.isspace():
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        open_count = 0
        for char in expression:
            if char == '(':
                open_count += 1
            elif char == ')':
                open_count -= 1
                if open_count < 0:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
    
        if open_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for valid characters
        valid_char_pattern = r'^[\d\s\+\-\*\/\(\)\.]+$'
        if not re.match(valid_char_pattern, expression):
            raise ValueError("Expression contains invalid characters")
    
        # Check for invalid operator sequences like "++", "*/", etc.
        invalid_sequences = ['++', '--', '**', '//', '+-', '-+', '*+', '/+',
                             '*-', '/-', '+*', '-*', '+/', '-/', '()', '(*',
                             '(/', '(+', '(-', '*)', '/)', '+)', '-)', '*/']
    
        for seq in invalid_sequences:
            if seq in expression:
                # Special case for negative numbers after operators or at beginning
                if seq in ['-+', '--', '*-', '/-', '(-'] and seq != expression.strip():
                    continue
>               raise ValueError(f"Invalid operator sequence: {seq}")
E               ValueError: Invalid operator sequence: +-

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:98: ValueError
____________________________ test_add_divide_float _____________________________

calc = <claude.Calculator object at 0x106814ef0>

    def test_add_divide_float(calc):
        assert calc.calculate("5.5+2.5/3.5") == pytest.approx(6.21428571, rel=1e-6)
        assert calc.calculate("5.5/2.5+3.5") == pytest.approx(5.7, rel=1e-6)
        assert calc.calculate("-5.5+2.5/3.5") == pytest.approx(-4.7857142, rel=1e-6)
>       assert calc.calculate("-5.5+-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:456: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:49: in calculate
    self._validate_expression(expression)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106814ef0>, expression = '-5.5+-2.5/3.5'

    def _validate_expression(self, expression: str) -> None:
        """
        Validate the input expression for syntax errors.
    
        Args:
            expression (str): The expression to validate.
    
        Raises:
            ValueError: If the expression is invalid.
        """
        if not expression or expression.isspace():
            raise ValueError("Expression cannot be empty")
    
        # Check for balanced parentheses
        open_count = 0
        for char in expression:
            if char == '(':
                open_count += 1
            elif char == ')':
                open_count -= 1
                if open_count < 0:
                    raise ValueError("Unbalanced parentheses: too many closing parentheses")
    
        if open_count > 0:
            raise ValueError("Unbalanced parentheses: missing closing parentheses")
    
        # Check for valid characters
        valid_char_pattern = r'^[\d\s\+\-\*\/\(\)\.]+$'
        if not re.match(valid_char_pattern, expression):
            raise ValueError("Expression contains invalid characters")
    
        # Check for invalid operator sequences like "++", "*/", etc.
        invalid_sequences = ['++', '--', '**', '//', '+-', '-+', '*+', '/+',
                             '*-', '/-', '+*', '-*', '+/', '-/', '()', '(*',
                             '(/', '(+', '(-', '*)', '/)', '+)', '-)', '*/']
    
        for seq in invalid_sequences:
            if seq in expression:
                # Special case for negative numbers after operators or at beginning
                if seq in ['-+', '--', '*-', '/-', '(-'] and seq != expression.strip():
                    continue
>               raise ValueError(f"Invalid operator sequence: {seq}")
E               ValueError: Invalid operator sequence: +-

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:98: ValueError
___________________________ test_general_parentheses ___________________________

calc = <claude.Calculator object at 0x106814170>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:55: in calculate
    return self._evaluate_expression(tokens)
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:205: in _evaluate_expression
    self._apply_operator(output_queue, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x106814170>, output_queue = [21.0]
operator = '-'

    def _apply_operator(self, output_queue: List[float], operator: str) -> None:
        """
        Apply an operator to the top values in the output queue.
    
        Args:
            output_queue (list): The output queue of numbers.
            operator (str): The operator to apply.
    
        Raises:
            ValueError: If there are not enough operands for the operator.
            ZeroDivisionError: If division by zero is attempted.
        """
        if len(output_queue) < 2:
>           raise ValueError(f"Not enough operands for operator: {operator}")
E           ValueError: Not enough operands for operator: -

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:226: ValueError
___________________________ test_nested_parentheses ____________________________

calc = <claude.Calculator object at 0x1067ceed0>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:55: in calculate
    return self._evaluate_expression(tokens)
generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:205: in _evaluate_expression
    self._apply_operator(output_queue, op)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.Calculator object at 0x1067ceed0>, output_queue = [50.0]
operator = '-'

    def _apply_operator(self, output_queue: List[float], operator: str) -> None:
        """
        Apply an operator to the top values in the output queue.
    
        Args:
            output_queue (list): The output queue of numbers.
            operator (str): The operator to apply.
    
        Raises:
            ValueError: If there are not enough operands for the operator.
            ZeroDivisionError: If division by zero is attempted.
        """
        if len(output_queue) < 2:
>           raise ValueError(f"Not enough operands for operator: {operator}")
E           ValueError: Not enough operands for operator: -

generated/code/calculator/5-role-zero_shot/iteration_7/claude.py:226: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_7/5_functional_correctness-claude.py::test_nested_parentheses
========================= 8 failed, 80 passed in 0.52s =========================
