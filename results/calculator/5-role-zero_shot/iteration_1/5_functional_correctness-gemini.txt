Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 88 items

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py . [  1%]
...F.....FFFFFFFFFF..................FFFFFFFF..................FFFFFFFFF [ 82%]
FFFFFFF........                                                          [100%]

=================================== FAILURES ===================================
______________________________ test_add_negative _______________________________

calc = <gemini.Calculator object at 0x105eb9790>

    def test_add_negative(calc):
        assert calc.calculate("1+-2") == -1
        assert calc.calculate("-1+2") == 1
        assert calc.calculate("-1+-2") == -3
        assert calc.calculate("-1000000000+2000000000") == 1000000000
>       assert calc.calculate("999999999999999-1") == 999999999999998

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb9790>
tokens = ['999999999999999', '-1']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
____________________________ test_subtract_positive ____________________________

calc = <gemini.Calculator object at 0x105eb89b0>

    def test_subtract_positive(calc):
>       assert calc.calculate("5-3") == 2

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb89b0>, tokens = ['5', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________________ test_subtract_positive_float _________________________

calc = <gemini.Calculator object at 0x105eb9a30>

    def test_subtract_positive_float(calc):
>       assert calc.calculate("5.5-3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb9a30>, tokens = ['5.5', '-3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
______________________ test_subtract_positive_parentheses ______________________

calc = <gemini.Calculator object at 0x105eb53a0>

    def test_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)-3") == 2

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb53a0>, tokens = ['(', '5', ')', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
___________________ test_subtract_positive_float_parentheses ___________________

calc = <gemini.Calculator object at 0x105eb7920>

    def test_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-3") == 2.5

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb7920>
tokens = ['(', '5.5', ')', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
____________________________ test_subtract_negative ____________________________

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
>           left = values.pop()
E           IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:90: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x105eb7890>

    def test_subtract_negative(calc):
>       assert calc.calculate("5-+3") == 2

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:123: in _evaluate_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
                    raise ZeroDivisionError("Division by zero")  # Explicitly check.
                values.append(left / right)
        except IndexError:
>           raise ValueError("Invalid expression: operator/operand mismatch")
E           ValueError: Invalid expression: operator/operand mismatch

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:102: ValueError
_________________________ test_subtract_negative_float _________________________

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
>           left = values.pop()
E           IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:90: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x105eb5a00>

    def test_subtract_negative_float(calc):
>       assert calc.calculate("5.5-+3.5") == 2

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:123: in _evaluate_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
                    raise ZeroDivisionError("Division by zero")  # Explicitly check.
                values.append(left / right)
        except IndexError:
>           raise ValueError("Invalid expression: operator/operand mismatch")
E           ValueError: Invalid expression: operator/operand mismatch

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:102: ValueError
______________________ test_subtract_negative_parentheses ______________________

calc = <gemini.Calculator object at 0x105eb51f0>

    def test_subtract_negative_parentheses(calc):
        assert calc.calculate("5-(-3)") == 8
>       assert calc.calculate("(-5)-3") == -8

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb51f0>
tokens = ['(', '-5', ')', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
___________________ test_subtract_negative_float_parentheses ___________________

calc = <gemini.Calculator object at 0x105eb4380>

    def test_subtract_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-3)") == 8.5
>       assert calc.calculate("(-5.5)-3") == -8.5

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb4380>
tokens = ['(', '-5.5', ')', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
____________________________ test_subtract_neutral _____________________________

calc = <gemini.Calculator object at 0x105eb71a0>

    def test_subtract_neutral(calc):
>       assert calc.calculate("0-0") == 0

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb71a0>, tokens = ['0', '-0']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________________ test_subtract_neutral_float __________________________

calc = <gemini.Calculator object at 0x105eb6f30>

    def test_subtract_neutral_float(calc):
>       assert calc.calculate("0.0-0.0") == 0

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb6f30>, tokens = ['0.0', '-0.0']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_____________________________ test_divide_neutral ______________________________

self = <gemini.Calculator object at 0x105e6ebd0>, expression = '5/0'

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression and returns the result.
    
        Args:
            expression: The arithmetic expression as a string.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
        """
        try:
>           return self._evaluate_expression(self._tokenize(expression))

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:129: in _evaluate_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
>                   raise ZeroDivisionError("Division by zero")  # Explicitly check.
E                   ZeroDivisionError: Division by zero

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:99: ZeroDivisionError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x105e6ebd0>

    def test_divide_neutral(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5/0")

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105e6ebd0>, expression = '5/0'

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression and returns the result.
    
        Args:
            expression: The arithmetic expression as a string.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
        """
        try:
            return self._evaluate_expression(self._tokenize(expression))
        except ZeroDivisionError:
>           raise ValueError("Division by zero error.")
E           ValueError: Division by zero error.

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:28: ValueError
__________________________ test_divide_neutral_float ___________________________

self = <gemini.Calculator object at 0x105e6ed20>, expression = '5.0/0.0'

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression and returns the result.
    
        Args:
            expression: The arithmetic expression as a string.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
        """
        try:
>           return self._evaluate_expression(self._tokenize(expression))

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:129: in _evaluate_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
>                   raise ZeroDivisionError("Division by zero")  # Explicitly check.
E                   ZeroDivisionError: Division by zero

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:99: ZeroDivisionError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x105e6ed20>

    def test_divide_neutral_float(calc):
        with pytest.raises(ZeroDivisionError):
>           calc.calculate("5.0/0.0")

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:321: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105e6ed20>, expression = '5.0/0.0'

    def calculate(self, expression: str) -> float:
        """
        Evaluates the given arithmetic expression and returns the result.
    
        Args:
            expression: The arithmetic expression as a string.
    
        Returns:
            The result of the expression as a float.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses,
                        invalid characters, division by zero).
        """
        try:
            return self._evaluate_expression(self._tokenize(expression))
        except ZeroDivisionError:
>           raise ValueError("Division by zero error.")
E           ValueError: Division by zero error.

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:28: ValueError
_____________________ test_add_subtract_positive_negative ______________________

calc = <gemini.Calculator object at 0x105e6ec90>

    def test_add_subtract_positive_negative(calc):
>       assert calc.calculate("5+2-3") == 4

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:328: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105e6ec90>, tokens = ['5', '+', '2', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_______________________ test_add_subtract_positive_float _______________________

calc = <gemini.Calculator object at 0x105eb7c20>

    def test_add_subtract_positive_float(calc):
>       assert calc.calculate("5.5+2.5-3.5") == 4.5

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb7c20>
tokens = ['5.5', '+', '2.5', '-3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
____________________ test_add_subtract_positive_parentheses ____________________

calc = <gemini.Calculator object at 0x107230aa0>

    def test_add_subtract_positive_parentheses(calc):
>       assert calc.calculate("(5)+2-3") == 4

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107230aa0>
tokens = ['(', '5', ')', '+', '2', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________ test_add_subtract_positive_float_parentheses _________________

calc = <gemini.Calculator object at 0x1072317c0>

    def test_add_subtract_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)+2-3") == 4.5

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:350: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1072317c0>
tokens = ['(', '5.5', ')', '+', '2', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
____________________ test_add_subtract_negative_parenhesis _____________________

calc = <gemini.Calculator object at 0x107232180>

    def test_add_subtract_negative_parenhesis(calc):
>       assert calc.calculate("5+(-2)-3") == 0

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:358: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107232180>
tokens = ['5', '+', '(', '-2', ')', '-3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________ test_add_subtract_negative_float_parentheses _________________

calc = <gemini.Calculator object at 0x107233230>

    def test_add_subtract_negative_float_parentheses(calc):
>       assert calc.calculate("5.5+(-2.5)-3.5") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107233230>
tokens = ['5.5', '+', '(', '-2.5', ')', '-3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_____________________________ test_subtract_divide _____________________________

calc = <gemini.Calculator object at 0x10720e9c0>

    def test_subtract_divide(calc):
>       assert calc.calculate("5-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:580: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720e9c0>, tokens = ['5', '-2', '/', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
__________________________ test_subtract_divide_float __________________________

calc = <gemini.Calculator object at 0x10720f500>

    def test_subtract_divide_float(calc):
>       assert calc.calculate("5.5-2.5/3.5") == pytest.approx(4.7857142, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720f500>
tokens = ['5.5', '-2.5', '/', '3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
__________________ test_subtract_divide_positive_parentheses ___________________

calc = <gemini.Calculator object at 0x107233890>

    def test_subtract_divide_positive_parentheses(calc):
>       assert calc.calculate("(5)-2/3") == pytest.approx(4.3333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:606: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107233890>
tokens = ['(', '5', ')', '-2', '/', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_______________ test_subtract_divide_positive_float_parentheses ________________

calc = <gemini.Calculator object at 0x1072315e0>

    def test_subtract_divide_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2/3") == pytest.approx(4.83333333, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:618: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1072315e0>
tokens = ['(', '5.5', ')', '-2', '/', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
__________________ test_subtract_divide_negative_parentheses ___________________

calc = <gemini.Calculator object at 0x107230e60>

    def test_subtract_divide_negative_parentheses(calc):
        assert calc.calculate("5-(-2)/3") == pytest.approx(5.66666666, rel=1e-6)
>       assert calc.calculate("(-5)-2/3") == pytest.approx(-5.66666666, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:631: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107230e60>
tokens = ['(', '-5', ')', '-2', '/', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_______________ test_subtract_divide_negative_float_parentheses ________________

calc = <gemini.Calculator object at 0x10720ee40>

    def test_subtract_divide_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)/3.5") == pytest.approx(6.2142857, rel=1e-6)
>       assert calc.calculate("(-5.5)-2.5/3.5") == pytest.approx(-6.2142857, rel=1e-6)

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:643: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720ee40>
tokens = ['(', '-5.5', ')', '-2.5', '/', '3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
____________________________ test_subtract_multiply ____________________________

calc = <gemini.Calculator object at 0x10720fef0>

    def test_subtract_multiply(calc):
>       assert calc.calculate("5-2*3") == -1

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:657: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720fef0>, tokens = ['5', '-2', '*', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________________ test_subtract_multiply_float _________________________

calc = <gemini.Calculator object at 0x10720cc80>

    def test_subtract_multiply_float(calc):
>       assert calc.calculate("5.5-2.5*3.5") == -3.25

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:668: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720cc80>
tokens = ['5.5', '-2.5', '*', '3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________ test_subtract_multiply_positive_parentheses __________________

calc = <gemini.Calculator object at 0x10720ce30>

    def test_subtract_multiply_positive_parentheses(calc):
>       assert calc.calculate("(5)-2*3") == -1

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:679: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720ce30>
tokens = ['(', '5', ')', '-2', '*', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
______________ test_subtract_multiply_positive_float_parentheses _______________

calc = <gemini.Calculator object at 0x10720e960>

    def test_subtract_multiply_positive_float_parentheses(calc):
>       assert calc.calculate("(5.5)-2*3") == -0.5

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720e960>
tokens = ['(', '5.5', ')', '-2', '*', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_________________ test_subtract_multiply_negative_parentheses __________________

calc = <gemini.Calculator object at 0x107230530>

    def test_subtract_multiply_negative_parentheses(calc):
        assert calc.calculate("5-(-2)*3") == 11
>       assert calc.calculate("(-5)-2*3") == -11

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:700: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x107230530>
tokens = ['(', '-5', ')', '-2', '*', '3']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
______________ test_subtract_multiply_negative_float_parentheses _______________

calc = <gemini.Calculator object at 0x1072337a0>

    def test_subtract_multiply_negative_float_parentheses(calc):
        assert calc.calculate("5.5-(-2.5)*3.5") == 14.25
>       assert calc.calculate("(-5.5)-2.5*3.5") == -14.25

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:710: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x1072337a0>
tokens = ['(', '-5.5', ')', '-2.5', '*', '3.5']

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
_____________________________ test_all_operations ______________________________

calc = <gemini.Calculator object at 0x105eb7890>

    def test_all_operations(calc):
>       assert calc.calculate("5+2*3-4/2") == 9

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:722: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x105eb7890>
tokens = ['5', '+', '2', '*', '3', '-4', ...]

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
___________________________ test_general_parentheses ___________________________

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
>           left = values.pop()
E           IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:90: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x105eb6cf0>

    def test_general_parentheses(calc):
        assert calc.calculate("(5+2)*3") == 21
        assert calc.calculate("5*(2+3)") == 25
>       assert calc.calculate("-(5+2)*3") == -21

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:735: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:129: in _evaluate_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
                    raise ZeroDivisionError("Division by zero")  # Explicitly check.
                values.append(left / right)
        except IndexError:
>           raise ValueError("Invalid expression: operator/operand mismatch")
E           ValueError: Invalid expression: operator/operand mismatch

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:102: ValueError
___________________________ test_nested_parentheses ____________________________

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
>           left = values.pop()
E           IndexError: pop from empty list

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:90: IndexError

During handling of the above exception, another exception occurred:

calc = <gemini.Calculator object at 0x107231b20>

    def test_nested_parentheses(calc):
        assert calc.calculate("((2+3)*2)") == 10
        assert calc.calculate("((2+3)*(2+3))") == 25
>       assert calc.calculate("-((2+3)*((2+3)*2))") == -50

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:129: in _evaluate_expression
    apply_operator(operators, values)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

operators = [], values = []

    def apply_operator(operators, values):
        try:
            operator = operators.pop()
            right = values.pop()
            left = values.pop()
            if operator == '+':
                values.append(left + right)
            elif operator == '-':
                values.append(left - right)
            elif operator == '*':
                values.append(left * right)
            elif operator == '/':
                if right == 0:
                    raise ZeroDivisionError("Division by zero")  # Explicitly check.
                values.append(left / right)
        except IndexError:
>           raise ValueError("Invalid expression: operator/operand mismatch")
E           ValueError: Invalid expression: operator/operand mismatch

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:102: ValueError
_____________________________ test_long_expression _____________________________

calc = <gemini.Calculator object at 0x10720d070>

    def test_long_expression(calc):
        assert (
            calc.calculate(
                "100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100+100"
            )
            == 3000
        )
        assert (
>           calc.calculate(
                "-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100-100"
            )
            == -3000
        )

generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py:763: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:26: in calculate
    return self._evaluate_expression(self._tokenize(expression))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.Calculator object at 0x10720d070>
tokens = ['-100', '-100', '-100', '-100', '-100', '-100', ...]

    def _evaluate_expression(self, tokens: list) -> float:
        """
        Evaluates a tokenized arithmetic expression using the Shunting Yard algorithm.
    
        Args:
            tokens: A list of tokens representing the expression.
    
        Returns:
            The result of evaluating the expression.
    
        Raises:
            ValueError: If the expression is invalid (e.g., unbalanced parentheses).
        """
    
        def precedence(operator):
            if operator in ('+', '-'):
                return 1
            if operator in ('*', '/'):
                return 2
            return 0
    
        def apply_operator(operators, values):
            try:
                operator = operators.pop()
                right = values.pop()
                left = values.pop()
                if operator == '+':
                    values.append(left + right)
                elif operator == '-':
                    values.append(left - right)
                elif operator == '*':
                    values.append(left * right)
                elif operator == '/':
                    if right == 0:
                        raise ZeroDivisionError("Division by zero")  # Explicitly check.
                    values.append(left / right)
            except IndexError:
                raise ValueError("Invalid expression: operator/operand mismatch")
    
        values = []
        operators = []
    
        for token in tokens:
            if re.match(r"^-?\d+\.?\d*$", token):  # numbers (including negative)
                values.append(float(token))
            elif token == '(':
                operators.append(token)
            elif token == ')':
                try:
                    while operators[-1] != '(':
                        apply_operator(operators, values)
                    operators.pop()  # Pop the '('
                except IndexError:
                    raise ValueError("Unbalanced parentheses")  # Mismatched )
    
            elif token in ('+', '-', '*', '/'):
                while (operators and operators[-1] != '(' and
                       precedence(operators[-1]) >= precedence(token)):
                    apply_operator(operators, values)
                operators.append(token)
    
        while operators:
            if operators[-1] == '(':  # Check and raise for unbalanced (
                raise ValueError("Unbalanced parentheses") # Mismatched (
            apply_operator(operators, values)
    
        if len(values) != 1:  # Should be exactly one value left
>           raise ValueError("Invalid Expression: Check operators and operands")
E           ValueError: Invalid Expression: Check operators and operands

generated/code/calculator/5-role-zero_shot/iteration_1/gemini.py:132: ValueError
=========================== short test summary info ============================
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_positive
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_divide_neutral
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_divide_neutral_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_negative
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_negative_parenhesis
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_add_subtract_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_divide_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_float
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_positive_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_positive_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_negative_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_subtract_multiply_negative_float_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_all_operations
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_general_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_nested_parentheses
FAILED generated/code/calculator/5-role-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_long_expression
======================== 35 failed, 53 passed in 0.48s =========================
