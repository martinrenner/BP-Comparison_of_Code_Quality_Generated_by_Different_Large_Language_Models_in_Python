Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py . [  2%]
...............FFFFFFFF.F.F.F...FF.F..FF.FF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x106d2de20>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d2de20>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x106bf7aa0>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106bf7aa0>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x106d45730>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d45730>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x106d47ef0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d47ef0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x106d46c60>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d46c60>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x106d461b0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d461b0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x106d45340>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d45340>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x106bf7950>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106bf7950>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:59: ValueError
_____________________________ test_search_by_name ______________________________

manager = <claude.TaskManager object at 0x106d445c0>

    def test_search_by_name(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
>       assert manager.search("task_name1") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            }
        ]
E       AssertionError: assert [{'descriptio...'task_name1'}] == [{'id': 1, 'i...'task_name1'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:221: AssertionError
__________________________ test_search_by_description __________________________

manager = <claude.TaskManager object at 0x106d459d0>

    def test_search_by_description(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
>       assert manager.search("task_description1") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            }
        ]
E       AssertionError: assert [{'descriptio...'task_name1'}] == [{'id': 1, 'i...'task_name1'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:271: AssertionError
___________________________ test_search_autocomplete ___________________________

manager = <claude.TaskManager object at 0x106d47a70>

    def test_search_autocomplete(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
    
>       assert manager.search("task_name") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            },
            {
                "id": id2,
                "task_name": "task_name2",
                "task_description": "task_description2",
                "is_finished": False,
            },
            {
                "id": id3,
                "task_name": "task_name3",
                "task_description": "task_description3",
                "is_finished": False,
            },
        ]
E       AssertionError: assert [{'descriptio...'task_name3'}] == [{'id': 1, 'i...'task_name3'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:320: AssertionError
__________________________ test_list_tasks_unfinished __________________________

manager = <claude.TaskManager object at 0x106d47170>

    def test_list_tasks_unfinished(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
        tasks = manager.get_all()
        assert len(tasks) == 4
>       assert tasks == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            },
            {
                "id": id2,
                "task_name": "task_name2",
                "task_description": "task_description2",
                "is_finished": False,
            },
            {
                "id": id3,
                "task_name": "task_name3",
                "task_description": "task_description3",
                "is_finished": False,
            },
            {
                "id": id4,
                "task_name": "task_name4",
                "task_description": "task_description4",
                "is_finished": False,
            },
        ]
E       AssertionError: assert [{'descriptio...'task_name4'}] == [{'id': 1, 'i...'task_name4'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:369: AssertionError
___________________________ test_list_tasks_finished ___________________________

manager = <claude.TaskManager object at 0x106d58e90>

    def test_list_tasks_finished(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
        manager.finish(id1)
        manager.finish(id3)
    
        tasks = manager.get_all()
        assert len(tasks) == 4
>       assert tasks == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": True,
            },
            {
                "id": id2,
                "task_name": "task_name2",
                "task_description": "task_description2",
                "is_finished": False,
            },
            {
                "id": id3,
                "task_name": "task_name3",
                "task_description": "task_description3",
                "is_finished": True,
            },
            {
                "id": id4,
                "task_name": "task_name4",
                "task_description": "task_description4",
                "is_finished": False,
            },
        ]
E       AssertionError: assert [{'descriptio...'task_name4'}] == [{'id': 1, 'i...'task_name4'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': True} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': True}
E         Use -v to get more diff

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:408: AssertionError
_________________________________ test_finish __________________________________

manager = <claude.TaskManager object at 0x106d5a420>

    def test_finish(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
    
        assert manager.finish(id1) is True
        assert manager.finish(id2) is True
    
>       assert manager.search("task_name1") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": True,
            }
        ]
E       AssertionError: assert [{'descriptio...'task_name1'}] == [{'id': 1, 'i...'task_name1'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': True} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': True}
E         Use -v to get more diff

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:451: AssertionError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x106d59310>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d59310>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed, False if the task doesn't exist
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:112: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x106d591c0>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d591c0>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed, False if the task doesn't exist
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:112: ValueError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x106bf7470>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106bf7470>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed, False if the task doesn't exist
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:112: ValueError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x106d477d0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106d477d0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed, False if the task doesn't exist
    
        Raises:
            ValueError: If task_id is not a positive integer
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/2-few_shot/iteration_8/claude.py:112: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_search_by_name
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_search_by_description
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_search_autocomplete
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_list_tasks_unfinished
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_list_tasks_finished
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_finish
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/2-few_shot/iteration_8/5_functional_correctness-claude.py::test_finish_negative
======================== 18 failed, 29 passed in 0.17s =========================
