Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py . [  2%]
.........FFF...FFF.FFFF...............FF..F...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <chatgpt.TaskManager object at 0x104e38800>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e38800>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the system.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
    
        Returns:
            int: The unique ID of the newly added task.
    
        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:48: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <chatgpt.TaskManager object at 0x104e5d670>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5d670>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the system.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
    
        Returns:
            int: The unique ID of the newly added task.
    
        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
>       if not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:50: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <chatgpt.TaskManager object at 0x104e5f2f0>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5f2f0>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the system.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): The description of the task.
    
        Returns:
            int: The unique ID of the newly added task.
    
        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:48: AttributeError
___________________________ test_remove_by_id_empty ____________________________

manager = <chatgpt.TaskManager object at 0x104e5ea80>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5ea80>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'NoneType' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:76: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <chatgpt.TaskManager object at 0x104e5d490>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5d490>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:76: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <chatgpt.TaskManager object at 0x104e5ca70>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5ca70>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
        if task_id < 0:
>           raise ValueError("Task ID must be a non-negative integer.")
E           ValueError: Task ID must be a non-negative integer.

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:77: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <chatgpt.TaskManager object at 0x104e5eb10>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5eb10>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:76: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <chatgpt.TaskManager object at 0x104e5d640>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5d640>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:76: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <chatgpt.TaskManager object at 0x104e5c9e0>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5c9e0>
task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:76: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <chatgpt.TaskManager object at 0x104e5f5c0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5f5c0>
task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Removes an existing task by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:76: TypeError
______________________________ test_finish_empty _______________________________

manager = <chatgpt.TaskManager object at 0x104e5d670>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e5d670>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Marks a given task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the operation was successful, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'NoneType' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:120: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <chatgpt.TaskManager object at 0x104e645f0>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e645f0>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Marks a given task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the operation was successful, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
>       if task_id < 0:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:120: TypeError
_____________________________ test_finish_negative _____________________________

manager = <chatgpt.TaskManager object at 0x104e64920>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104e64920>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Marks a given task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the operation was successful, otherwise False.
    
        Raises:
            ValueError: If task_id is negative.
        """
        if task_id < 0:
>           raise ValueError("Task ID must be a non-negative integer.")
E           ValueError: Task ID must be a non-negative integer.

generated/code/todo_list/2-few_shot/iteration_10/chatgpt.py:121: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_add_non_string_name
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_add_non_string_description
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_id_empty
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_id_negative
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_task_name
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_task_description
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_finish_empty
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_finish_empty_string
FAILED generated/code/todo_list/2-few_shot/iteration_10/5_functional_correctness-chatgpt.py::test_finish_negative
======================== 13 failed, 34 passed in 0.16s =========================
