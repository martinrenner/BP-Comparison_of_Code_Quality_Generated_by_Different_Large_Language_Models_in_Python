Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py . [  2%]
.............F.FFFFFFFF...............FFFFF...                           [100%]

=================================== FAILURES ===================================
________________________ test_remove_by_id_non_existent ________________________

manager = <chatgpt.TaskManager object at 0x104cdd970>

    def test_remove_by_id_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
>       assert manager.remove(9999) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104cdd970>, task_id = 9999

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
>           raise KeyError(f"Task with id {task_id} does not exist.")
E           KeyError: 'Task with id 9999 does not exist.'

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:78: KeyError
___________________________ test_remove_by_id_empty ____________________________

manager = <chatgpt.TaskManager object at 0x104d29280>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d29280>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <chatgpt.TaskManager object at 0x104d28470>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d28470>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <chatgpt.TaskManager object at 0x104d28260>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d28260>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <chatgpt.TaskManager object at 0x104d3fce0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d3fce0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <chatgpt.TaskManager object at 0x104d3d820>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d3d820>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <chatgpt.TaskManager object at 0x104d3e210>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d3e210>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <chatgpt.TaskManager object at 0x104d2b320>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d2b320>
task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <chatgpt.TaskManager object at 0x104cdf2f0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104cdf2f0>
task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Parameters:
            task_id (int): The unique identifier of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:76: ValueError
______________________________ test_finish_empty _______________________________

manager = <chatgpt.TaskManager object at 0x104d2bda0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d2bda0>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished (completed).
    
        Parameters:
            task_id (int): The unique identifier of the task to finish.
    
        Returns:
            bool: True if the task was successfully marked as finished.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:121: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <chatgpt.TaskManager object at 0x104d2a870>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d2a870>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished (completed).
    
        Parameters:
            task_id (int): The unique identifier of the task to finish.
    
        Returns:
            bool: True if the task was successfully marked as finished.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:121: ValueError
___________________________ test_finish_non_existent ___________________________

manager = <chatgpt.TaskManager object at 0x104d29c10>

    def test_finish_non_existent(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(9999) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d29c10>, task_id = 9999

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished (completed).
    
        Parameters:
            task_id (int): The unique identifier of the task to finish.
    
        Returns:
            bool: True if the task was successfully marked as finished.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer.")
        if task_id not in self.tasks:
>           raise KeyError(f"Task with id {task_id} does not exist.")
E           KeyError: 'Task with id 9999 does not exist.'

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:123: KeyError
______________________________ test_finish_float _______________________________

manager = <chatgpt.TaskManager object at 0x104d153d0>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d153d0>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished (completed).
    
        Parameters:
            task_id (int): The unique identifier of the task to finish.
    
        Returns:
            bool: True if the task was successfully marked as finished.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:121: ValueError
_____________________________ test_finish_negative _____________________________

manager = <chatgpt.TaskManager object at 0x104d3e5a0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d3e5a0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished (completed).
    
        Parameters:
            task_id (int): The unique identifier of the task to finish.
    
        Returns:
            bool: True if the task was successfully marked as finished.
    
        Raises:
            ValueError: If task_id is not a positive integer.
            KeyError: If no task exists with the given task_id.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/1-zero_shot/iteration_6/chatgpt.py:121: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_empty
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_negative
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_float
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_name
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_description
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_empty
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_empty_string
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_float
FAILED generated/code/todo_list/1-zero_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_negative
======================== 14 failed, 33 passed in 0.16s =========================
