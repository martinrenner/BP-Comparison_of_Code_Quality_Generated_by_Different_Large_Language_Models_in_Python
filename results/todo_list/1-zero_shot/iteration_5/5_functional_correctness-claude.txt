Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py . [  2%]
.........FFF.F.FFFFFFFF.............F.FFFFF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <claude.TaskManager object at 0x106c0bdd0>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c0bdd0>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
    
        Args:
            task_name: The name/title of the task
            task_description: Detailed description of the task
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
>       if not task_name or not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:39: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <claude.TaskManager object at 0x106c53860>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c53860>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
    
        Args:
            task_name: The name/title of the task
            task_description: Detailed description of the task
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
    
>       if not task_description or not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:42: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <claude.TaskManager object at 0x106c53830>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c53830>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the todo list.
    
        Args:
            task_name: The name/title of the task
            task_description: Detailed description of the task
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name or task_description is empty
        """
        # Validate inputs
>       if not task_name or not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:39: AttributeError
________________________ test_remove_by_id_non_existent ________________________

manager = <claude.TaskManager object at 0x106c52de0>

    def test_remove_by_id_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
>       assert manager.remove(9999) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c52de0>, task_id = 9999

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
    
        # Validate ID is positive
        if task_id <= 0:
            raise ValueError("Task ID must be positive")
    
        # Validate task exists
        if task_id not in self._tasks:
>           raise KeyError(f"No task found with ID: {task_id}")
E           KeyError: 'No task found with ID: 9999'

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:183: KeyError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x106c52270>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c52270>, task_id = None

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x106c50fe0>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c50fe0>, task_id = ''

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x106c501a0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c501a0>, task_id = -1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
    
        # Validate ID is positive
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:179: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x106c50b00>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c50b00>, task_id = 1.1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x106c52d80>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c52d80>, task_id = 'task_name1'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x106c53350>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c53350>, task_id = 'task_name5'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x106c69670>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c69670>, task_id = 'task_description1'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x106c6a870>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:74: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c6a870>, task_id = 'task_description5'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
_________________________ test_finish_on_finished_task _________________________

manager = <claude.TaskManager object at 0x106c68080>

    def test_finish_on_finished_task(manager):
        id1 = manager.add("task_name1", "task_description1")
        manager.finish(id1)
>       assert manager.finish(id1) is True
E       assert False is True
E        +  where False = finish(1)
E        +    where finish = <claude.TaskManager object at 0x106c68080>.finish

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:502: AssertionError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x106c537a0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:126: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c537a0>, task_id = None

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x106c52990>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:126: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c52990>, task_id = ''

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
___________________________ test_finish_non_existent ___________________________

manager = <claude.TaskManager object at 0x106c69490>

    def test_finish_non_existent(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(9999) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:126: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c69490>, task_id = 9999

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
    
        # Validate ID is positive
        if task_id <= 0:
            raise ValueError("Task ID must be positive")
    
        # Validate task exists
        if task_id not in self._tasks:
>           raise KeyError(f"No task found with ID: {task_id}")
E           KeyError: 'No task found with ID: 9999'

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:183: KeyError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x106c69fa0>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:126: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c69fa0>, task_id = 1.1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:175: ValueError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x106c69940>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/1-zero_shot/iteration_5/claude.py:126: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106c69940>, task_id = -1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is valid.
    
        Args:
            task_id: The ID to validate
    
        Raises:
            ValueError: If task_id is negative or not an integer
            KeyError: If no task exists with the given ID
        """
        # Validate ID is an integer
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
    
        # Validate ID is positive
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/1-zero_shot/iteration_5/claude.py:179: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_add_non_string_name
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_add_non_string_description
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_id_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_finish_on_finished_task
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_finish_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/1-zero_shot/iteration_5/5_functional_correctness-claude.py::test_finish_negative
======================== 18 failed, 29 passed in 0.18s =========================
