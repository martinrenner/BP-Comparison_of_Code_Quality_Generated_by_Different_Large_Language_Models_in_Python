Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py . [  2%]
.......F.......FFFFFFFF.............F.FF.FF...                           [100%]

=================================== FAILURES ===================================
_______________________ test_add_with_empty_description ________________________

manager = <claude.TaskManager object at 0x106ac1eb0>

    def test_add_with_empty_description(manager):
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:74: Failed
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x106a8fce0>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106a8fce0>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x106adbcb0>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106adbcb0>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x106adb0e0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106adb0e0>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
    
        if task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:70: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x106ada600>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106ada600>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x106ad8dd0>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106ad8dd0>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x106ad8bc0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106ad8bc0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x106a8f6e0>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106a8f6e0>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x106ada3c0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106ada3c0>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if task was removed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:67: TypeError
_________________________ test_finish_on_finished_task _________________________

manager = <claude.TaskManager object at 0x106ad9a90>

    def test_finish_on_finished_task(manager):
        id1 = manager.add("task_name1", "task_description1")
        manager.finish(id1)
>       assert manager.finish(id1) is True
E       assert False is True
E        +  where False = finish(1)
E        +    where finish = <claude.TaskManager object at 0x106ad9a90>.finish

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:502: AssertionError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x106ad9850>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106ad9850>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if task was marked as completed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:124: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x106aef710>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106aef710>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if task was marked as completed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:124: TypeError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x106aed970>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106aed970>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if task was marked as completed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:124: TypeError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x106aecbc0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106aecbc0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if task was marked as completed successfully, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
    
        if task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/1-zero_shot/iteration_4/claude.py:127: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_with_empty_description
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_on_finished_task
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/1-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_negative
======================== 14 failed, 33 passed in 0.16s =========================
