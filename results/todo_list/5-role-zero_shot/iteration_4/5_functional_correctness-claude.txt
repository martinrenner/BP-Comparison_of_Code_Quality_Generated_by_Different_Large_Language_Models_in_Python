Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py . [  2%]
.........FFF.F.FFFFFFFF...............FFFFF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <claude.TaskManager object at 0x107404a40>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107404a40>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name (str): Name of the task
            task_description (str): Description of the task
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name or task_description is empty
        """
>       if not task_name or not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:34: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <claude.TaskManager object at 0x1073ca6c0>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1073ca6c0>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name (str): Name of the task
            task_description (str): Description of the task
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name or task_description is empty
        """
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
>       if not task_description or not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:36: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <claude.TaskManager object at 0x1073cbb30>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1073cbb30>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name (str): Name of the task
            task_description (str): Description of the task
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name or task_description is empty
        """
>       if not task_name or not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:34: AttributeError
________________________ test_remove_by_id_non_existent ________________________

manager = <claude.TaskManager object at 0x10646f260>

    def test_remove_by_id_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
>       assert manager.remove(9999) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10646f260>, task_id = 9999

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id < 1:
            raise ValueError("Task ID must be a positive integer")
    
        if task_id not in self.tasks:
>           raise KeyError(f"No task found with ID {task_id}")
E           KeyError: 'No task found with ID 9999'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:67: KeyError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x10742b590>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10742b590>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'NoneType' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:63: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x10742a480>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10742a480>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:63: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x107429970>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107429970>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:64: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x1073cb3b0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1073cb3b0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id < 1:
            raise ValueError("Task ID must be a positive integer")
    
        if task_id not in self.tasks:
>           raise KeyError(f"No task found with ID {task_id}")
E           KeyError: 'No task found with ID 1.1'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:67: KeyError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x1073cb710>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1073cb710>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:63: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x1074289b0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1074289b0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:63: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x10742b740>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10742b740>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:63: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x107429ca0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107429ca0>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:63: TypeError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x10742a930>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10742a930>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): ID of the task to mark as completed
    
        Returns:
            bool: True if task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'NoneType' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:112: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x107428380>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107428380>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): ID of the task to mark as completed
    
        Returns:
            bool: True if task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
>       if task_id < 1:
E       TypeError: '<' not supported between instances of 'str' and 'int'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:112: TypeError
___________________________ test_finish_non_existent ___________________________

manager = <claude.TaskManager object at 0x107428f50>

    def test_finish_non_existent(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(9999) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107428f50>, task_id = 9999

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): ID of the task to mark as completed
    
        Returns:
            bool: True if task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id < 1:
            raise ValueError("Task ID must be a positive integer")
    
        if task_id not in self.tasks:
>           raise KeyError(f"No task found with ID {task_id}")
E           KeyError: 'No task found with ID 9999'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:116: KeyError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x1073caea0>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1073caea0>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): ID of the task to mark as completed
    
        Returns:
            bool: True if task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id < 1:
            raise ValueError("Task ID must be a positive integer")
    
        if task_id not in self.tasks:
>           raise KeyError(f"No task found with ID {task_id}")
E           KeyError: 'No task found with ID 1.1'

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:116: KeyError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x107406270>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107406270>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): ID of the task to mark as completed
    
        Returns:
            bool: True if task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If no task with the given ID exists
        """
        if task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/5-role-zero_shot/iteration_4/claude.py:113: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_non_string_name
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_non_string_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/5-role-zero_shot/iteration_4/5_functional_correctness-claude.py::test_finish_negative
======================== 17 failed, 30 passed in 0.17s =========================
