Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py . [  2%]
.........FFF...FFFFFFFF...............FF.FF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <chatgpt.TaskManager object at 0x105024fb0>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x105024fb0>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task with name and description.
    
        Args:
            task_name (str): Name of the task. Must be a non-empty string.
            task_description (str): Description of the task. Must be a non-empty string.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If task_name or task_description is empty.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:36: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <chatgpt.TaskManager object at 0x104feb6b0>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104feb6b0>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task with name and description.
    
        Args:
            task_name (str): Name of the task. Must be a non-empty string.
            task_description (str): Description of the task. Must be a non-empty string.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
>       if not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:38: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <chatgpt.TaskManager object at 0x1050492b0>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1050492b0>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task with name and description.
    
        Args:
            task_name (str): Name of the task. Must be a non-empty string.
            task_description (str): Description of the task. Must be a non-empty string.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If task_name or task_description is empty.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:36: AttributeError
___________________________ test_remove_by_id_empty ____________________________

manager = <chatgpt.TaskManager object at 0x1050488f0>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1050488f0>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <chatgpt.TaskManager object at 0x10504b290>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x10504b290>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <chatgpt.TaskManager object at 0x105050ce0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x105050ce0>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <chatgpt.TaskManager object at 0x1050510a0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1050510a0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <chatgpt.TaskManager object at 0x105048a70>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x105048a70>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <chatgpt.TaskManager object at 0x105049280>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x105049280>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <chatgpt.TaskManager object at 0x10504bd40>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x10504bd40>
task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <chatgpt.TaskManager object at 0x10504a330>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x10504a330>
task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove the task corresponding to the provided task ID.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task exists and was removed, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:65: ValueError
______________________________ test_finish_empty _______________________________

manager = <chatgpt.TaskManager object at 0x104feb4d0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104feb4d0>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark the task identified by task_id as finished.
    
        Args:
            task_id (int): Unique ID of the task.
    
        Returns:
            bool: True if the task exists and was updated, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:110: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <chatgpt.TaskManager object at 0x104febce0>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104febce0>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark the task identified by task_id as finished.
    
        Args:
            task_id (int): Unique ID of the task.
    
        Returns:
            bool: True if the task exists and was updated, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:110: ValueError
______________________________ test_finish_float _______________________________

manager = <chatgpt.TaskManager object at 0x105027920>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x105027920>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark the task identified by task_id as finished.
    
        Args:
            task_id (int): Unique ID of the task.
    
        Returns:
            bool: True if the task exists and was updated, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:110: ValueError
_____________________________ test_finish_negative _____________________________

manager = <chatgpt.TaskManager object at 0x105025850>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x105025850>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark the task identified by task_id as finished.
    
        Args:
            task_id (int): Unique ID of the task.
    
        Returns:
            bool: True if the task exists and was updated, otherwise False.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/5-role-zero_shot/iteration_9/chatgpt.py:110: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_add_non_string_name
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_add_non_string_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_id_empty
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_id_negative
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_id_float
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_task_name
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_task_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_finish_empty
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_finish_empty_string
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_finish_float
FAILED generated/code/todo_list/5-role-zero_shot/iteration_9/5_functional_correctness-chatgpt.py::test_finish_negative
======================== 15 failed, 32 passed in 0.17s =========================
