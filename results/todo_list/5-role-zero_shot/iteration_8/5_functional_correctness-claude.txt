Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py . [  2%]
.......F.FFF...FFFFFFFF...............FF.FF...                           [100%]

=================================== FAILURES ===================================
_______________________ test_add_with_empty_description ________________________

manager = <claude.TaskManager object at 0x1026fc560>

    def test_add_with_empty_description(manager):
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:74: Failed
___________________________ test_add_non_string_name ___________________________

manager = <claude.TaskManager object at 0x102d4bc50>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102d4bc50>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task (can be empty)
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name is empty or not a string
            TypeError: If arguments are not of the expected types
        """
        # Input validation
        if not isinstance(task_name, str) or not isinstance(task_description, str):
>           raise TypeError("Task name and description must be strings")
E           TypeError: Task name and description must be strings

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:49: TypeError
_______________________ test_add_non_string_description ________________________

manager = <claude.TaskManager object at 0x102da82c0>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102da82c0>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task (can be empty)
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name is empty or not a string
            TypeError: If arguments are not of the expected types
        """
        # Input validation
        if not isinstance(task_name, str) or not isinstance(task_description, str):
>           raise TypeError("Task name and description must be strings")
E           TypeError: Task name and description must be strings

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:49: TypeError
___________________ test_add_non_string_name_and_description ___________________

manager = <claude.TaskManager object at 0x102da92b0>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102da92b0>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task (can be empty)
    
        Returns:
            int: The unique ID of the newly created task
    
        Raises:
            ValueError: If task_name is empty or not a string
            TypeError: If arguments are not of the expected types
        """
        # Input validation
        if not isinstance(task_name, str) or not isinstance(task_description, str):
>           raise TypeError("Task name and description must be strings")
E           TypeError: Task name and description must be strings

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:49: TypeError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x102daad50>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102daad50>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x102daa270>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102daa270>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x102da9d00>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102da9d00>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
    
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:86: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x102daa180>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102daa180>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x102daa5a0>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102daa5a0>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x102da8440>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102da8440>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x102d4b8f0>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102d4b8f0>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x102d975c0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102d975c0>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique ID of the task to remove
    
        Returns:
            bool: True if the task was removed, False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:83: TypeError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x102d977a0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102d977a0>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if the task was marked as completed,
                  False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:141: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x102da9250>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102da9250>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if the task was marked as completed,
                  False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:141: TypeError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x102da8fe0>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102da8fe0>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if the task was marked as completed,
                  False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:141: TypeError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x102daa6f0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102daa6f0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique ID of the task to mark as completed
    
        Returns:
            bool: True if the task was marked as completed,
                  False if the task was not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        # Input validation
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
    
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/5-role-zero_shot/iteration_8/claude.py:144: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_with_empty_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_non_string_name
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_non_string_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/5-role-zero_shot/iteration_8/5_functional_correctness-claude.py::test_finish_negative
======================== 16 failed, 31 passed in 0.17s =========================
