Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py . [  2%]
.......F.FFF...FFFFFFFF...............FF.FF...                           [100%]

=================================== FAILURES ===================================
_______________________ test_add_with_empty_description ________________________

manager = <claude.TaskManager object at 0x10207c9b0>

    def test_add_with_empty_description(manager):
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:74: Failed
___________________________ test_add_non_string_name ___________________________

manager = <claude.TaskManager object at 0x10204b830>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10204b830>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: Description of the task (can be empty)
    
        Returns:
            int: The unique ID of the newly added task
    
        Raises:
            ValueError: If task_name is empty or not a string
            TypeError: If inputs are not strings
        """
        # Validate inputs
        if not isinstance(task_name, str) or not isinstance(task_description, str):
>           raise TypeError("Task name and description must be strings")
E           TypeError: Task name and description must be strings

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:32: TypeError
_______________________ test_add_non_string_description ________________________

manager = <claude.TaskManager object at 0x102093bf0>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102093bf0>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: Description of the task (can be empty)
    
        Returns:
            int: The unique ID of the newly added task
    
        Raises:
            ValueError: If task_name is empty or not a string
            TypeError: If inputs are not strings
        """
        # Validate inputs
        if not isinstance(task_name, str) or not isinstance(task_description, str):
>           raise TypeError("Task name and description must be strings")
E           TypeError: Task name and description must be strings

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:32: TypeError
___________________ test_add_non_string_name_and_description ___________________

manager = <claude.TaskManager object at 0x102093560>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102093560>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: Description of the task (can be empty)
    
        Returns:
            int: The unique ID of the newly added task
    
        Raises:
            ValueError: If task_name is empty or not a string
            TypeError: If inputs are not strings
        """
        # Validate inputs
        if not isinstance(task_name, str) or not isinstance(task_description, str):
>           raise TypeError("Task name and description must be strings")
E           TypeError: Task name and description must be strings

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:32: TypeError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x102092750>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102092750>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x102091820>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102091820>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x102090a40>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102090a40>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
    
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:67: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x10204bef0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10204bef0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x102091070>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102091070>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x102090fb0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102090fb0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x102091b20>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102091b20>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x102093a40>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102093a40>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if task was successfully removed, False otherwise
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:64: TypeError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x1020aa9f0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1020aa9f0>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as finished
    
        Returns:
            bool: True if task was successfully marked as finished, False if task not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:116: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x102093d10>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102093d10>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as finished
    
        Returns:
            bool: True if task was successfully marked as finished, False if task not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:116: TypeError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x102090170>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x102090170>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as finished
    
        Returns:
            bool: True if task was successfully marked as finished, False if task not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer")
E           TypeError: Task ID must be an integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:116: TypeError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x10207e870>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10207e870>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as finished
    
        Returns:
            bool: True if task was successfully marked as finished, False if task not found
    
        Raises:
            TypeError: If task_id is not an integer
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer")
    
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/claude.py:119: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_add_with_empty_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_add_non_string_name
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_add_non_string_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-claude.py::test_finish_negative
======================== 16 failed, 31 passed in 0.17s =========================
