Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py . [  2%]
...............FFFFFFFF...............FF.FF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_remove_by_id_empty ____________________________

manager = <chatgpt.TaskManager object at 0x10272c050>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x10272c050>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <chatgpt.TaskManager object at 0x1026f7d10>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1026f7d10>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <chatgpt.TaskManager object at 0x1026f7680>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1026f7680>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id < 0:
>           raise ValueError("Task ID cannot be negative.")
E           ValueError: Task ID cannot be negative.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:76: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <chatgpt.TaskManager object at 0x102740ce0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x102740ce0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
___________________________ test_remove_by_task_name ___________________________

manager = <chatgpt.TaskManager object at 0x102743e90>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x102743e90>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <chatgpt.TaskManager object at 0x1027424e0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1027424e0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <chatgpt.TaskManager object at 0x102741a60>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x102741a60>
task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <chatgpt.TaskManager object at 0x1026f7e90>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1026f7e90>
task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task by its ID.
    
        Args:
            task_id (int): ID of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:74: TypeError
______________________________ test_finish_empty _______________________________

manager = <chatgpt.TaskManager object at 0x102740620>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x102740620>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as finished/completed by its ID.
    
        Args:
            task_id (int): ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was marked finished; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:123: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <chatgpt.TaskManager object at 0x102742270>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x102742270>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as finished/completed by its ID.
    
        Args:
            task_id (int): ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was marked finished; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:123: TypeError
______________________________ test_finish_float _______________________________

manager = <chatgpt.TaskManager object at 0x102740770>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x102740770>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as finished/completed by its ID.
    
        Args:
            task_id (int): ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was marked finished; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:123: TypeError
_____________________________ test_finish_negative _____________________________

manager = <chatgpt.TaskManager object at 0x1027402f0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x1027402f0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as finished/completed by its ID.
    
        Args:
            task_id (int): ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was marked finished; False if the task does not exist.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id < 0:
>           raise ValueError("Task ID cannot be negative.")
E           ValueError: Task ID cannot be negative.

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/chatgpt.py:125: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_id_empty
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_id_negative
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_id_float
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_task_name
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_task_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_finish_empty
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_finish_empty_string
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_finish_float
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_3/5_functional_correctness-chatgpt.py::test_finish_negative
======================== 12 failed, 35 passed in 0.15s =========================
