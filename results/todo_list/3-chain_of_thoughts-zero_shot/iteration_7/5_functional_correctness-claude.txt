Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py . [  2%]
.......F.FFF.F.FFFFFFFF...............FFFFF...                           [100%]

=================================== FAILURES ===================================
_______________________ test_add_with_empty_description ________________________

manager = <claude.TaskManager object at 0x105661a60>

    def test_add_with_empty_description(manager):
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:74: Failed
___________________________ test_add_non_string_name ___________________________

manager = <claude.TaskManager object at 0x10679b800>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10679b800>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task
    
        Returns:
            int: The unique identifier for the added task
    
        Raises:
            ValueError: If task_name is empty
        """
        # Validate inputs
>       if not task_name or not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:35: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <claude.TaskManager object at 0x10679b6b0>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10679b6b0>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task
    
        Returns:
            int: The unique identifier for the added task
    
        Raises:
            ValueError: If task_name is empty
        """
        # Validate inputs
        if not task_name or not task_name.strip():
            raise ValueError("Task name cannot be empty")
    
        if task_description is None:
            task_description = ""  # Allow empty descriptions
    
        # Create a new task
        task_id = self._next_id
        self._tasks[task_id] = {
            'id': task_id,
            'name': task_name.strip(),
>           'description': task_description.strip(),
            'is_finished': False,
            'created_at': datetime.datetime.now(),
            'updated_at': datetime.datetime.now()
        }
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:46: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <claude.TaskManager object at 0x10679ac60>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10679ac60>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the task manager.
    
        Args:
            task_name: The name of the task (non-empty string)
            task_description: The description of the task
    
        Returns:
            int: The unique identifier for the added task
    
        Raises:
            ValueError: If task_name is empty
        """
        # Validate inputs
>       if not task_name or not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:35: AttributeError
________________________ test_remove_by_id_non_existent ________________________

manager = <claude.TaskManager object at 0x10679a630>

    def test_remove_by_id_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
>       assert manager.remove(9999) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10679a630>, task_id = 9999

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer")
    
        if task_id not in self._tasks:
>           raise KeyError(f"Task with ID {task_id} does not exist")
E           KeyError: 'Task with ID 9999 does not exist'

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:73: KeyError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x1067993a0>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1067993a0>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x106785ca0>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106785ca0>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x106799100>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106799100>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x106799eb0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106799eb0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x10679b2f0>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10679b2f0>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x106798710>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106798710>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x1067862d0>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1067862d0>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x106787fe0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106787fe0>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its ID.
    
        Args:
            task_id: The unique identifier of the task to remove
    
        Returns:
            bool: True if the task was successfully removed, False otherwise
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:70: ValueError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x106799d90>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106799d90>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:116: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x106798e60>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106798e60>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:116: ValueError
___________________________ test_finish_non_existent ___________________________

manager = <claude.TaskManager object at 0x1067878f0>

    def test_finish_non_existent(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(9999) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1067878f0>, task_id = 9999

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
            raise ValueError("Task ID must be a positive integer")
    
        if task_id not in self._tasks:
>           raise KeyError(f"Task with ID {task_id} does not exist")
E           KeyError: 'Task with ID 9999 does not exist'

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:119: KeyError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x1067854c0>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1067854c0>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:116: ValueError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x106784e00>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106784e00>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id: The unique identifier of the task to mark as completed
    
        Returns:
            bool: True if the task was successfully marked as completed
    
        Raises:
            ValueError: If task_id is negative
            KeyError: If task doesn't exist
        """
        if not isinstance(task_id, int) or task_id < 1:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/claude.py:116: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_with_empty_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_non_string_name
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_non_string_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_id_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_finish_non_existent
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/3-chain_of_thoughts-zero_shot/iteration_7/5_functional_correctness-claude.py::test_finish_negative
======================== 18 failed, 29 passed in 0.19s =========================
