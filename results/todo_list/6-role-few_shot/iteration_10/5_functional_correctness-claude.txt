Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py . [  2%]
.............F.FFFFFFFF.............F.FFFFF...                           [100%]

=================================== FAILURES ===================================
________________________ test_remove_by_id_non_existent ________________________

manager = <claude.TaskManager object at 0x106ff44a0>

    def test_remove_by_id_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
>       assert manager.remove(9999) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:138: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106ff44a0>, task_id = 9999

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the task manager.
    
        Args:
            task_id (int): The unique ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If the task ID is negative or not an integer.
            KeyError: If the task ID does not exist.
        """
        # Validate input
        self._validate_task_id(task_id)
    
        # Check if task exists
        if task_id not in self._tasks:
>           raise KeyError(f"Task with ID {task_id} does not exist")
E           KeyError: 'Task with ID 9999 does not exist'

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:71: KeyError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x106fbb170>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106fbb170>, task_id = None

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x107018ce0>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107018ce0>, task_id = ''

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x10701b8c0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10701b8c0>, task_id = -1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:166: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <claude.TaskManager object at 0x10701a4b0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10701a4b0>, task_id = 1.1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x1070199a0>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x1070199a0>, task_id = 'task_name1'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x107019100>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107019100>, task_id = 'task_name5'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x106fbaed0>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x106fbaed0>, task_id = 'task_description1'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x107019b80>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:67: in remove
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107019b80>, task_id = 'task_description5'

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
_________________________ test_finish_on_finished_task _________________________

manager = <claude.TaskManager object at 0x107019a60>

    def test_finish_on_finished_task(manager):
        id1 = manager.add("task_name1", "task_description1")
        manager.finish(id1)
>       assert manager.finish(id1) is True
E       assert False is True
E        +  where False = finish(1)
E        +    where finish = <claude.TaskManager object at 0x107019a60>.finish

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:502: AssertionError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x107019fd0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:120: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107019fd0>, task_id = None

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x105f5fa10>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:120: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x105f5fa10>, task_id = ''

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
___________________________ test_finish_non_existent ___________________________

manager = <claude.TaskManager object at 0x107021c10>

    def test_finish_non_existent(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(9999) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:522: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x107021c10>, task_id = 9999

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed.
    
        Args:
            task_id (int): The unique ID of the task to mark as completed.
    
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
    
        Raises:
            ValueError: If the task ID is negative or not an integer.
            KeyError: If the task ID does not exist.
        """
        # Validate input
        self._validate_task_id(task_id)
    
        # Check if task exists
        if task_id not in self._tasks:
>           raise KeyError(f"Task with ID {task_id} does not exist")
E           KeyError: 'Task with ID 9999 does not exist'

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:124: KeyError
______________________________ test_finish_float _______________________________

manager = <claude.TaskManager object at 0x105490f80>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:120: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x105490f80>, task_id = 1.1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
>           raise ValueError("Task ID must be an integer")
E           ValueError: Task ID must be an integer

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:164: ValueError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x10701bfb0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:120: in finish
    self._validate_task_id(task_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x10701bfb0>, task_id = -1

    def _validate_task_id(self, task_id: int) -> None:
        """
        Validate that a task ID is positive and an integer.
    
        Args:
            task_id (int): The task ID to validate.
    
        Raises:
            ValueError: If the task ID is not positive or not an integer.
        """
        if not isinstance(task_id, int):
            raise ValueError("Task ID must be an integer")
        if task_id <= 0:
>           raise ValueError("Task ID must be positive")
E           ValueError: Task ID must be positive

generated/code/todo_list/6-role-few_shot/iteration_10/claude.py:166: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_id_non_existent
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_id_float
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_finish_on_finished_task
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_finish_non_existent
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_finish_float
FAILED generated/code/todo_list/6-role-few_shot/iteration_10/5_functional_correctness-claude.py::test_finish_negative
======================== 15 failed, 32 passed in 0.17s =========================
