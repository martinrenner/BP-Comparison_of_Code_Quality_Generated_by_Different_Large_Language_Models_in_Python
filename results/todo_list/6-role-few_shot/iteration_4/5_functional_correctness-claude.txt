Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py . [  2%]
.........FFF...FFF.FFFF.............F.FF..F...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <claude.TaskManager object at 0x103b77e90>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b77e90>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the to-do list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): The detailed description of the task.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Validate inputs
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:35: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <claude.TaskManager object at 0x103b77890>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b77890>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the to-do list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): The detailed description of the task.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Validate inputs
        if not task_name.strip():
            raise ValueError("Task name cannot be empty")
>       if not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:37: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <claude.TaskManager object at 0x103b76f00>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b76f00>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Add a new task to the to-do list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): The detailed description of the task.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If task_name or task_description is empty.
        """
        # Validate inputs
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:35: AttributeError
___________________________ test_remove_by_id_empty ____________________________

manager = <claude.TaskManager object at 0x103b762d0>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b762d0>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'NoneType' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:65: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <claude.TaskManager object at 0x103b75d00>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b75d00>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'str' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:65: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <claude.TaskManager object at 0x103b74ce0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b74ce0>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
        if task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:66: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <claude.TaskManager object at 0x103b6e210>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b6e210>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'str' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:65: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <claude.TaskManager object at 0x103b749e0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b749e0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'str' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:65: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <claude.TaskManager object at 0x103b75670>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b75670>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'str' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:65: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <claude.TaskManager object at 0x103b76d20>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b76d20>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Remove a task from the to-do list by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'str' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:65: TypeError
_________________________ test_finish_on_finished_task _________________________

manager = <claude.TaskManager object at 0x103b6f4d0>

    def test_finish_on_finished_task(manager):
        id1 = manager.add("task_name1", "task_description1")
        manager.finish(id1)
>       assert manager.finish(id1) is True
E       assert False is True
E        +  where False = finish(1)
E        +    where finish = <claude.TaskManager object at 0x103b6f4d0>.finish

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:502: AssertionError
______________________________ test_finish_empty _______________________________

manager = <claude.TaskManager object at 0x103b6e330>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b6e330>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed.
    
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'NoneType' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:112: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <claude.TaskManager object at 0x103b6d3d0>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b6d3d0>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed.
    
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
>       if task_id <= 0:
E       TypeError: '<=' not supported between instances of 'str' and 'int'

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:112: TypeError
_____________________________ test_finish_negative _____________________________

manager = <claude.TaskManager object at 0x103b6cc20>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.TaskManager object at 0x103b6cc20>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Mark a task as completed by its ID.
    
        Args:
            task_id (int): The unique identifier of the task to mark as completed.
    
        Returns:
            bool: True if the task was successfully marked as completed, False otherwise.
    
        Raises:
            ValueError: If task_id is negative or zero.
        """
        if task_id <= 0:
>           raise ValueError("Task ID must be a positive integer")
E           ValueError: Task ID must be a positive integer

generated/code/todo_list/6-role-few_shot/iteration_4/claude.py:113: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_add_non_string_name
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_add_non_string_description
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_empty
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_id_negative
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_name
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_description
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_finish_on_finished_task
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_finish_empty
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_finish_empty_string
FAILED generated/code/todo_list/6-role-few_shot/iteration_4/5_functional_correctness-claude.py::test_finish_negative
======================== 14 failed, 33 passed in 0.16s =========================
