Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py . [  2%]
.........FFF...FFFFFFFF.F.F.F...FF.F..FF.FF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <gemini.TaskManager object at 0x10635dfd0>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x10635dfd0>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the to-do list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): A description of the task.
    
        Returns:
            int: The unique ID assigned to the newly added task.
    
        Raises:
            ValueError: If either task_name or task_description is empty.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:30: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <gemini.TaskManager object at 0x10632fc50>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x10632fc50>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the to-do list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): A description of the task.
    
        Returns:
            int: The unique ID assigned to the newly added task.
    
        Raises:
            ValueError: If either task_name or task_description is empty.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
>       if not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:32: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <gemini.TaskManager object at 0x10632f410>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x10632f410>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the to-do list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): A description of the task.
    
        Returns:
            int: The unique ID assigned to the newly added task.
    
        Raises:
            ValueError: If either task_name or task_description is empty.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:30: AttributeError
___________________________ test_remove_by_id_empty ____________________________

manager = <gemini.TaskManager object at 0x106380d10>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106380d10>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <gemini.TaskManager object at 0x106380230>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106380230>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <gemini.TaskManager object at 0x10638a780>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x10638a780>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:62: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <gemini.TaskManager object at 0x106388c50>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106388c50>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
___________________________ test_remove_by_task_name ___________________________

manager = <gemini.TaskManager object at 0x106380890>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106380890>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <gemini.TaskManager object at 0x106382ae0>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106382ae0>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <gemini.TaskManager object at 0x106383a40>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106383a40>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <gemini.TaskManager object at 0x106381e20>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106381e20>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the to-do list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:60: TypeError
_____________________________ test_search_by_name ______________________________

manager = <gemini.TaskManager object at 0x106381190>

    def test_search_by_name(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
>       assert manager.search("task_name1") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            }
        ]
E       AssertionError: assert [{'descriptio...'task_name1'}] == [{'id': 1, 'i...'task_name1'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:221: AssertionError
__________________________ test_search_by_description __________________________

manager = <gemini.TaskManager object at 0x10635e330>

    def test_search_by_description(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
>       assert manager.search("task_description1") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            }
        ]
E       AssertionError: assert [{'descriptio...'task_name1'}] == [{'id': 1, 'i...'task_name1'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:271: AssertionError
___________________________ test_search_autocomplete ___________________________

manager = <gemini.TaskManager object at 0x10632e420>

    def test_search_autocomplete(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
    
>       assert manager.search("task_name") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            },
            {
                "id": id2,
                "task_name": "task_name2",
                "task_description": "task_description2",
                "is_finished": False,
            },
            {
                "id": id3,
                "task_name": "task_name3",
                "task_description": "task_description3",
                "is_finished": False,
            },
        ]
E       AssertionError: assert [{'descriptio...'task_name3'}] == [{'id': 1, 'i...'task_name3'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:320: AssertionError
__________________________ test_list_tasks_unfinished __________________________

manager = <gemini.TaskManager object at 0x10632f3e0>

    def test_list_tasks_unfinished(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
        tasks = manager.get_all()
        assert len(tasks) == 4
>       assert tasks == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": False,
            },
            {
                "id": id2,
                "task_name": "task_name2",
                "task_description": "task_description2",
                "is_finished": False,
            },
            {
                "id": id3,
                "task_name": "task_name3",
                "task_description": "task_description3",
                "is_finished": False,
            },
            {
                "id": id4,
                "task_name": "task_name4",
                "task_description": "task_description4",
                "is_finished": False,
            },
        ]
E       AssertionError: assert [{'descriptio...'task_name4'}] == [{'id': 1, 'i...'task_name4'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': False} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': False}
E         Use -v to get more diff

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:369: AssertionError
___________________________ test_list_tasks_finished ___________________________

manager = <gemini.TaskManager object at 0x10638b710>

    def test_list_tasks_finished(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
        id4 = manager.add("task_name4", "task_description4")
    
        manager.finish(id1)
        manager.finish(id3)
    
        tasks = manager.get_all()
        assert len(tasks) == 4
>       assert tasks == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": True,
            },
            {
                "id": id2,
                "task_name": "task_name2",
                "task_description": "task_description2",
                "is_finished": False,
            },
            {
                "id": id3,
                "task_name": "task_name3",
                "task_description": "task_description3",
                "is_finished": True,
            },
            {
                "id": id4,
                "task_name": "task_name4",
                "task_description": "task_description4",
                "is_finished": False,
            },
        ]
E       AssertionError: assert [{'descriptio...'task_name4'}] == [{'id': 1, 'i...'task_name4'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': True} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': True}
E         Use -v to get more diff

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:408: AssertionError
_________________________________ test_finish __________________________________

manager = <gemini.TaskManager object at 0x10632f5f0>

    def test_finish(manager):
        id1 = manager.add("task_name1", "task_description1")
        id2 = manager.add("task_name2", "task_description2")
        id3 = manager.add("task_name3", "task_description3")
    
        assert manager.finish(id1) is True
        assert manager.finish(id2) is True
    
>       assert manager.search("task_name1") == [
            {
                "id": id1,
                "task_name": "task_name1",
                "task_description": "task_description1",
                "is_finished": True,
            }
        ]
E       AssertionError: assert [{'descriptio...'task_name1'}] == [{'id': 1, 'i...'task_name1'}]
E         
E         At index 0 diff: {'id': 1, 'name': 'task_name1', 'description': 'task_description1', 'is_finished': True} != {'id': 1, 'task_name': 'task_name1', 'task_description': 'task_description1', 'is_finished': True}
E         Use -v to get more diff

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:451: AssertionError
______________________________ test_finish_empty _______________________________

manager = <gemini.TaskManager object at 0x10635e8a0>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x10635e8a0>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:108: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <gemini.TaskManager object at 0x106382690>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106382690>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:108: TypeError
______________________________ test_finish_float _______________________________

manager = <gemini.TaskManager object at 0x106381af0>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106381af0>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:108: TypeError
_____________________________ test_finish_negative _____________________________

manager = <gemini.TaskManager object at 0x106382a80>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106382a80>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is not positive.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/gemini.py:110: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_add_non_string_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_add_non_string_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_id_empty
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_id_negative
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_id_float
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_task_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_task_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_search_by_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_search_by_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_search_autocomplete
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_list_tasks_unfinished
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_list_tasks_finished
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_finish
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_finish_empty
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_finish_empty_string
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_finish_float
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-gemini.py::test_finish_negative
======================== 21 failed, 26 passed in 0.19s =========================
