Testing module: chatgpt
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py . [  2%]
.........FFF...FFFFFFFF...............FF.FF...                           [100%]

=================================== FAILURES ===================================
___________________________ test_add_non_string_name ___________________________

manager = <chatgpt.TaskManager object at 0x104db1ac0>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104db1ac0>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the todo list.
    
        Args:
            task_name (str): Name of the task.
            task_description (str): Description of the task.
    
        Returns:
            int: The unique ID assigned to the task.
    
        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:31: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <chatgpt.TaskManager object at 0x104d7b9b0>

    def test_add_non_string_description(manager):
        with pytest.raises(ValueError):
>           manager.add("task_name", 123)

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d7b9b0>, task_name = 'task_name'
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the todo list.
    
        Args:
            task_name (str): Name of the task.
            task_description (str): Description of the task.
    
        Returns:
            int: The unique ID assigned to the task.
    
        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
        if not task_name.strip():
            raise ValueError("Task name cannot be empty.")
>       if not task_description.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:33: AttributeError
___________________ test_add_non_string_name_and_description ___________________

manager = <chatgpt.TaskManager object at 0x104dd5070>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd5070>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the todo list.
    
        Args:
            task_name (str): Name of the task.
            task_description (str): Description of the task.
    
        Returns:
            int: The unique ID assigned to the task.
    
        Raises:
            ValueError: If task_name or task_description is an empty string.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:31: AttributeError
___________________________ test_remove_by_id_empty ____________________________

manager = <chatgpt.TaskManager object at 0x104dd4740>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd4740>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
________________________ test_remove_by_id_empty_string ________________________

manager = <chatgpt.TaskManager object at 0x104dd43b0>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd43b0>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
__________________________ test_remove_by_id_negative __________________________

manager = <chatgpt.TaskManager object at 0x104ddcbf0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104ddcbf0>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <chatgpt.TaskManager object at 0x104ddd5b0>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104ddd5b0>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
___________________________ test_remove_by_task_name ___________________________

manager = <chatgpt.TaskManager object at 0x104dd4080>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd4080>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <chatgpt.TaskManager object at 0x104dd7050>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd7050>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
_______________________ test_remove_by_task_description ________________________

manager = <chatgpt.TaskManager object at 0x104dd6b40>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd6b40>
task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
_________________ test_remove_by_task_description_non_existent _________________

manager = <chatgpt.TaskManager object at 0x104dd6000>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104dd6000>
task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task by its unique ID.
    
        Args:
            task_id (int): The unique identifier for the task to be removed.
    
        Returns:
            bool: True if the task was successfully removed, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:61: ValueError
______________________________ test_finish_empty _______________________________

manager = <chatgpt.TaskManager object at 0x104db2870>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104db2870>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id (int): The unique identifier for the task.
    
        Returns:
            bool: True if task is marked as finished, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:105: ValueError
___________________________ test_finish_empty_string ___________________________

manager = <chatgpt.TaskManager object at 0x104d7a300>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d7a300>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id (int): The unique identifier for the task.
    
        Returns:
            bool: True if task is marked as finished, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:105: ValueError
______________________________ test_finish_float _______________________________

manager = <chatgpt.TaskManager object at 0x104d7bf50>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d7bf50>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id (int): The unique identifier for the task.
    
        Returns:
            bool: True if task is marked as finished, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:105: ValueError
_____________________________ test_finish_negative _____________________________

manager = <chatgpt.TaskManager object at 0x104d7aea0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chatgpt.TaskManager object at 0x104d7aea0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as completed.
    
        Args:
            task_id (int): The unique identifier for the task.
    
        Returns:
            bool: True if task is marked as finished, False if the task was not found.
    
        Raises:
            ValueError: If task_id is not a positive integer.
        """
        if not isinstance(task_id, int) or task_id <= 0:
>           raise ValueError("Task ID must be a positive integer.")
E           ValueError: Task ID must be a positive integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/chatgpt.py:105: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_add_non_string_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_add_non_string_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_empty
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_negative
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_id_float
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_empty
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_empty_string
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_float
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-chatgpt.py::test_finish_negative
======================== 15 failed, 32 passed in 0.17s =========================
