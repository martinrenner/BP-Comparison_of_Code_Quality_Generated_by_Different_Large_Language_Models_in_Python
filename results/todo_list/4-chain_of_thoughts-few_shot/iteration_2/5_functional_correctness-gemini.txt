Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 47 items

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py . [  2%]
.......F.FFF...FFFFFFFF...............FF.FF...                           [100%]

=================================== FAILURES ===================================
_______________________ test_add_with_empty_description ________________________

manager = <gemini.TaskManager object at 0x106e31b50>

    def test_add_with_empty_description(manager):
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:74: Failed
___________________________ test_add_non_string_name ___________________________

manager = <gemini.TaskManager object at 0x106df9a60>

    def test_add_non_string_name(manager):
        with pytest.raises(ValueError):
>           manager.add(123, "task_description")

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106df9a60>, task_name = 123
task_description = 'task_description'

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): A description of the task.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If the task_name is empty.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:28: AttributeError
_______________________ test_add_non_string_description ________________________

manager = <gemini.TaskManager object at 0x106dfaea0>

    def test_add_non_string_description(manager):
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:95: Failed
___________________ test_add_non_string_name_and_description ___________________

manager = <gemini.TaskManager object at 0x106dfb500>

    def test_add_non_string_name_and_description(manager):
        with pytest.raises(ValueError):
>           manager.add(123, 123)

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106dfb500>, task_name = 123
task_description = 123

    def add(self, task_name: str, task_description: str) -> int:
        """
        Adds a new task to the list.
    
        Args:
            task_name (str): The name of the task.
            task_description (str): A description of the task.
    
        Returns:
            int: The unique ID assigned to the new task.
    
        Raises:
            ValueError: If the task_name is empty.
        """
>       if not task_name.strip():
E       AttributeError: 'int' object has no attribute 'strip'

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:28: AttributeError
___________________________ test_remove_by_id_empty ____________________________

manager = <gemini.TaskManager object at 0x106e57020>

    def test_remove_by_id_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(None) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e57020>, task_id = None

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
________________________ test_remove_by_id_empty_string ________________________

manager = <gemini.TaskManager object at 0x106e56930>

    def test_remove_by_id_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove("") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e56930>, task_id = ''

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
__________________________ test_remove_by_id_negative __________________________

manager = <gemini.TaskManager object at 0x106e55eb0>

    def test_remove_by_id_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(-1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:158: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e55eb0>, task_id = -1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id < 0:
>           raise ValueError("Task ID cannot be negative.")
E           ValueError: Task ID cannot be negative.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:57: ValueError
___________________________ test_remove_by_id_float ____________________________

manager = <gemini.TaskManager object at 0x106e55880>

    def test_remove_by_id_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.remove(1.1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:164: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e55880>, task_id = 1.1

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
___________________________ test_remove_by_task_name ___________________________

manager = <gemini.TaskManager object at 0x106dfb7a0>

    def test_remove_by_task_name(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name1") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106dfb7a0>, task_id = 'task_name1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
____________________ test_remove_by_task_name_non_existent _____________________

manager = <gemini.TaskManager object at 0x106dfad20>

    def test_remove_by_task_name_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_name5") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106dfad20>, task_id = 'task_name5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
_______________________ test_remove_by_task_description ________________________

manager = <gemini.TaskManager object at 0x106e545c0>

    def test_remove_by_task_description(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description1") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e545c0>, task_id = 'task_description1'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
_________________ test_remove_by_task_description_non_existent _________________

manager = <gemini.TaskManager object at 0x106e55bb0>

    def test_remove_by_task_description_non_existent(manager):
        manager.add("task_name1", "task_description1")
        manager.add("task_name2", "task_description2")
        manager.add("task_name3", "task_description3")
        manager.add("task_name4", "task_description4")
    
>       assert manager.remove("task_description5") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e55bb0>, task_id = 'task_description5'

    def remove(self, task_id: int) -> bool:
        """
        Removes a task from the list by its ID.
    
        Args:
            task_id (int): The ID of the task to remove.
    
        Returns:
            bool: True if the task was successfully removed, False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task_id is negative
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:55: TypeError
______________________________ test_finish_empty _______________________________

manager = <gemini.TaskManager object at 0x106e56750>

    def test_finish_empty(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(None) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:512: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e56750>, task_id = None

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished,
                  False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:114: TypeError
___________________________ test_finish_empty_string ___________________________

manager = <gemini.TaskManager object at 0x106e56ba0>

    def test_finish_empty_string(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish("") is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:517: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e56ba0>, task_id = ''

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished,
                  False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:114: TypeError
______________________________ test_finish_float _______________________________

manager = <gemini.TaskManager object at 0x106e55b80>

    def test_finish_float(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(1.1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e55b80>, task_id = 1.1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished,
                  False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task negative.
        """
        if not isinstance(task_id, int):
>           raise TypeError("Task ID must be an integer.")
E           TypeError: Task ID must be an integer.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:114: TypeError
_____________________________ test_finish_negative _____________________________

manager = <gemini.TaskManager object at 0x106e54ce0>

    def test_finish_negative(manager):
        manager.add("task_name1", "task_description1")
>       assert manager.finish(-1) is False

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py:533: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.TaskManager object at 0x106e54ce0>, task_id = -1

    def finish(self, task_id: int) -> bool:
        """
        Marks a task as finished.
    
        Args:
            task_id (int): The ID of the task to mark as finished.
    
        Returns:
            bool: True if the task was found and marked as finished,
                  False otherwise.
    
        Raises:
            TypeError: If task_id is not an integer.
            ValueError: If task negative.
        """
        if not isinstance(task_id, int):
            raise TypeError("Task ID must be an integer.")
        if task_id < 0:
>           raise ValueError("Task ID cannot be negative.")
E           ValueError: Task ID cannot be negative.

generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/gemini.py:116: ValueError
=========================== short test summary info ============================
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_with_empty_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_non_string_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_non_string_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_add_non_string_name_and_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_id_empty
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_id_empty_string
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_id_negative
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_id_float
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_task_name
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_task_name_non_existent
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_task_description
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_remove_by_task_description_non_existent
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_finish_empty
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_finish_empty_string
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_finish_float
FAILED generated/code/todo_list/4-chain_of_thoughts-few_shot/iteration_2/5_functional_correctness-gemini.py::test_finish_negative
======================== 16 failed, 31 passed in 0.17s =========================
