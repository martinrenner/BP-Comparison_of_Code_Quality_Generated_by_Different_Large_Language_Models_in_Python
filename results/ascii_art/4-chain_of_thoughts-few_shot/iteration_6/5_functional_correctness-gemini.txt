Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py . [  2%]
..F......F...F..FFFFFFFFFFF...F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x106300590>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/gemini.py:51: in draw_square
    self._validate_input(symbol, width=width)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x106300590>, symbol = '*', width = 1.5
height = None

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for drawing functions.
    
        Args:
            symbol (str): The character to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            TypeError: If width/height are not integers or if the symbol is not a string.
            ValueError: If width/height are not positive, or if the symbol is not a single character or contains whitespace.
        """
    
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
    
        if width is not None:
            if not isinstance(width, int):
>               raise TypeError("Width must be an integer.")
E               TypeError: Width must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/gemini.py:29: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x106300f20>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/gemini.py:66: in draw_rectangle
    self._validate_input(symbol, width=width, height=height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x106300f20>, symbol = '*', width = 1.5
height = 3

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for drawing functions.
    
        Args:
            symbol (str): The character to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            TypeError: If width/height are not integers or if the symbol is not a string.
            ValueError: If width/height are not positive, or if the symbol is not a single character or contains whitespace.
        """
    
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
    
        if width is not None:
            if not isinstance(width, int):
>               raise TypeError("Width must be an integer.")
E               TypeError: Width must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/gemini.py:29: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x106317500>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x106317500>.draw_parallelogram

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x106314dd0>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x106315580>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x106315e50>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x106316900>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x106317350>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
E       TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:199: TypeError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x106317c50>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
E       TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:209: TypeError
_____________________________ test_triangle_empty ______________________________

art = <gemini.AsciiArt object at 0x106316c60>

    def test_triangle_empty(art):
        with pytest.raises(ValueError):
>           art.draw_triangle(10, 3, "")
E           TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:221: TypeError
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x106315400>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
>           art.draw_triangle(-1, 3, "*")
E           TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:228: TypeError
________________________ test_triangle_multichar_input _________________________

art = <gemini.AsciiArt object at 0x106315130>

    def test_triangle_multichar_input(art):
        with pytest.raises(ValueError):
>           art.draw_triangle(5, 5, "abc")
E           TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:241: TypeError
_________________________ test_triangle_char_contained _________________________

art = <gemini.AsciiArt object at 0x1054f2e70>

    def test_triangle_char_contained(art):
        printable_char = "a"
>       result = art.draw_triangle(5, 5, printable_char)
E       TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:246: TypeError
_______________________ test_triangle_char_only_defined ________________________

art = <gemini.AsciiArt object at 0x106302540>

    def test_triangle_char_only_defined(art):
        printable_char = "a"
>       result = art.draw_triangle(5, 5, printable_char)
E       TypeError: AsciiArt.draw_triangle() takes 3 positional arguments but 4 were given

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:252: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1063b9370>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/gemini.py:119: in draw_pyramid
    self._validate_input(symbol, height=height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1063b9370>, symbol = '*', width = None
height = 1.5

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for drawing functions.
    
        Args:
            symbol (str): The character to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            TypeError: If width/height are not integers or if the symbol is not a string.
            ValueError: If width/height are not positive, or if the symbol is not a single character or contains whitespace.
        """
    
        if not isinstance(symbol, str):
            raise TypeError("Symbol must be a string.")
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
    
        if width is not None:
            if not isinstance(width, int):
                raise TypeError("Width must be an integer.")
            if width <= 0:
                raise ValueError("Width must be positive.")
    
        if height is not None:
            if not isinstance(height, int):
>               raise TypeError("Height must be an integer.")
E               TypeError: Height must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/gemini.py:35: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_empty
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_multichar_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_char_contained
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_char_only_defined
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_6/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 15 failed, 20 passed in 0.11s =========================
