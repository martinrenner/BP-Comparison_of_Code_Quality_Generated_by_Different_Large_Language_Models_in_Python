Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <claude.AsciiArt object at 0x1028d3f80>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x1028d3f80>, width = 1.5, symbol = '*'

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square filled with the specified symbol.
    
        Args:
            width (int): The side length of the square.
            symbol (str): The character to use for drawing.
    
        Returns:
            str: A multi-line string representing the square.
    
        Raises:
            ValueError: If width is not positive or symbol is invalid.
        """
        # For a square, width and height are the same
        self._validate_input(width, width, symbol)
    
        # Create a row of symbols
>       row = symbol * width
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/claude.py:53: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <claude.AsciiArt object at 0x1028d0320>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x1028d0320>, width = 1.5, height = 3
symbol = '*'

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle filled with the specified symbol.
    
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing.
    
        Returns:
            str: A multi-line string representing the rectangle.
    
        Raises:
            ValueError: If width or height is not positive or symbol is invalid.
        """
        self._validate_input(width, height, symbol)
    
        # Create a row of symbols
>       row = symbol * width
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/claude.py:78: TypeError
______________________________ test_parallelogram ______________________________

art = <claude.AsciiArt object at 0x1028f3200>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <claude.AsciiArt object at 0x1028f3200>.draw_parallelogram

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <claude.AsciiArt object at 0x1028f0740>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <claude.AsciiArt object at 0x1028f0fe0>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <claude.AsciiArt object at 0x1028f1820>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <claude.AsciiArt object at 0x1028f2270>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <claude.AsciiArt object at 0x1028f2c60>

    def test_triangle(art):
        assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
>       assert art.draw_triangle(5, 3, "*") in {"*\n***\n******", "*\n***\n******\n"}
E       AssertionError: assert '*\n***\n*****' in {'*\n***\n******', '*\n***\n******\n'}
E        +  where '*\n***\n*****' = draw_triangle(5, 3, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x1028f2c60>.draw_triangle

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:203: AssertionError
_____________________________ test_triangle_large ______________________________

art = <claude.AsciiArt object at 0x1028d0f80>

    def test_triangle_large(art):
        assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
>       assert art.draw_triangle(3, 150, "*") in {
            "*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***",
            "*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n",
        }
E       AssertionError: assert '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n*\n*\n*\n*\n*\n*...*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***' in {'*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\...\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n'}
E        +  where '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*\n*\n*\n*\n*\n*\n*...*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***' = draw_triangle(3, 150, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x1028d0f80>.draw_triangle

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:213: AssertionError
__________________________ test_triangle_wrong_input ___________________________

art = <claude.AsciiArt object at 0x101badb20>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:231: Failed
___________________________ test_pyramid_wrong_input ___________________________

art = <claude.AsciiArt object at 0x1028f3710>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x1028f3710>, height = 1.5, symbol = '*'

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid filled with the specified symbol.
    
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing.
    
        Returns:
            str: A multi-line string representing the pyramid.
    
        Raises:
            ValueError: If height is not positive or symbol is invalid.
        """
        # For a pyramid, we only need height and symbol
        self._validate_input(height, height, symbol)
    
        pyramid = []
>       for i in range(height):
E       TypeError: 'float' object cannot be interpreted as an integer

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/claude.py:158: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_square_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_parallelogram
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_triangle
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_triangle_large
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_9/5_functional_correctness-claude.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
