Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x1021884d0>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:42: in draw_square
    self._validate_input(width, 1, symbol)  # height is irrelevant for square, use dummy value.
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1021884d0>, width = 1.5, height = 1
symbol = '*', is_pyramid = False

    def _validate_input(self, width: int, height: int, symbol: str, is_pyramid: bool = False) -> None:
        """Validates common input parameters for drawing functions."""
        if not isinstance(width, int):
>           raise TypeError("Width must be an integer.")
E           TypeError: Width must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:9: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x102189160>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:61: in draw_rectangle
    self._validate_input(width, height, symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x102189160>, width = 1.5, height = 3
symbol = '*', is_pyramid = False

    def _validate_input(self, width: int, height: int, symbol: str, is_pyramid: bool = False) -> None:
        """Validates common input parameters for drawing functions."""
        if not isinstance(width, int):
>           raise TypeError("Width must be an integer.")
E           TypeError: Width must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:9: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x10219cec0>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX\n' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX\n' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x10219cec0>.draw_parallelogram

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x10219d970>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x10219e0c0>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x10219eb10>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x10219f500>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x1013ae3f0>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1013ae3f0>, width = 9, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.
    
        Args:
            width (int): The width of the triangle's base.
            height (int): The height of the triangle.
            symbol (str): The character to use.
    
        Returns:
            str: A multi-line string representing the triangle.
    
        Raises:
            TypeError: If width/height are not integers or symbol is not a string
            ValueError: If symbol is invalid, or dimensions are not positive.
        """
        self._validate_input(width, height, symbol)
        if width != height:
>           raise ValueError("Width and height must be equal for a right-angled triangle.")
E           ValueError: Width and height must be equal for a right-angled triangle.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:104: ValueError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x10219f8c0>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10219f8c0>, width = 150, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.
    
        Args:
            width (int): The width of the triangle's base.
            height (int): The height of the triangle.
            symbol (str): The character to use.
    
        Returns:
            str: A multi-line string representing the triangle.
    
        Raises:
            TypeError: If width/height are not integers or symbol is not a string
            ValueError: If symbol is invalid, or dimensions are not positive.
        """
        self._validate_input(width, height, symbol)
        if width != height:
>           raise ValueError("Width and height must be equal for a right-angled triangle.")
E           ValueError: Width and height must be equal for a right-angled triangle.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:104: ValueError
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x10219e120>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:102: in draw_triangle
    self._validate_input(width, height, symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10219e120>, width = 1.5, height = 3
symbol = '*', is_pyramid = False

    def _validate_input(self, width: int, height: int, symbol: str, is_pyramid: bool = False) -> None:
        """Validates common input parameters for drawing functions."""
        if not isinstance(width, int):
>           raise TypeError("Width must be an integer.")
E           TypeError: Width must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:9: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x10219d5b0>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10219d5b0>, height = 1.5, symbol = '*'

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid.
    
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use.
    
        Returns:
            str: A multi-line string representing the pyramid.
    
        Raises:
            TypeError: If height is not an integer or symbol is not a string
            ValueError: If symbol is invalid, or height is not positive.
        """
        self._validate_input(width=1, height=height, symbol=symbol, is_pyramid=True)  # width is not required
        if not isinstance(height, int):
>           raise TypeError("Height must be an integer.")
E           TypeError: Height must be an integer.

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/gemini.py:127: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_8/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
