Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <claude.AsciiArt object at 0x101fedc40>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x101fedc40>, width = 1.5, symbol = '*'

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square with the specified width using the given symbol.
    
        Args:
            width (int): The width and height of the square.
            symbol (str): The character to use for drawing the square.
    
        Returns:
            str: A multi-line string representing the ASCII square.
    
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(symbol, width)
    
        # Create the square by repeating the symbol
>       row = symbol * width
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/claude.py:50: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <claude.AsciiArt object at 0x102024530>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x102024530>, width = 1.5, height = 3
symbol = '*'

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle with the specified width and height using the given symbol.
    
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The character to use for drawing the rectangle.
    
        Returns:
            str: A multi-line string representing the ASCII rectangle.
    
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(symbol, width, height)
    
        # Create the rectangle by repeating the symbol
>       row = symbol * width
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/claude.py:73: TypeError
______________________________ test_parallelogram ______________________________

art = <claude.AsciiArt object at 0x1020457c0>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <claude.AsciiArt object at 0x1020457c0>.draw_parallelogram

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <claude.AsciiArt object at 0x1020440b0>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <claude.AsciiArt object at 0x102044b30>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <claude.AsciiArt object at 0x1020452e0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <claude.AsciiArt object at 0x102045ca0>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <claude.AsciiArt object at 0x102046720>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
E       AssertionError: assert '*\n*****\n*********' in {'***\n******\n*********', '***\n******\n*********\n'}
E        +  where '*\n*****\n*********' = draw_triangle(9, 3, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x102046720>.draw_triangle

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:199: AssertionError
_____________________________ test_triangle_large ______________________________

art = <claude.AsciiArt object at 0x101fefb60>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
E       AssertionError: assert '*\n****************************************************************************\n******************************************************************************************************************************************************' in {'**************************************************\n****************************************************************...*******************************************************************************************************************\n'}
E        +  where '*\n****************************************************************************\n******************************************************************************************************************************************************' = draw_triangle(150, 3, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x101fefb60>.draw_triangle

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:209: AssertionError
__________________________ test_triangle_wrong_input ___________________________

art = <claude.AsciiArt object at 0x102024440>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x102024440>, width = 1.5, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle with the specified width and height using the given symbol.
        The triangle grows diagonally to the right from the top-left corner.
    
        Args:
            width (int): The maximum width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The character to use for drawing the triangle.
    
        Returns:
            str: A multi-line string representing the ASCII right-angled triangle.
    
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(symbol, width, height)
    
        triangle_rows = []
        # Calculate width increment per row
        if height <= 1:
            width_per_row = width
        else:
            width_per_row = width / (height - 1)
    
        for i in range(height):
            # Calculate the width for the current row, ensuring it's an integer
            current_width = min(width, int(i * width_per_row) + 1)
>           row = symbol * current_width
E           TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/claude.py:133: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <claude.AsciiArt object at 0x102046f30>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x102046f30>, height = 1.5, symbol = '*'

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid with the specified height using the given symbol.
    
        Args:
            height (int): The height of the pyramid.
            symbol (str): The character to use for drawing the pyramid.
    
        Returns:
            str: A multi-line string representing the ASCII pyramid.
    
        Raises:
            ValueError: If inputs are invalid.
        """
        self._validate_inputs(symbol, height)
    
        pyramid_rows = []
>       for i in range(height):
E       TypeError: 'float' object cannot be interpreted as an integer

generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/claude.py:155: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_square_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_parallelogram
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_triangle
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_triangle_large
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/4-chain_of_thoughts-few_shot/iteration_7/5_functional_correctness-claude.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
