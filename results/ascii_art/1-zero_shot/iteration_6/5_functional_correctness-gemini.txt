Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x10269ab10>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:25: in draw_square
    self._validate_input(width, symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10269ab10>, width = 1.5, symbol = '*'
height = None

    def _validate_input(self, width: int, symbol: str, height: int = None) -> None:
        """
        Validates the input parameters.
    
        Args:
            width: The width of the shape.
            symbol: The character to use for drawing.
            height: The height of the shape (optional, defaults to None).
    
        Raises:
            ValueError: If input parameters are invalid.
        """
        if not isinstance(width, int) or (height is not None and not isinstance(height, int)):
>           raise TypeError("Width and height must be integers.")
E           TypeError: Width and height must be integers.

generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:148: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x1026d85f0>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:49: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1026d85f0>, width = 1.5, symbol = '*'
height = 3

    def _validate_input(self, width: int, symbol: str, height: int = None) -> None:
        """
        Validates the input parameters.
    
        Args:
            width: The width of the shape.
            symbol: The character to use for drawing.
            height: The height of the shape (optional, defaults to None).
    
        Raises:
            ValueError: If input parameters are invalid.
        """
        if not isinstance(width, int) or (height is not None and not isinstance(height, int)):
>           raise TypeError("Width and height must be integers.")
E           TypeError: Width and height must be integers.

generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:148: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x1026fb470>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX\n' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX\n' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x1026fb470>.draw_parallelogram

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x1026f80b0>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x1026f8860>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x1026f9070>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x1026f99d0>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x1026fa3f0>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1026fa3f0>, width = 9, height = 3
symbol = '*'

        def draw_triangle(self, width: int, height: int, symbol: str) -> str:
            """
            Draws a right-angled triangle. The triangle grows diagonally
    		to the right, starting from the top-left corner.
    
            Args:
                width: The max width of the triangle (at the bottom).
                height: The height of the triangle.
                symbol: The character to use.
    
            Returns:
                A multiline string representing the ASCII art triangle.
    
            Raises:
                ValueError: If width/height is negative/zero, or the symbol is invalid.
                NotImplementedError: If width > height
            """
            self._validate_input(width, symbol, height)
    
            if (width > height):
>               raise NotImplementedError("Current implementation of right angled triangle cannot have width > height")
E               NotImplementedError: Current implementation of right angled triangle cannot have width > height

generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:101: NotImplementedError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x10269b920>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10269b920>, width = 150, height = 3
symbol = '*'

        def draw_triangle(self, width: int, height: int, symbol: str) -> str:
            """
            Draws a right-angled triangle. The triangle grows diagonally
    		to the right, starting from the top-left corner.
    
            Args:
                width: The max width of the triangle (at the bottom).
                height: The height of the triangle.
                symbol: The character to use.
    
            Returns:
                A multiline string representing the ASCII art triangle.
    
            Raises:
                ValueError: If width/height is negative/zero, or the symbol is invalid.
                NotImplementedError: If width > height
            """
            self._validate_input(width, symbol, height)
    
            if (width > height):
>               raise NotImplementedError("Current implementation of right angled triangle cannot have width > height")
E               NotImplementedError: Current implementation of right angled triangle cannot have width > height

generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:101: NotImplementedError
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1026da150>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:98: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1026da150>, width = 1.5, symbol = '*'
height = 3

    def _validate_input(self, width: int, symbol: str, height: int = None) -> None:
        """
        Validates the input parameters.
    
        Args:
            width: The width of the shape.
            symbol: The character to use for drawing.
            height: The height of the shape (optional, defaults to None).
    
        Raises:
            ValueError: If input parameters are invalid.
        """
        if not isinstance(width, int) or (height is not None and not isinstance(height, int)):
>           raise TypeError("Width and height must be integers.")
E           TypeError: Width and height must be integers.

generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:148: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1026fabd0>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:125: in draw_pyramid
    self._validate_input(height, symbol)  # Height is used as width here
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1026fabd0>, width = 1.5, symbol = '*'
height = None

    def _validate_input(self, width: int, symbol: str, height: int = None) -> None:
        """
        Validates the input parameters.
    
        Args:
            width: The width of the shape.
            symbol: The character to use for drawing.
            height: The height of the shape (optional, defaults to None).
    
        Raises:
            ValueError: If input parameters are invalid.
        """
        if not isinstance(width, int) or (height is not None and not isinstance(height, int)):
>           raise TypeError("Width and height must be integers.")
E           TypeError: Width and height must be integers.

generated/code/ascii_art/1-zero_shot/iteration_6/gemini.py:148: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_6/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
