Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py . [  2%]
..F...FFFFFFFFFFFFFFFFFFFFF...F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x105232db0>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:25: in draw_square
    self._validate_input(width, symbol)  # Unified input validation
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x105232db0>, args = (1.5, '*'), symbol = '*'
dimensions = (1.5,), dim = 1.5

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
________________________________ test_rectangle ________________________________

art = <gemini.AsciiArt object at 0x10526ca70>

    def test_rectangle(art):
>       assert art.draw_rectangle(5, 3, "*") in {
            "*****\n*****\n*****",
            "*****\n*****\n*****\n",
        }

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10526ca70>, args = (5, '*', 3), symbol = 3
dimensions = (5, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_____________________________ test_rectangle_large _____________________________

art = <gemini.AsciiArt object at 0x10528deb0>

    def test_rectangle_large(art):
>       assert art.draw_rectangle(100, 50, "*") in {
            "****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************",
            "****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n",
        }

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528deb0>, args = (100, '*', 50)
symbol = 50, dimensions = (100, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_____________________________ test_rectangle_empty _____________________________

art = <gemini.AsciiArt object at 0x10528c1d0>

    def test_rectangle_empty(art):
        with pytest.raises(ValueError):
>           art.draw_rectangle(5, 3, "")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528c1d0>, args = (5, '', 3), symbol = 3
dimensions = (5, ''), dim = ''

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x10528cf80>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(3, -1, "*")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528cf80>, args = (3, '*', -1), symbol = -1
dimensions = (3, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
________________________ test_rectangle_multichar_input ________________________

art = <gemini.AsciiArt object at 0x105233920>

    def test_rectangle_multichar_input(art):
        with pytest.raises(ValueError):
>           art.draw_rectangle(5, 10, "abc")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x105233920>, args = (5, 'abc', 10)
symbol = 10, dimensions = (5, 'abc'), dim = 'abc'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
________________________ test_rectangle_char_contained _________________________

art = <gemini.AsciiArt object at 0x10526c290>

    def test_rectangle_char_contained(art):
        printable_char = "a"
>       result = art.draw_rectangle(5, 10, printable_char)

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10526c290>, args = (5, 'a', 10), symbol = 10
dimensions = (5, 'a'), dim = 'a'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_______________________ test_rectangle_char_only_defined _______________________

art = <gemini.AsciiArt object at 0x10528d640>

    def test_rectangle_char_only_defined(art):
        printable_char = "a"
>       result = art.draw_rectangle(5, 10, printable_char)

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:47: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528d640>, args = (5, 'a', 10), symbol = 10
dimensions = (5, 'a'), dim = 'a'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x10528d430>

    def test_parallelogram(art):
>       assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:70: in draw_parallelogram
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528d430>, args = (10, '*', 5), symbol = 5
dimensions = (10, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
___________________________ test_parallelogram_large ___________________________

art = <gemini.AsciiArt object at 0x10528e720>

    def test_parallelogram_large(art):
>       assert art.draw_parallelogram(50, 35, "*") in {
            "**************************************************\n **************************************************\n  **************************************************\n   **************************************************\n    **************************************************\n     **************************************************\n      **************************************************\n       **************************************************\n        **************************************************\n         **************************************************\n          **************************************************\n           **************************************************\n            **************************************************\n             **************************************************\n              **************************************************\n               **************************************************\n                **************************************************\n                 **************************************************\n                  **************************************************\n                   **************************************************\n                    **************************************************\n                     **************************************************\n                      **************************************************\n                       **************************************************\n                        **************************************************\n                         **************************************************\n                          **************************************************\n                           **************************************************\n                            **************************************************\n                             **************************************************\n                              **************************************************\n                               **************************************************\n                                **************************************************\n                                 **************************************************\n                                  **************************************************\n",
            "**************************************************\n **************************************************\n  **************************************************\n   **************************************************\n    **************************************************\n     **************************************************\n      **************************************************\n       **************************************************\n        **************************************************\n         **************************************************\n          **************************************************\n           **************************************************\n            **************************************************\n             **************************************************\n              **************************************************\n               **************************************************\n                **************************************************\n                 **************************************************\n                  **************************************************\n                   **************************************************\n                    **************************************************\n                     **************************************************\n                      **************************************************\n                       **************************************************\n                        **************************************************\n                         **************************************************\n                          **************************************************\n                           **************************************************\n                            **************************************************\n                             **************************************************\n                              **************************************************\n                               **************************************************\n                                **************************************************\n                                 **************************************************\n                                  **************************************************",
        }

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:70: in draw_parallelogram
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528e720>, args = (50, '*', 35)
symbol = 35, dimensions = (50, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
___________________________ test_parallelogram_empty ___________________________

art = <gemini.AsciiArt object at 0x10528f950>

    def test_parallelogram_empty(art):
        with pytest.raises(ValueError):
>           art.draw_parallelogram(10, 8, "")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:160: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:70: in draw_parallelogram
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528f950>, args = (10, '', 8), symbol = 8
dimensions = (10, ''), dim = ''

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x10528ee40>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x10528c770>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x10375cbc0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x10526c950>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x1052c8e00>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1052c8e00>, args = (9, '*', 3), symbol = 3
dimensions = (9, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x1052cb5f0>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1052cb5f0>, args = (150, '*', 3), symbol = 3
dimensions = (150, '*'), dim = '*'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_____________________________ test_triangle_empty ______________________________

art = <gemini.AsciiArt object at 0x1052c8770>

    def test_triangle_empty(art):
        with pytest.raises(ValueError):
>           art.draw_triangle(10, 3, "")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1052c8770>, args = (10, '', 3), symbol = 3
dimensions = (10, ''), dim = ''

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1052c9a30>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1052c9a30>, args = (1.5, '*', 3), symbol = 3
dimensions = (1.5, '*'), dim = 1.5

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
________________________ test_triangle_multichar_input _________________________

art = <gemini.AsciiArt object at 0x10526d8e0>

    def test_triangle_multichar_input(art):
        with pytest.raises(ValueError):
>           art.draw_triangle(5, 5, "abc")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:241: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10526d8e0>, args = (5, 'abc', 5), symbol = 5
dimensions = (5, 'abc'), dim = 'abc'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_________________________ test_triangle_char_contained _________________________

art = <gemini.AsciiArt object at 0x10528db80>

    def test_triangle_char_contained(art):
        printable_char = "a"
>       result = art.draw_triangle(5, 5, printable_char)

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528db80>, args = (5, 'a', 5), symbol = 5
dimensions = (5, 'a'), dim = 'a'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
_______________________ test_triangle_char_only_defined ________________________

art = <gemini.AsciiArt object at 0x10528c110>

    def test_triangle_char_only_defined(art):
        printable_char = "a"
>       result = art.draw_triangle(5, 5, printable_char)

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:93: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x10528c110>, args = (5, 'a', 5), symbol = 5
dimensions = (5, 'a'), dim = 'a'

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1052ca0f0>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:117: in draw_pyramid
    self._validate_input(height, symbol)  # height acts as dimension
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1052ca0f0>, args = (1.5, '*'), symbol = '*'
dimensions = (1.5,), dim = 1.5

    def _validate_input(self, *args):
        """
        Private helper function for input validation. Centralized validation logic.
    
        Args:
            *args:  Variable number of arguments.  The last argument MUST be the
                    symbol.  All arguments before the symbol are treated as
                    integer dimensions (width, height).
        Raises:
            ValueError: If dimensions are negative,  symbol is empty, not a single character, or whitespace.
        """
        symbol = args[-1]
        dimensions = args[:-1]
    
        for dim in dimensions:
            if not isinstance(dim, int):
>               raise TypeError("Dimensions must be integers.") #Added type checking
E               TypeError: Dimensions must be integers.

generated/code/ascii_art/1-zero_shot/iteration_2/gemini.py:143: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle_large
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle_empty
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle_multichar_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle_char_contained
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_rectangle_char_only_defined
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_large
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_empty
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_empty
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_multichar_input
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_char_contained
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_char_only_defined
FAILED generated/code/ascii_art/1-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 23 failed, 12 passed in 0.15s =========================
