Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x1058a84d0>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:54: in draw_square
    self._validate_input(width=width, symbol=symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1058a84d0>, width = 1.5, height = None
symbol = '*'

    def _validate_input(self, width=None, height=None, symbol=None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
            symbol (str, optional): The symbol to use for drawing.
    
        Raises:
            ValueError: If width/height is not positive, or if the symbol is invalid.
            TypeError: If width/height are not integers
        """
    
        if width is not None:
            if not isinstance(width, int):
>               raise TypeError("Width must be an integer.")
E               TypeError: Width must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:22: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x1065922d0>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:76: in draw_rectangle
    self._validate_input(width=width, height=height, symbol=symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1065922d0>, width = 1.5, height = 3
symbol = '*'

    def _validate_input(self, width=None, height=None, symbol=None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
            symbol (str, optional): The symbol to use for drawing.
    
        Raises:
            ValueError: If width/height is not positive, or if the symbol is invalid.
            TypeError: If width/height are not integers
        """
    
        if width is not None:
            if not isinstance(width, int):
>               raise TypeError("Width must be an integer.")
E               TypeError: Width must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:22: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x1065a41d0>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX\n' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX\n' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x1065a41d0>.draw_parallelogram

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x1065a5250>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x1065a5970>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x1065a62d0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x1065a6d20>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x1065a7800>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1065a7800>, width = 9, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.  It grows diagonally to the right.
    
        Args:
            width: the base
            height: the height
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: Multi-line string: ASCII art triangle.
    
        Raises:
            ValueError: If width/height are not positive, or if symbol is invalid.
        """
    
        self._validate_input(width=width, height=height, symbol=symbol)
    
        if width != height:
>           raise ValueError("Width and height of right triangle must be same for this implementation.")
E           ValueError: Width and height of right triangle must be same for this implementation.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:124: ValueError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x1065a76e0>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1065a76e0>, width = 150, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle.  It grows diagonally to the right.
    
        Args:
            width: the base
            height: the height
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: Multi-line string: ASCII art triangle.
    
        Raises:
            ValueError: If width/height are not positive, or if symbol is invalid.
        """
    
        self._validate_input(width=width, height=height, symbol=symbol)
    
        if width != height:
>           raise ValueError("Width and height of right triangle must be same for this implementation.")
E           ValueError: Width and height of right triangle must be same for this implementation.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:124: ValueError
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1065a7140>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:121: in draw_triangle
    self._validate_input(width=width, height=height, symbol=symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1065a7140>, width = 1.5, height = 3
symbol = '*'

    def _validate_input(self, width=None, height=None, symbol=None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
            symbol (str, optional): The symbol to use for drawing.
    
        Raises:
            ValueError: If width/height is not positive, or if the symbol is invalid.
            TypeError: If width/height are not integers
        """
    
        if width is not None:
            if not isinstance(width, int):
>               raise TypeError("Width must be an integer.")
E               TypeError: Width must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:22: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1065a5580>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:145: in draw_pyramid
    self._validate_input(height=height, symbol=symbol)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1065a5580>, width = None, height = 1.5
symbol = '*'

    def _validate_input(self, width=None, height=None, symbol=None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
            symbol (str, optional): The symbol to use for drawing.
    
        Raises:
            ValueError: If width/height is not positive, or if the symbol is invalid.
            TypeError: If width/height are not integers
        """
    
        if width is not None:
            if not isinstance(width, int):
                raise TypeError("Width must be an integer.")
            if width <= 0:
                raise ValueError("Width must be a positive integer.")
    
        if height is not None:
            if not isinstance(height, int):
>               raise TypeError("Height must be an integer.")
E               TypeError: Height must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/gemini.py:28: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_10/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
