Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py . [  2%]
.............F..FFFFFF............                                       [100%]

=================================== FAILURES ===================================
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x1024a89b0>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x1024a89b0>.draw_parallelogram

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x1016791c0>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x1024c8140>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x1024c87a0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x1024c8f80>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x1024c97f0>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1024c97f0>, width = 9, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """Draws a right-angled triangle, filled with symbol."""
        self._validate_input([width, height], symbol)
        result = []
    
        # Check that the triangle can be drawn
        if width > height:
>           raise ValueError("In a right-angled triangle, height must be bigger or equal to width.")
E           ValueError: In a right-angled triangle, height must be bigger or equal to width.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:268: ValueError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x1024ca330>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1024ca330>, width = 150, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """Draws a right-angled triangle, filled with symbol."""
        self._validate_input([width, height], symbol)
        result = []
    
        # Check that the triangle can be drawn
        if width > height:
>           raise ValueError("In a right-angled triangle, height must be bigger or equal to width.")
E           ValueError: In a right-angled triangle, height must be bigger or equal to width.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/gemini.py:268: ValueError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_2/5_functional_correctness-gemini.py::test_triangle_large
========================= 7 failed, 28 passed in 0.09s =========================
