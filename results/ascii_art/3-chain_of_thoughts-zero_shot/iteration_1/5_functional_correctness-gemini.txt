Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x1068f30e0>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:42: in draw_square
    self._validate_input(symbol, width=width)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1068f30e0>, symbol = '*', width = 1.5
height = None

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            symbol (str): The symbol to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            ValueError: If the symbol is invalid or dimensions are negative.
            TypeError: If width or height are not integers.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
        if width is not None and not isinstance(width, int):
>           raise TypeError("Width must be an integer.")
E           TypeError: Width must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:24: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x1068f1040>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:57: in draw_rectangle
    self._validate_input(symbol, width=width, height=height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1068f1040>, symbol = '*', width = 1.5
height = 3

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            symbol (str): The symbol to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            ValueError: If the symbol is invalid or dimensions are negative.
            TypeError: If width or height are not integers.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
        if width is not None and not isinstance(width, int):
>           raise TypeError("Width must be an integer.")
E           TypeError: Width must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:24: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x106907440>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x106907440>.draw_parallelogram

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x1069049e0>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x106905280>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x106905ac0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x1069064e0>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x106906ed0>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
E       AssertionError: assert '*\n**\n***\n****\n*****\n******\n*******\n********\n*********' in {'***\n******\n*********', '***\n******\n*********\n'}
E        +  where '*\n**\n***\n****\n*****\n******\n*******\n********\n*********' = draw_triangle(9, 3, '*')
E        +    where draw_triangle = <gemini.AsciiArt object at 0x106906ed0>.draw_triangle

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:199: AssertionError
----------------------------- Captured stdout call -----------------------------
Warning: For a right-angled triangle, height should ideally match width. Adjusting height to match width.
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x105bfe330>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
E       AssertionError: assert '*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n**********\n***********\n************\n*************\n...**********************************************************************************************************************' in {'**************************************************\n****************************************************************...*******************************************************************************************************************\n'}
E        +  where '*\n**\n***\n****\n*****\n******\n*******\n********\n*********\n**********\n***********\n************\n*************\n...**********************************************************************************************************************' = draw_triangle(150, 3, '*')
E        +    where draw_triangle = <gemini.AsciiArt object at 0x105bfe330>.draw_triangle

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:209: AssertionError
----------------------------- Captured stdout call -----------------------------
Warning: For a right-angled triangle, height should ideally match width. Adjusting height to match width.
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1068f0e60>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:94: in draw_triangle
    self._validate_input(symbol, width=width, height=height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1068f0e60>, symbol = '*', width = 1.5
height = 3

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            symbol (str): The symbol to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            ValueError: If the symbol is invalid or dimensions are negative.
            TypeError: If width or height are not integers.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
        if width is not None and not isinstance(width, int):
>           raise TypeError("Width must be an integer.")
E           TypeError: Width must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:24: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x106904530>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:117: in draw_pyramid
    self._validate_input(symbol, height=height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x106904530>, symbol = '*', width = None
height = 1.5

    def _validate_input(self, symbol: str, width: int = None, height: int = None):
        """
        Validates the input parameters for the drawing functions.
    
        Args:
            symbol (str): The symbol to use for drawing.
            width (int, optional): The width of the shape.
            height (int, optional): The height of the shape.
    
        Raises:
            ValueError: If the symbol is invalid or dimensions are negative.
            TypeError: If width or height are not integers.
        """
        if len(symbol) != 1:
            raise ValueError("Symbol must be a single character.")
        if symbol.isspace():
            raise ValueError("Symbol cannot be whitespace.")
        if width is not None and not isinstance(width, int):
            raise TypeError("Width must be an integer.")
        if height is not None and not isinstance(height, int):
>           raise TypeError("Height must be an integer.")
E           TypeError: Height must be an integer.

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/gemini.py:26: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_1/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
