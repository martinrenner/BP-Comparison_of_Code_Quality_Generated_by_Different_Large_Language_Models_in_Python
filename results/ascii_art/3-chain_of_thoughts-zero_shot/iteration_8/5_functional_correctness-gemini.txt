Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x104b2bc50>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x104b2bc50>, width = 1.5, symbol = '*'

    def draw_square(self, width: int, symbol: str) -> str:
        """Draws a square of the specified width using the given symbol."""
        self._validate_input([width], symbol)  # Validate
>       return "\n".join([symbol * width] * width)
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/gemini.py:155: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <gemini.AsciiArt object at 0x104b287a0>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x104b287a0>, width = 1.5, height = 3
symbol = '*'

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """Draws a rectangle of the specified width and height."""
        self._validate_input([width, height], symbol)
>       return "\n".join([symbol * width] * height)
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/gemini.py:160: TypeError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x104b48530>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <gemini.AsciiArt object at 0x104b48530>.draw_parallelogram

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x104b48650>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x104b48fb0>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x104b497f0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x104b4a1e0>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x104b4ab70>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
E       AssertionError: assert '*\n**\n***' in {'***\n******\n*********', '***\n******\n*********\n'}
E        +  where '*\n**\n***' = draw_triangle(9, 3, '*')
E        +    where draw_triangle = <gemini.AsciiArt object at 0x104b4ab70>.draw_triangle

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:199: AssertionError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x103e598e0>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
E       AssertionError: assert '*\n**\n***' in {'**************************************************\n****************************************************************...*******************************************************************************************************************\n'}
E        +  where '*\n**\n***' = draw_triangle(150, 3, '*')
E        +    where draw_triangle = <gemini.AsciiArt object at 0x103e598e0>.draw_triangle

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:209: AssertionError
__________________________ test_triangle_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x104b29af0>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x104b29af0>, width = 1.5, height = 3
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """Draws a right-angled triangle."""
        self._validate_input([width, height], symbol)
        result = []
>       for i in range(min(width, height)):  # Use min to handle non-square triangles
E       TypeError: 'float' object cannot be interpreted as an integer

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/gemini.py:174: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x104b4b4a0>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x104b4b4a0>, height = 1.5, symbol = '*'

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """Draws a pyramid."""
        self._validate_input([height], symbol)
        result = []
>       for i in range(height):
E       TypeError: 'float' object cannot be interpreted as an integer

generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/gemini.py:183: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/3-chain_of_thoughts-zero_shot/iteration_8/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
