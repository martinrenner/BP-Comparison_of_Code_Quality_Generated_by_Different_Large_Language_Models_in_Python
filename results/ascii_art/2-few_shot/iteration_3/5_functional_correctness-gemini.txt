Testing module: gemini
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py . [  2%]
..F...FF...FFFF.FFFFFF...FF...F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <gemini.AsciiArt object at 0x1019a3ad0>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:44: Failed
________________________________ test_rectangle ________________________________

art = <gemini.AsciiArt object at 0x1027b43e0>

    def test_rectangle(art):
>       assert art.draw_rectangle(5, 3, "*") in {
            "*****\n*****\n*****",
            "*****\n*****\n*****\n",
        }

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:50: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027b43e0>, args = (5, '*', 3)
dimensions = [5, '*'], symbol = 3, dim = '*'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
_____________________________ test_rectangle_large _____________________________

art = <gemini.AsciiArt object at 0x1027d1d90>

    def test_rectangle_large(art):
>       assert art.draw_rectangle(100, 50, "*") in {
            "****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************",
            "****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n****************************************************************************************************\n",
        }

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:50: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027d1d90>, args = (100, '*', 50)
dimensions = [100, '*'], symbol = 50, dim = '*'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
________________________ test_rectangle_char_contained _________________________

art = <gemini.AsciiArt object at 0x1027d0fe0>

    def test_rectangle_char_contained(art):
        printable_char = "a"
>       result = art.draw_rectangle(5, 10, printable_char)

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:123: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:50: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027d0fe0>, args = (5, 'a', 10)
dimensions = [5, 'a'], symbol = 10, dim = 'a'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
_______________________ test_rectangle_char_only_defined _______________________

art = <gemini.AsciiArt object at 0x1027d1a30>

    def test_rectangle_char_only_defined(art):
        printable_char = "a"
>       result = art.draw_rectangle(5, 10, printable_char)

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:50: in draw_rectangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027d1a30>, args = (5, 'a', 10)
dimensions = [5, 'a'], symbol = 10, dim = 'a'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
______________________________ test_parallelogram ______________________________

art = <gemini.AsciiArt object at 0x1027d2240>

    def test_parallelogram(art):
>       assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:75: in draw_parallelogram
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027d2240>, args = (10, '*', 5)
dimensions = [10, '*'], symbol = 5, dim = '*'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
___________________________ test_parallelogram_large ___________________________

art = <gemini.AsciiArt object at 0x1027b5ca0>

    def test_parallelogram_large(art):
>       assert art.draw_parallelogram(50, 35, "*") in {
            "**************************************************\n **************************************************\n  **************************************************\n   **************************************************\n    **************************************************\n     **************************************************\n      **************************************************\n       **************************************************\n        **************************************************\n         **************************************************\n          **************************************************\n           **************************************************\n            **************************************************\n             **************************************************\n              **************************************************\n               **************************************************\n                **************************************************\n                 **************************************************\n                  **************************************************\n                   **************************************************\n                    **************************************************\n                     **************************************************\n                      **************************************************\n                       **************************************************\n                        **************************************************\n                         **************************************************\n                          **************************************************\n                           **************************************************\n                            **************************************************\n                             **************************************************\n                              **************************************************\n                               **************************************************\n                                **************************************************\n                                 **************************************************\n                                  **************************************************\n",
            "**************************************************\n **************************************************\n  **************************************************\n   **************************************************\n    **************************************************\n     **************************************************\n      **************************************************\n       **************************************************\n        **************************************************\n         **************************************************\n          **************************************************\n           **************************************************\n            **************************************************\n             **************************************************\n              **************************************************\n               **************************************************\n                **************************************************\n                 **************************************************\n                  **************************************************\n                   **************************************************\n                    **************************************************\n                     **************************************************\n                      **************************************************\n                       **************************************************\n                        **************************************************\n                         **************************************************\n                          **************************************************\n                           **************************************************\n                            **************************************************\n                             **************************************************\n                              **************************************************\n                               **************************************************\n                                **************************************************\n                                 **************************************************\n                                  **************************************************",
        }

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:75: in draw_parallelogram
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027b5ca0>, args = (50, '*', 35)
dimensions = [50, '*'], symbol = 35, dim = '*'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
________________________ test_parallelogram_wrong_input ________________________

art = <gemini.AsciiArt object at 0x1027b44a0>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <gemini.AsciiArt object at 0x1027d2cc0>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <gemini.AsciiArt object at 0x1027d1e80>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <gemini.AsciiArt object at 0x1027d37d0>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <gemini.AsciiArt object at 0x1027d3a10>

    def test_triangle(art):
>       assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:100: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027d3a10>, args = (9, '*', 3)
dimensions = [9, '*'], symbol = 3, dim = '*'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
_____________________________ test_triangle_large ______________________________

art = <gemini.AsciiArt object at 0x1028fe150>

    def test_triangle_large(art):
>       assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:209: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:100: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1028fe150>, args = (150, '*', 3)
dimensions = [150, '*'], symbol = 3, dim = '*'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
_________________________ test_triangle_char_contained _________________________

art = <gemini.AsciiArt object at 0x1028ffe60>

    def test_triangle_char_contained(art):
        printable_char = "a"
>       result = art.draw_triangle(5, 5, printable_char)

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:100: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1028ffe60>, args = (5, 'a', 5)
dimensions = [5, 'a'], symbol = 5, dim = 'a'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
_______________________ test_triangle_char_only_defined ________________________

art = <gemini.AsciiArt object at 0x1027d36e0>

    def test_triangle_char_only_defined(art):
        printable_char = "a"
>       result = art.draw_triangle(5, 5, printable_char)

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:100: in draw_triangle
    self._validate_input(width, symbol, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <gemini.AsciiArt object at 0x1027d36e0>, args = (5, 'a', 5)
dimensions = [5, 'a'], symbol = 5, dim = 'a'

    def _validate_input(self, *args):
        """
        Validates input parameters for drawing functions. This is a private helper method.
    
        Args:
            *args: Variable number of arguments:  The first n-1 arguments are
                   dimensions (width, height), and the last argument is always the symbol.
    
        Raises:
            ValueError: If any dimension is negative, or if the symbol is empty,
                        contains multiple characters, or consists of whitespace.
        """
        *dimensions, symbol = args
    
        for dim in dimensions:
            if not isinstance(dim, int) or dim < 0:
>               raise ValueError("Dimensions must be non-negative integers.")
E               ValueError: Dimensions must be non-negative integers.

generated/code/ascii_art/2-few_shot/iteration_3/gemini.py:153: ValueError
___________________________ test_pyramid_wrong_input ___________________________

art = <gemini.AsciiArt object at 0x1027d2ab0>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py:289: Failed
=========================== short test summary info ============================
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_square_wrong_input
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_rectangle
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_rectangle_large
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_rectangle_char_contained
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_rectangle_char_only_defined
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_parallelogram
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_parallelogram_large
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_triangle
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_triangle_large
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_triangle_char_contained
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_triangle_char_only_defined
FAILED generated/code/ascii_art/2-few_shot/iteration_3/5_functional_correctness-gemini.py::test_pyramid_wrong_input
======================== 16 failed, 19 passed in 0.12s =========================
