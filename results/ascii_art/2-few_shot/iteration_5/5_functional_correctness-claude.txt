Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <claude.AsciiArt object at 0x1063f8920>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x1063f8920>, width = 1.5, symbol = '*'

    def draw_square(self, width: int, symbol: str) -> str:
        """
        Draws a square ASCII art shape.
    
        Args:
            width (int): The width (and height) of the square.
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: A multi-line string representing the square.
    
        Raises:
            ValueError: If inputs are invalid (see _validate_input).
        """
        self._validate_input(width, width, symbol)
    
>       row = symbol * width
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/2-few_shot/iteration_5/claude.py:53: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <claude.AsciiArt object at 0x1063fa1e0>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x1063fa1e0>, width = 1.5, height = 3
symbol = '*'

    def draw_rectangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a rectangle ASCII art shape.
    
        Args:
            width (int): The width of the rectangle.
            height (int): The height of the rectangle.
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: A multi-line string representing the rectangle.
    
        Raises:
            ValueError: If inputs are invalid (see _validate_input).
        """
        self._validate_input(width, height, symbol)
    
>       row = symbol * width
E       TypeError: can't multiply sequence by non-int of type 'float'

generated/code/ascii_art/2-few_shot/iteration_5/claude.py:74: TypeError
______________________________ test_parallelogram ______________________________

art = <claude.AsciiArt object at 0x10640c890>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <claude.AsciiArt object at 0x10640c890>.draw_parallelogram

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <claude.AsciiArt object at 0x10640d130>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <claude.AsciiArt object at 0x10640d8e0>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <claude.AsciiArt object at 0x10640e1e0>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <claude.AsciiArt object at 0x10640ec60>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <claude.AsciiArt object at 0x10640f650>

    def test_triangle(art):
        assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
>       assert art.draw_triangle(5, 3, "*") in {"*\n***\n******", "*\n***\n******\n"}
E       AssertionError: assert '**\n***\n*****' in {'*\n***\n******', '*\n***\n******\n'}
E        +  where '**\n***\n*****' = draw_triangle(5, 3, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x10640f650>.draw_triangle

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:203: AssertionError
_____________________________ test_triangle_large ______________________________

art = <claude.AsciiArt object at 0x10640e870>

    def test_triangle_large(art):
        assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
>       assert art.draw_triangle(3, 150, "*") in {
            "*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***",
            "*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n",
        }

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x10640e870>, width = 3, height = 150
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle ASCII art shape.
    
        The triangle grows diagonally to the right, starting from
        the top-left corner.
    
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: A multi-line string representing the triangle.
    
        Raises:
            ValueError: If inputs are invalid (see _validate_input).
            ValueError: If width is less than height (cannot form a right triangle).
        """
        self._validate_input(width, height, symbol)
    
        if width < height:
>           raise ValueError("Width must be greater than or equal to height for a right triangle")
E           ValueError: Width must be greater than or equal to height for a right triangle

generated/code/ascii_art/2-few_shot/iteration_5/claude.py:128: ValueError
__________________________ test_triangle_wrong_input ___________________________

art = <claude.AsciiArt object at 0x10640e480>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(1.5, 3, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(3, 1.5, "*")

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x10640e480>, width = 3, height = 1.5
symbol = '*'

    def draw_triangle(self, width: int, height: int, symbol: str) -> str:
        """
        Draws a right-angled triangle ASCII art shape.
    
        The triangle grows diagonally to the right, starting from
        the top-left corner.
    
        Args:
            width (int): The base width of the triangle.
            height (int): The height of the triangle.
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: A multi-line string representing the triangle.
    
        Raises:
            ValueError: If inputs are invalid (see _validate_input).
            ValueError: If width is less than height (cannot form a right triangle).
        """
        self._validate_input(width, height, symbol)
    
        if width < height:
            raise ValueError("Width must be greater than or equal to height for a right triangle")
    
        result = []
>       for i in range(height):
E       TypeError: 'float' object cannot be interpreted as an integer

generated/code/ascii_art/2-few_shot/iteration_5/claude.py:131: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <claude.AsciiArt object at 0x10640d4c0>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <claude.AsciiArt object at 0x10640d4c0>, height = 1.5, symbol = '*'

    def draw_pyramid(self, height: int, symbol: str) -> str:
        """
        Draws a symmetrical pyramid ASCII art shape.
    
        Args:
            height (int): The height of the pyramid.
            symbol (str): The symbol to use for drawing.
    
        Returns:
            str: A multi-line string representing the pyramid.
    
        Raises:
            ValueError: If inputs are invalid (see _validate_input).
        """
        self._validate_input(height, height, symbol)
    
        result = []
        width = 2 * height - 1  # Width of the base of the pyramid
    
>       for i in range(height):
E       TypeError: 'float' object cannot be interpreted as an integer

generated/code/ascii_art/2-few_shot/iteration_5/claude.py:159: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_square_wrong_input
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_parallelogram
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_triangle
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_triangle_large
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/2-few_shot/iteration_5/5_functional_correctness-claude.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.10s =========================
