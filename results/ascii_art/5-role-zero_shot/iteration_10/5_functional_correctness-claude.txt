Testing module: claude
============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-8.3.5, pluggy-1.5.0
rootdir: /Users/martinrenner/Projects/BP
plugins: anyio-4.6.2.post1
collected 35 items

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py . [  2%]
..F......F...F..FFFFFF.F......F...                                       [100%]

=================================== FAILURES ===================================
___________________________ test_square_wrong_input ____________________________

art = <claude.AsciiArt object at 0x106e932f0>

    def test_square_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_square(-1, "*")
        with pytest.raises(ValueError):
            art.draw_square(0, "*")
        with pytest.raises(ValueError):
>           art.draw_square(1.5, "*")

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:53: in draw_square
    self._validate_dimensions(width)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = (1.5,), dimension = 1.5

    @staticmethod
    def _validate_dimensions(*dimensions: int) -> None:
        """Validate that all dimensions are positive integers.
    
        Args:
            *dimensions: Variable number of dimensions to validate.
    
        Raises:
            ValueError: If any dimension is non-positive.
        """
        for dimension in dimensions:
            if not isinstance(dimension, int):
>               raise TypeError(f"Dimension must be an integer, got {type(dimension).__name__}")
E               TypeError: Dimension must be an integer, got float

generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:35: TypeError
__________________________ test_rectangle_wrong_input __________________________

art = <claude.AsciiArt object at 0x106e908f0>

    def test_rectangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_rectangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(3, -1, "*")
        with pytest.raises(ValueError):
            art.draw_rectangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_rectangle(1.5, 3, "*")

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:107: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:76: in draw_rectangle
    self._validate_dimensions(width, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = (1.5, 3), dimension = 1.5

    @staticmethod
    def _validate_dimensions(*dimensions: int) -> None:
        """Validate that all dimensions are positive integers.
    
        Args:
            *dimensions: Variable number of dimensions to validate.
    
        Raises:
            ValueError: If any dimension is non-positive.
        """
        for dimension in dimensions:
            if not isinstance(dimension, int):
>               raise TypeError(f"Dimension must be an integer, got {type(dimension).__name__}")
E               TypeError: Dimension must be an integer, got float

generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:35: TypeError
______________________________ test_parallelogram ______________________________

art = <claude.AsciiArt object at 0x106e5a030>

    def test_parallelogram(art):
        assert art.draw_parallelogram(10, 5, "*") in {
            "**********\n **********\n  **********\n   **********\n    **********\n",
            "**********\n **********\n  **********\n   **********\n    **********",
        }
>       assert art.draw_parallelogram(11, 6, "X") in {
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n",
            "***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********",
        }
E       AssertionError: assert 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' in {'***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********', '***********\n ***********\n  ***********\n   ***********\n    ***********\n     ***********\n'}
E        +  where 'XXXXXXXXXXX\n XXXXXXXXXXX\n  XXXXXXXXXXX\n   XXXXXXXXXXX\n    XXXXXXXXXXX\n     XXXXXXXXXXX' = draw_parallelogram(11, 6, 'X')
E        +    where draw_parallelogram = <claude.AsciiArt object at 0x106e5a030>.draw_parallelogram

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:141: AssertionError
________________________ test_parallelogram_wrong_input ________________________

art = <claude.AsciiArt object at 0x106ead100>

    def test_parallelogram_wrong_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(-1, 9, "*")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:169: AttributeError
______________________ test_parallelogram_multichar_input ______________________

art = <claude.AsciiArt object at 0x106eac4a0>

    def test_parallelogram_multichar_input(art):
        with pytest.raises(ValueError):
>           art.test_parallelogram(5, 9, "abc")
E           AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:180: AttributeError
______________________ test_parallelogram_char_contained _______________________

art = <claude.AsciiArt object at 0x106eacd10>

    def test_parallelogram_char_contained(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 8, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:185: AttributeError
_____________________ test_parallelogram_char_only_defined _____________________

art = <claude.AsciiArt object at 0x106ead610>

    def test_parallelogram_char_only_defined(art):
        printable_char = "a"
>       result = art.test_parallelogram(5, 7, printable_char)
E       AttributeError: 'AsciiArt' object has no attribute 'test_parallelogram'. Did you mean: 'draw_parallelogram'?

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:191: AttributeError
________________________________ test_triangle _________________________________

art = <claude.AsciiArt object at 0x106eadfd0>

    def test_triangle(art):
        assert art.draw_triangle(9, 3, "*") in {
            "***\n******\n*********",
            "***\n******\n*********\n",
        }
>       assert art.draw_triangle(5, 3, "*") in {"*\n***\n******", "*\n***\n******\n"}
E       AssertionError: assert '*\n**\n***' in {'*\n***\n******', '*\n***\n******\n'}
E        +  where '*\n**\n***' = draw_triangle(5, 3, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x106eadfd0>.draw_triangle

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:203: AssertionError
_____________________________ test_triangle_large ______________________________

art = <claude.AsciiArt object at 0x106e90d40>

    def test_triangle_large(art):
        assert art.draw_triangle(150, 3, "*") in {
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************",
            "**************************************************\n****************************************************************************************************\n******************************************************************************************************************************************************\n",
        }
>       assert art.draw_triangle(3, 150, "*") in {
            "*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***",
            "*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n",
        }
E       AssertionError: assert '*\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n...***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***' in {'*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\...\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n'}
E        +  where '*\n**\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n...***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***' = draw_triangle(3, 150, '*')
E        +    where draw_triangle = <claude.AsciiArt object at 0x106e90d40>.draw_triangle

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:213: AssertionError
__________________________ test_triangle_wrong_input ___________________________

art = <claude.AsciiArt object at 0x106e93590>

    def test_triangle_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_triangle(-1, 3, "*")
        with pytest.raises(ValueError):
            art.draw_triangle(0, 0, "*")
        with pytest.raises(ValueError):
>           art.draw_triangle(1.5, 3, "*")

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:133: in draw_triangle
    self._validate_dimensions(width, height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = (1.5, 3), dimension = 1.5

    @staticmethod
    def _validate_dimensions(*dimensions: int) -> None:
        """Validate that all dimensions are positive integers.
    
        Args:
            *dimensions: Variable number of dimensions to validate.
    
        Raises:
            ValueError: If any dimension is non-positive.
        """
        for dimension in dimensions:
            if not isinstance(dimension, int):
>               raise TypeError(f"Dimension must be an integer, got {type(dimension).__name__}")
E               TypeError: Dimension must be an integer, got float

generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:35: TypeError
___________________________ test_pyramid_wrong_input ___________________________

art = <claude.AsciiArt object at 0x106eafc50>

    def test_pyramid_wrong_input(art):
        with pytest.raises(ValueError):
            art.draw_pyramid(-1, "*")
        with pytest.raises(ValueError):
            art.draw_pyramid(0, "*")
        with pytest.raises(ValueError):
>           art.draw_pyramid(1.5, "*")

generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py:292: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:163: in draw_pyramid
    self._validate_dimensions(height)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

dimensions = (1.5,), dimension = 1.5

    @staticmethod
    def _validate_dimensions(*dimensions: int) -> None:
        """Validate that all dimensions are positive integers.
    
        Args:
            *dimensions: Variable number of dimensions to validate.
    
        Raises:
            ValueError: If any dimension is non-positive.
        """
        for dimension in dimensions:
            if not isinstance(dimension, int):
>               raise TypeError(f"Dimension must be an integer, got {type(dimension).__name__}")
E               TypeError: Dimension must be an integer, got float

generated/code/ascii_art/5-role-zero_shot/iteration_10/claude.py:35: TypeError
=========================== short test summary info ============================
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_square_wrong_input
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_rectangle_wrong_input
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_parallelogram
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_parallelogram_wrong_input
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_parallelogram_multichar_input
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_parallelogram_char_contained
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_parallelogram_char_only_defined
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_triangle
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_triangle_large
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_triangle_wrong_input
FAILED generated/code/ascii_art/5-role-zero_shot/iteration_10/5_functional_correctness-claude.py::test_pyramid_wrong_input
======================== 11 failed, 24 passed in 0.11s =========================
